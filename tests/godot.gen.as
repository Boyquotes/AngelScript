// THIS FILE IS GENERATED BY TOO DO NOT MODIFY
namespace godot {

	
	class RegEx : Reference {
		
		
		void clear() {
			ptr.godot_icall(bindings::id_RegEx_clear);
		}
		
		int compile(const String &in pattern) {
			return ptr.godot_icall(bindings::id_RegEx_compile, pattern);
		}
		
		RegExMatch@ search(const String &in subject, int offset, int end) const {
			RegExMatch ret = ptr.godot_icall(bindings::id_RegEx_search, subject, offset, end);
			return  ret;
		}
		
		Array search_all(const String &in subject, int offset, int end) const {
			return ptr.godot_icall(bindings::id_RegEx_search_all, subject, offset, end);
		}
		
		String sub(const String &in subject, const String &in replacement, bool all, int offset, int end) const {
			return ptr.godot_icall(bindings::id_RegEx_sub, subject, replacement, all, offset, end);
		}
		
		bool is_valid() const {
			return ptr.godot_icall(bindings::id_RegEx_is_valid);
		}
		
		String get_pattern() const {
			return ptr.godot_icall(bindings::id_RegEx_get_pattern);
		}
		
		int get_group_count() const {
			return ptr.godot_icall(bindings::id_RegEx_get_group_count);
		}
		
		Array get_names() const {
			return ptr.godot_icall(bindings::id_RegEx_get_names);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_RegEx)).ptr();
		}
		
	}
	
	class EditorSpatialGizmo : SpatialGizmo {
		
		
		void redraw() {
			
		}
		
		String get_handle_name(int index) {
			return String();
		}
		
		void get_handle_value(int index) {
			
		}
		
		void set_handle(int index, Camera@ camera, const Vector2 &in point) {
			
		}
		
		void commit_handle(int index, const Variant &in restore, bool cancel) {
			
		}
		
		void add_lines(const PoolVector3Array &in lines, Material@ material, bool billboard) {
			ptr.godot_icall(bindings::id_EditorSpatialGizmo_add_lines, lines, material, billboard);
		}
		
		void add_mesh(ArrayMesh@ mesh, bool billboard, const RID &in skeleton) {
			ptr.godot_icall(bindings::id_EditorSpatialGizmo_add_mesh, mesh, billboard, skeleton);
		}
		
		void add_collision_segments(const PoolVector3Array &in segments) {
			ptr.godot_icall(bindings::id_EditorSpatialGizmo_add_collision_segments, segments);
		}
		
		void add_collision_triangles(TriangleMesh@ triangles, const AABB &in bounds) {
			ptr.godot_icall(bindings::id_EditorSpatialGizmo_add_collision_triangles, triangles, bounds);
		}
		
		void add_unscaled_billboard(Material@ material, float default_scale) {
			ptr.godot_icall(bindings::id_EditorSpatialGizmo_add_unscaled_billboard, material, default_scale);
		}
		
		void add_handles(const PoolVector3Array &in handles, bool billboard, bool secondary) {
			ptr.godot_icall(bindings::id_EditorSpatialGizmo_add_handles, handles, billboard, secondary);
		}
		
		void set_spatial_node(Node@ node) {
			ptr.godot_icall(bindings::id_EditorSpatialGizmo_set_spatial_node, node);
		}
		
		void clear() {
			ptr.godot_icall(bindings::id_EditorSpatialGizmo_clear);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_EditorSpatialGizmo)).ptr();
		}
		
	}
	
	class Curve2D : Resource {
		
		
		int get_point_count() const {
			return ptr.godot_icall(bindings::id_Curve2D_get_point_count);
		}
		
		void add_point(const Vector2 &in position, const Vector2 &in In, const Vector2 &in Out, int at_position) {
			ptr.godot_icall(bindings::id_Curve2D_add_point, position, In, Out, at_position);
		}
		
		void set_point_position(int idx, const Vector2 &in position) {
			ptr.godot_icall(bindings::id_Curve2D_set_point_position, idx, position);
		}
		
		Vector2 get_point_position(int idx) const {
			return ptr.godot_icall(bindings::id_Curve2D_get_point_position, idx);
		}
		
		void set_point_in(int idx, const Vector2 &in position) {
			ptr.godot_icall(bindings::id_Curve2D_set_point_in, idx, position);
		}
		
		Vector2 get_point_in(int idx) const {
			return ptr.godot_icall(bindings::id_Curve2D_get_point_in, idx);
		}
		
		void set_point_out(int idx, const Vector2 &in position) {
			ptr.godot_icall(bindings::id_Curve2D_set_point_out, idx, position);
		}
		
		Vector2 get_point_out(int idx) const {
			return ptr.godot_icall(bindings::id_Curve2D_get_point_out, idx);
		}
		
		void remove_point(int idx) {
			ptr.godot_icall(bindings::id_Curve2D_remove_point, idx);
		}
		
		void clear_points() {
			ptr.godot_icall(bindings::id_Curve2D_clear_points);
		}
		
		Vector2 interpolate(int idx, float t) const {
			return ptr.godot_icall(bindings::id_Curve2D_interpolate, idx, t);
		}
		
		Vector2 interpolatef(float fofs) const {
			return ptr.godot_icall(bindings::id_Curve2D_interpolatef, fofs);
		}
		
		void set_bake_interval(float distance) {
			ptr.godot_icall(bindings::id_Curve2D_set_bake_interval, distance);
		}
		
		float get_bake_interval() const {
			return ptr.godot_icall(bindings::id_Curve2D_get_bake_interval);
		}
		
		float get_baked_length() const {
			return ptr.godot_icall(bindings::id_Curve2D_get_baked_length);
		}
		
		Vector2 interpolate_baked(float offset, bool cubic) const {
			return ptr.godot_icall(bindings::id_Curve2D_interpolate_baked, offset, cubic);
		}
		
		PoolVector2Array get_baked_points() const {
			return ptr.godot_icall(bindings::id_Curve2D_get_baked_points);
		}
		
		PoolVector2Array tessellate(int max_stages, float tolerance_degrees) const {
			return ptr.godot_icall(bindings::id_Curve2D_tessellate, max_stages, tolerance_degrees);
		}
		
		protected Dictionary _get_data() const {
			return ptr.godot_icall(bindings::id_Curve2D__get_data);
		}
		
		protected void _set_data(const Dictionary &in arg0) {
			ptr.godot_icall(bindings::id_Curve2D__set_data, arg0);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Curve2D)).ptr();
		}
		
	}
	
	class AStar : Reference {
		
		
		protected float _estimate_cost(int from_id, int to_id) {
			return 0;
		}
		
		protected float _compute_cost(int from_id, int to_id) {
			return 0;
		}
		
		int get_available_point_id() const {
			return ptr.godot_icall(bindings::id_AStar_get_available_point_id);
		}
		
		void add_point(int id, const Vector3 &in position, float weight_scale) {
			ptr.godot_icall(bindings::id_AStar_add_point, id, position, weight_scale);
		}
		
		Vector3 get_point_position(int id) const {
			return ptr.godot_icall(bindings::id_AStar_get_point_position, id);
		}
		
		void set_point_position(int id, const Vector3 &in position) {
			ptr.godot_icall(bindings::id_AStar_set_point_position, id, position);
		}
		
		float get_point_weight_scale(int id) const {
			return ptr.godot_icall(bindings::id_AStar_get_point_weight_scale, id);
		}
		
		void set_point_weight_scale(int id, float weight_scale) {
			ptr.godot_icall(bindings::id_AStar_set_point_weight_scale, id, weight_scale);
		}
		
		void remove_point(int id) {
			ptr.godot_icall(bindings::id_AStar_remove_point, id);
		}
		
		bool has_point(int id) const {
			return ptr.godot_icall(bindings::id_AStar_has_point, id);
		}
		
		Array get_points() {
			return ptr.godot_icall(bindings::id_AStar_get_points);
		}
		
		PoolIntArray get_point_connections(int id) {
			return ptr.godot_icall(bindings::id_AStar_get_point_connections, id);
		}
		
		void connect_points(int id, int to_id, bool bidirectional) {
			ptr.godot_icall(bindings::id_AStar_connect_points, id, to_id, bidirectional);
		}
		
		void disconnect_points(int id, int to_id) {
			ptr.godot_icall(bindings::id_AStar_disconnect_points, id, to_id);
		}
		
		bool are_points_connected(int id, int to_id) const {
			return ptr.godot_icall(bindings::id_AStar_are_points_connected, id, to_id);
		}
		
		void clear() {
			ptr.godot_icall(bindings::id_AStar_clear);
		}
		
		int get_closest_point(const Vector3 &in to_position) const {
			return ptr.godot_icall(bindings::id_AStar_get_closest_point, to_position);
		}
		
		Vector3 get_closest_position_in_segment(const Vector3 &in to_position) const {
			return ptr.godot_icall(bindings::id_AStar_get_closest_position_in_segment, to_position);
		}
		
		PoolVector3Array get_point_path(int from_id, int to_id) {
			return ptr.godot_icall(bindings::id_AStar_get_point_path, from_id, to_id);
		}
		
		PoolIntArray get_id_path(int from_id, int to_id) {
			return ptr.godot_icall(bindings::id_AStar_get_id_path, from_id, to_id);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AStar)).ptr();
		}
		
	}
	
	class ImmediateGeometry : GeometryInstance {
		
		
		void begin(int primitive, Texture@ texture) {
			ptr.godot_icall(bindings::id_ImmediateGeometry_begin, primitive, texture);
		}
		
		void set_normal(const Vector3 &in normal) {
			ptr.godot_icall(bindings::id_ImmediateGeometry_set_normal, normal);
		}
		
		void set_tangent(const Plane &in tangent) {
			ptr.godot_icall(bindings::id_ImmediateGeometry_set_tangent, tangent);
		}
		
		void set_color(const Color &in color) {
			ptr.godot_icall(bindings::id_ImmediateGeometry_set_color, color);
		}
		
		void set_uv(const Vector2 &in uv) {
			ptr.godot_icall(bindings::id_ImmediateGeometry_set_uv, uv);
		}
		
		void set_uv2(const Vector2 &in uv) {
			ptr.godot_icall(bindings::id_ImmediateGeometry_set_uv2, uv);
		}
		
		void add_vertex(const Vector3 &in position) {
			ptr.godot_icall(bindings::id_ImmediateGeometry_add_vertex, position);
		}
		
		void add_sphere(int lats, int lons, float radius, bool add_uv) {
			ptr.godot_icall(bindings::id_ImmediateGeometry_add_sphere, lats, lons, radius, add_uv);
		}
		
		void end() {
			ptr.godot_icall(bindings::id_ImmediateGeometry_end);
		}
		
		void clear() {
			ptr.godot_icall(bindings::id_ImmediateGeometry_clear);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ImmediateGeometry);
		}
		
	}
	
	class NativeScript : Script {
		
		
		void set_class_name(const String &in class_name) {
			ptr.godot_icall(bindings::id_NativeScript_set_class_name, class_name);
		}
		
		String get_class_name() const {
			return ptr.godot_icall(bindings::id_NativeScript_get_class_name);
		}
		
		void set_library(GDNativeLibrary@ library) {
			ptr.godot_icall(bindings::id_NativeScript_set_library, library);
		}
		
		GDNativeLibrary@ get_library() const {
			GDNativeLibrary ret = ptr.godot_icall(bindings::id_NativeScript_get_library);
			return  ret;
		}
		
		Variant new() {
			return ptr.godot_icall(bindings::id_NativeScript_new);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_NativeScript)).ptr();
		}
		
	}
	
	class RectangleShape2D : Shape2D {
		
		
		void set_extents(const Vector2 &in extents) {
			ptr.godot_icall(bindings::id_RectangleShape2D_set_extents, extents);
		}
		
		Vector2 get_extents() const {
			return ptr.godot_icall(bindings::id_RectangleShape2D_get_extents);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_RectangleShape2D)).ptr();
		}
		
	}
	
	class Node2D : CanvasItem {
		
		
		void set_position(const Vector2 &in position) {
			ptr.godot_icall(bindings::id_Node2D_set_position, position);
		}
		
		void set_rotation(float radians) {
			ptr.godot_icall(bindings::id_Node2D_set_rotation, radians);
		}
		
		void set_rotation_degrees(float degrees) {
			ptr.godot_icall(bindings::id_Node2D_set_rotation_degrees, degrees);
		}
		
		void set_scale(const Vector2 &in scale) {
			ptr.godot_icall(bindings::id_Node2D_set_scale, scale);
		}
		
		Vector2 get_position() const {
			return ptr.godot_icall(bindings::id_Node2D_get_position);
		}
		
		float get_rotation() const {
			return ptr.godot_icall(bindings::id_Node2D_get_rotation);
		}
		
		float get_rotation_degrees() const {
			return ptr.godot_icall(bindings::id_Node2D_get_rotation_degrees);
		}
		
		Vector2 get_scale() const {
			return ptr.godot_icall(bindings::id_Node2D_get_scale);
		}
		
		void rotate(float radians) {
			ptr.godot_icall(bindings::id_Node2D_rotate, radians);
		}
		
		void move_local_x(float delta, bool scaled) {
			ptr.godot_icall(bindings::id_Node2D_move_local_x, delta, scaled);
		}
		
		void move_local_y(float delta, bool scaled) {
			ptr.godot_icall(bindings::id_Node2D_move_local_y, delta, scaled);
		}
		
		void translate(const Vector2 &in offset) {
			ptr.godot_icall(bindings::id_Node2D_translate, offset);
		}
		
		void global_translate(const Vector2 &in offset) {
			ptr.godot_icall(bindings::id_Node2D_global_translate, offset);
		}
		
		void apply_scale(const Vector2 &in ratio) {
			ptr.godot_icall(bindings::id_Node2D_apply_scale, ratio);
		}
		
		void set_global_position(const Vector2 &in position) {
			ptr.godot_icall(bindings::id_Node2D_set_global_position, position);
		}
		
		Vector2 get_global_position() const {
			return ptr.godot_icall(bindings::id_Node2D_get_global_position);
		}
		
		void set_global_rotation(float radians) {
			ptr.godot_icall(bindings::id_Node2D_set_global_rotation, radians);
		}
		
		float get_global_rotation() const {
			return ptr.godot_icall(bindings::id_Node2D_get_global_rotation);
		}
		
		void set_global_rotation_degrees(float degrees) {
			ptr.godot_icall(bindings::id_Node2D_set_global_rotation_degrees, degrees);
		}
		
		float get_global_rotation_degrees() const {
			return ptr.godot_icall(bindings::id_Node2D_get_global_rotation_degrees);
		}
		
		void set_global_scale(const Vector2 &in scale) {
			ptr.godot_icall(bindings::id_Node2D_set_global_scale, scale);
		}
		
		Vector2 get_global_scale() const {
			return ptr.godot_icall(bindings::id_Node2D_get_global_scale);
		}
		
		void set_transform(const Transform2D &in xform) {
			ptr.godot_icall(bindings::id_Node2D_set_transform, xform);
		}
		
		void set_global_transform(const Transform2D &in xform) {
			ptr.godot_icall(bindings::id_Node2D_set_global_transform, xform);
		}
		
		void look_at(const Vector2 &in point) {
			ptr.godot_icall(bindings::id_Node2D_look_at, point);
		}
		
		float get_angle_to(const Vector2 &in point) const {
			return ptr.godot_icall(bindings::id_Node2D_get_angle_to, point);
		}
		
		Vector2 to_local(const Vector2 &in global_point) const {
			return ptr.godot_icall(bindings::id_Node2D_to_local, global_point);
		}
		
		Vector2 to_global(const Vector2 &in local_point) const {
			return ptr.godot_icall(bindings::id_Node2D_to_global, local_point);
		}
		
		void set_z_index(int z_index) {
			ptr.godot_icall(bindings::id_Node2D_set_z_index, z_index);
		}
		
		int get_z_index() const {
			return ptr.godot_icall(bindings::id_Node2D_get_z_index);
		}
		
		void set_z_as_relative(bool enable) {
			ptr.godot_icall(bindings::id_Node2D_set_z_as_relative, enable);
		}
		
		bool is_z_relative() const {
			return ptr.godot_icall(bindings::id_Node2D_is_z_relative);
		}
		
		Transform2D get_relative_transform_to_parent(Node@ parent) const {
			return ptr.godot_icall(bindings::id_Node2D_get_relative_transform_to_parent, parent);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Node2D);
		}
		
	}
	
	class AudioEffectHighPassFilter : AudioEffectFilter {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectHighPassFilter)).ptr();
		}
		
	}
	
	class InputEventMagnifyGesture : InputEventGesture {
		
		
		void set_factor(float factor) {
			ptr.godot_icall(bindings::id_InputEventMagnifyGesture_set_factor, factor);
		}
		
		float get_factor() const {
			return ptr.godot_icall(bindings::id_InputEventMagnifyGesture_get_factor);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_InputEventMagnifyGesture)).ptr();
		}
		
	}
	
	class IP_Unix : IP {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_IP_Unix);
		}
		
	}
	
	class ResourceImporterTheora : ResourceImporter {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ResourceImporterTheora)).ptr();
		}
		
	}
	
	class RayShape : Shape {
		
		
		void set_length(float length) {
			ptr.godot_icall(bindings::id_RayShape_set_length, length);
		}
		
		float get_length() const {
			return ptr.godot_icall(bindings::id_RayShape_get_length);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_RayShape)).ptr();
		}
		
	}
	
	class SpatialMaterial : Material {
		
		
		void set_albedo(const Color &in albedo) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_albedo, albedo);
		}
		
		Color get_albedo() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_albedo);
		}
		
		void set_specular(float specular) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_specular, specular);
		}
		
		float get_specular() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_specular);
		}
		
		void set_metallic(float metallic) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_metallic, metallic);
		}
		
		float get_metallic() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_metallic);
		}
		
		void set_roughness(float roughness) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_roughness, roughness);
		}
		
		float get_roughness() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_roughness);
		}
		
		void set_emission(const Color &in emission) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_emission, emission);
		}
		
		Color get_emission() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_emission);
		}
		
		void set_emission_energy(float emission_energy) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_emission_energy, emission_energy);
		}
		
		float get_emission_energy() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_emission_energy);
		}
		
		void set_normal_scale(float normal_scale) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_normal_scale, normal_scale);
		}
		
		float get_normal_scale() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_normal_scale);
		}
		
		void set_rim(float rim) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_rim, rim);
		}
		
		float get_rim() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_rim);
		}
		
		void set_rim_tint(float rim_tint) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_rim_tint, rim_tint);
		}
		
		float get_rim_tint() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_rim_tint);
		}
		
		void set_clearcoat(float clearcoat) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_clearcoat, clearcoat);
		}
		
		float get_clearcoat() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_clearcoat);
		}
		
		void set_clearcoat_gloss(float clearcoat_gloss) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_clearcoat_gloss, clearcoat_gloss);
		}
		
		float get_clearcoat_gloss() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_clearcoat_gloss);
		}
		
		void set_anisotropy(float anisotropy) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_anisotropy, anisotropy);
		}
		
		float get_anisotropy() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_anisotropy);
		}
		
		void set_depth_scale(float depth_scale) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_depth_scale, depth_scale);
		}
		
		float get_depth_scale() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_depth_scale);
		}
		
		void set_subsurface_scattering_strength(float strength) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_subsurface_scattering_strength, strength);
		}
		
		float get_subsurface_scattering_strength() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_subsurface_scattering_strength);
		}
		
		void set_transmission(const Color &in transmission) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_transmission, transmission);
		}
		
		Color get_transmission() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_transmission);
		}
		
		void set_refraction(float refraction) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_refraction, refraction);
		}
		
		float get_refraction() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_refraction);
		}
		
		void set_line_width(float line_width) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_line_width, line_width);
		}
		
		float get_line_width() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_line_width);
		}
		
		void set_point_size(float point_size) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_point_size, point_size);
		}
		
		float get_point_size() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_point_size);
		}
		
		void set_detail_uv(int detail_uv) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_detail_uv, detail_uv);
		}
		
		int get_detail_uv() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_detail_uv);
		}
		
		void set_blend_mode(int blend_mode) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_blend_mode, blend_mode);
		}
		
		int get_blend_mode() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_blend_mode);
		}
		
		void set_depth_draw_mode(int depth_draw_mode) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_depth_draw_mode, depth_draw_mode);
		}
		
		int get_depth_draw_mode() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_depth_draw_mode);
		}
		
		void set_cull_mode(int cull_mode) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_cull_mode, cull_mode);
		}
		
		int get_cull_mode() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_cull_mode);
		}
		
		void set_diffuse_mode(int diffuse_mode) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_diffuse_mode, diffuse_mode);
		}
		
		int get_diffuse_mode() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_diffuse_mode);
		}
		
		void set_specular_mode(int specular_mode) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_specular_mode, specular_mode);
		}
		
		int get_specular_mode() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_specular_mode);
		}
		
		void set_flag(int flag, bool enable) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_flag, flag, enable);
		}
		
		bool get_flag(int flag) const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_flag, flag);
		}
		
		void set_feature(int feature, bool enable) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_feature, feature, enable);
		}
		
		bool get_feature(int feature) const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_feature, feature);
		}
		
		void set_texture(int param, Texture@ texture) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_texture, param, texture);
		}
		
		Texture@ get_texture(int param) const {
			Texture ret = ptr.godot_icall(bindings::id_SpatialMaterial_get_texture, param);
			return  ret;
		}
		
		void set_detail_blend_mode(int detail_blend_mode) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_detail_blend_mode, detail_blend_mode);
		}
		
		int get_detail_blend_mode() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_detail_blend_mode);
		}
		
		void set_uv1_scale(const Vector3 &in scale) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_uv1_scale, scale);
		}
		
		Vector3 get_uv1_scale() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_uv1_scale);
		}
		
		void set_uv1_offset(const Vector3 &in offset) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_uv1_offset, offset);
		}
		
		Vector3 get_uv1_offset() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_uv1_offset);
		}
		
		void set_uv1_triplanar_blend_sharpness(float sharpness) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_uv1_triplanar_blend_sharpness, sharpness);
		}
		
		float get_uv1_triplanar_blend_sharpness() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_uv1_triplanar_blend_sharpness);
		}
		
		void set_uv2_scale(const Vector3 &in scale) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_uv2_scale, scale);
		}
		
		Vector3 get_uv2_scale() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_uv2_scale);
		}
		
		void set_uv2_offset(const Vector3 &in offset) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_uv2_offset, offset);
		}
		
		Vector3 get_uv2_offset() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_uv2_offset);
		}
		
		void set_uv2_triplanar_blend_sharpness(float sharpness) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_uv2_triplanar_blend_sharpness, sharpness);
		}
		
		float get_uv2_triplanar_blend_sharpness() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_uv2_triplanar_blend_sharpness);
		}
		
		void set_billboard_mode(int mode) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_billboard_mode, mode);
		}
		
		int get_billboard_mode() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_billboard_mode);
		}
		
		void set_particles_anim_h_frames(int frames) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_particles_anim_h_frames, frames);
		}
		
		int get_particles_anim_h_frames() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_particles_anim_h_frames);
		}
		
		void set_particles_anim_v_frames(int frames) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_particles_anim_v_frames, frames);
		}
		
		int get_particles_anim_v_frames() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_particles_anim_v_frames);
		}
		
		void set_particles_anim_loop(int frames) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_particles_anim_loop, frames);
		}
		
		int get_particles_anim_loop() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_particles_anim_loop);
		}
		
		void set_depth_deep_parallax(bool enable) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_depth_deep_parallax, enable);
		}
		
		bool is_depth_deep_parallax_enabled() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_is_depth_deep_parallax_enabled);
		}
		
		void set_depth_deep_parallax_min_layers(int layer) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_depth_deep_parallax_min_layers, layer);
		}
		
		int get_depth_deep_parallax_min_layers() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_depth_deep_parallax_min_layers);
		}
		
		void set_depth_deep_parallax_max_layers(int layer) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_depth_deep_parallax_max_layers, layer);
		}
		
		int get_depth_deep_parallax_max_layers() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_depth_deep_parallax_max_layers);
		}
		
		void set_grow(float amount) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_grow, amount);
		}
		
		float get_grow() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_grow);
		}
		
		void set_emission_operator(int operator) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_emission_operator, operator);
		}
		
		int get_emission_operator() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_emission_operator);
		}
		
		void set_ao_light_affect(float amount) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_ao_light_affect, amount);
		}
		
		float get_ao_light_affect() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_ao_light_affect);
		}
		
		void set_alpha_scissor_threshold(float threshold) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_alpha_scissor_threshold, threshold);
		}
		
		float get_alpha_scissor_threshold() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_alpha_scissor_threshold);
		}
		
		void set_grow_enabled(bool enable) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_grow_enabled, enable);
		}
		
		bool is_grow_enabled() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_is_grow_enabled);
		}
		
		void set_metallic_texture_channel(int channel) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_metallic_texture_channel, channel);
		}
		
		int get_metallic_texture_channel() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_metallic_texture_channel);
		}
		
		void set_roughness_texture_channel(int channel) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_roughness_texture_channel, channel);
		}
		
		int get_roughness_texture_channel() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_roughness_texture_channel);
		}
		
		void set_ao_texture_channel(int channel) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_ao_texture_channel, channel);
		}
		
		int get_ao_texture_channel() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_ao_texture_channel);
		}
		
		void set_refraction_texture_channel(int channel) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_refraction_texture_channel, channel);
		}
		
		int get_refraction_texture_channel() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_refraction_texture_channel);
		}
		
		void set_proximity_fade(bool enabled) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_proximity_fade, enabled);
		}
		
		bool is_proximity_fade_enabled() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_is_proximity_fade_enabled);
		}
		
		void set_proximity_fade_distance(float distance) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_proximity_fade_distance, distance);
		}
		
		float get_proximity_fade_distance() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_proximity_fade_distance);
		}
		
		void set_distance_fade(bool enabled) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_distance_fade, enabled);
		}
		
		bool is_distance_fade_enabled() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_is_distance_fade_enabled);
		}
		
		void set_distance_fade_max_distance(float distance) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_distance_fade_max_distance, distance);
		}
		
		float get_distance_fade_max_distance() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_distance_fade_max_distance);
		}
		
		void set_distance_fade_min_distance(float distance) {
			ptr.godot_icall(bindings::id_SpatialMaterial_set_distance_fade_min_distance, distance);
		}
		
		float get_distance_fade_min_distance() const {
			return ptr.godot_icall(bindings::id_SpatialMaterial_get_distance_fade_min_distance);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_SpatialMaterial)).ptr();
		}
		
	}
	
	class TCP_Server : Reference {
		
		
		int listen(int port, const String &in bind_address) {
			return ptr.godot_icall(bindings::id_TCP_Server_listen, port, bind_address);
		}
		
		bool is_connection_available() const {
			return ptr.godot_icall(bindings::id_TCP_Server_is_connection_available);
		}
		
		StreamPeerTCP@ take_connection() {
			StreamPeerTCP ret = ptr.godot_icall(bindings::id_TCP_Server_take_connection);
			return  ret;
		}
		
		void stop() {
			ptr.godot_icall(bindings::id_TCP_Server_stop);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_TCP_Server)).ptr();
		}
		
	}
	
	class ColorPicker : BoxContainer {
		
		
		void set_pick_color(const Color &in color) {
			ptr.godot_icall(bindings::id_ColorPicker_set_pick_color, color);
		}
		
		Color get_pick_color() const {
			return ptr.godot_icall(bindings::id_ColorPicker_get_pick_color);
		}
		
		void set_raw_mode(bool mode) {
			ptr.godot_icall(bindings::id_ColorPicker_set_raw_mode, mode);
		}
		
		bool is_raw_mode() const {
			return ptr.godot_icall(bindings::id_ColorPicker_is_raw_mode);
		}
		
		void set_edit_alpha(bool show) {
			ptr.godot_icall(bindings::id_ColorPicker_set_edit_alpha, show);
		}
		
		bool is_editing_alpha() const {
			return ptr.godot_icall(bindings::id_ColorPicker_is_editing_alpha);
		}
		
		void add_preset(const Color &in color) {
			ptr.godot_icall(bindings::id_ColorPicker_add_preset, color);
		}
		
		protected void _value_changed(float arg0) {
			ptr.godot_icall(bindings::id_ColorPicker__value_changed, arg0);
		}
		
		protected void _html_entered(const String &in arg0) {
			ptr.godot_icall(bindings::id_ColorPicker__html_entered, arg0);
		}
		
		protected void _text_type_toggled() {
			ptr.godot_icall(bindings::id_ColorPicker__text_type_toggled);
		}
		
		protected void _add_preset_pressed() {
			ptr.godot_icall(bindings::id_ColorPicker__add_preset_pressed);
		}
		
		protected void _screen_pick_pressed() {
			ptr.godot_icall(bindings::id_ColorPicker__screen_pick_pressed);
		}
		
		protected void _sample_draw() {
			ptr.godot_icall(bindings::id_ColorPicker__sample_draw);
		}
		
		protected void _update_presets() {
			ptr.godot_icall(bindings::id_ColorPicker__update_presets);
		}
		
		protected void _hsv_draw(int arg0, Control@ arg1) {
			ptr.godot_icall(bindings::id_ColorPicker__hsv_draw, arg0, arg1);
		}
		
		protected void _uv_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_ColorPicker__uv_input, arg0);
		}
		
		protected void _w_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_ColorPicker__w_input, arg0);
		}
		
		protected void _preset_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_ColorPicker__preset_input, arg0);
		}
		
		protected void _screen_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_ColorPicker__screen_input, arg0);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ColorPicker);
		}
		
	}
	
	class CollisionShape : Spatial {
		
		
		void resource_changed(Resource@ resource) {
			ptr.godot_icall(bindings::id_CollisionShape_resource_changed, resource);
		}
		
		void set_shape(Shape@ shape) {
			ptr.godot_icall(bindings::id_CollisionShape_set_shape, shape);
		}
		
		Shape@ get_shape() const {
			Shape ret = ptr.godot_icall(bindings::id_CollisionShape_get_shape);
			return  ret;
		}
		
		void set_disabled(bool enable) {
			ptr.godot_icall(bindings::id_CollisionShape_set_disabled, enable);
		}
		
		bool is_disabled() const {
			return ptr.godot_icall(bindings::id_CollisionShape_is_disabled);
		}
		
		void make_convex_from_brothers() {
			ptr.godot_icall(bindings::id_CollisionShape_make_convex_from_brothers);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_CollisionShape);
		}
		
	}
	
	class VisualScriptResourcePath : VisualScriptNode {
		
		
		void set_resource_path(const String &in path) {
			ptr.godot_icall(bindings::id_VisualScriptResourcePath_set_resource_path, path);
		}
		
		String get_resource_path() {
			return ptr.godot_icall(bindings::id_VisualScriptResourcePath_get_resource_path);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptResourcePath)).ptr();
		}
		
	}
	
	class ARVRInterfaceGDNative : ARVRInterface {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ARVRInterfaceGDNative)).ptr();
		}
		
	}
	
	class World2D : Resource {
		
		
		RID get_canvas() {
			return ptr.godot_icall(bindings::id_World2D_get_canvas);
		}
		
		RID get_space() {
			return ptr.godot_icall(bindings::id_World2D_get_space);
		}
		
		Physics2DDirectSpaceState@ get_direct_space_state() {
			Physics2DDirectSpaceState ret = ptr.godot_icall(bindings::id_World2D_get_direct_space_state);
			return  ret;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_World2D)).ptr();
		}
		
	}
	
	class Line2D : Node2D {
		
		
		void set_points(const PoolVector2Array &in points) {
			ptr.godot_icall(bindings::id_Line2D_set_points, points);
		}
		
		PoolVector2Array get_points() const {
			return ptr.godot_icall(bindings::id_Line2D_get_points);
		}
		
		void set_point_position(int i, const Vector2 &in position) {
			ptr.godot_icall(bindings::id_Line2D_set_point_position, i, position);
		}
		
		Vector2 get_point_position(int i) const {
			return ptr.godot_icall(bindings::id_Line2D_get_point_position, i);
		}
		
		int get_point_count() const {
			return ptr.godot_icall(bindings::id_Line2D_get_point_count);
		}
		
		void add_point(const Vector2 &in position) {
			ptr.godot_icall(bindings::id_Line2D_add_point, position);
		}
		
		void remove_point(int i) {
			ptr.godot_icall(bindings::id_Line2D_remove_point, i);
		}
		
		void set_width(float width) {
			ptr.godot_icall(bindings::id_Line2D_set_width, width);
		}
		
		float get_width() const {
			return ptr.godot_icall(bindings::id_Line2D_get_width);
		}
		
		void set_default_color(const Color &in color) {
			ptr.godot_icall(bindings::id_Line2D_set_default_color, color);
		}
		
		Color get_default_color() const {
			return ptr.godot_icall(bindings::id_Line2D_get_default_color);
		}
		
		void set_gradient(Gradient@ color) {
			ptr.godot_icall(bindings::id_Line2D_set_gradient, color);
		}
		
		Gradient@ get_gradient() const {
			Gradient ret = ptr.godot_icall(bindings::id_Line2D_get_gradient);
			return  ret;
		}
		
		void set_texture(Texture@ texture) {
			ptr.godot_icall(bindings::id_Line2D_set_texture, texture);
		}
		
		Texture@ get_texture() const {
			Texture ret = ptr.godot_icall(bindings::id_Line2D_get_texture);
			return  ret;
		}
		
		void set_texture_mode(int mode) {
			ptr.godot_icall(bindings::id_Line2D_set_texture_mode, mode);
		}
		
		int get_texture_mode() const {
			return ptr.godot_icall(bindings::id_Line2D_get_texture_mode);
		}
		
		void set_joint_mode(int mode) {
			ptr.godot_icall(bindings::id_Line2D_set_joint_mode, mode);
		}
		
		int get_joint_mode() const {
			return ptr.godot_icall(bindings::id_Line2D_get_joint_mode);
		}
		
		void set_begin_cap_mode(int mode) {
			ptr.godot_icall(bindings::id_Line2D_set_begin_cap_mode, mode);
		}
		
		int get_begin_cap_mode() const {
			return ptr.godot_icall(bindings::id_Line2D_get_begin_cap_mode);
		}
		
		void set_end_cap_mode(int mode) {
			ptr.godot_icall(bindings::id_Line2D_set_end_cap_mode, mode);
		}
		
		int get_end_cap_mode() const {
			return ptr.godot_icall(bindings::id_Line2D_get_end_cap_mode);
		}
		
		void set_sharp_limit(float limit) {
			ptr.godot_icall(bindings::id_Line2D_set_sharp_limit, limit);
		}
		
		float get_sharp_limit() const {
			return ptr.godot_icall(bindings::id_Line2D_get_sharp_limit);
		}
		
		void set_round_precision(int precision) {
			ptr.godot_icall(bindings::id_Line2D_set_round_precision, precision);
		}
		
		int get_round_precision() const {
			return ptr.godot_icall(bindings::id_Line2D_get_round_precision);
		}
		
		protected void _gradient_changed() {
			ptr.godot_icall(bindings::id_Line2D__gradient_changed);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Line2D);
		}
		
	}
	
	class PhysicsShapeQueryParameters : Reference {
		
		
		void set_shape(Resource@ shape) {
			ptr.godot_icall(bindings::id_PhysicsShapeQueryParameters_set_shape, shape);
		}
		
		void set_shape_rid(const RID &in shape) {
			ptr.godot_icall(bindings::id_PhysicsShapeQueryParameters_set_shape_rid, shape);
		}
		
		RID get_shape_rid() const {
			return ptr.godot_icall(bindings::id_PhysicsShapeQueryParameters_get_shape_rid);
		}
		
		void set_transform(const Transform &in transform) {
			ptr.godot_icall(bindings::id_PhysicsShapeQueryParameters_set_transform, transform);
		}
		
		Transform get_transform() const {
			return ptr.godot_icall(bindings::id_PhysicsShapeQueryParameters_get_transform);
		}
		
		void set_margin(float margin) {
			ptr.godot_icall(bindings::id_PhysicsShapeQueryParameters_set_margin, margin);
		}
		
		float get_margin() const {
			return ptr.godot_icall(bindings::id_PhysicsShapeQueryParameters_get_margin);
		}
		
		void set_collision_mask(int collision_mask) {
			ptr.godot_icall(bindings::id_PhysicsShapeQueryParameters_set_collision_mask, collision_mask);
		}
		
		int get_collision_mask() const {
			return ptr.godot_icall(bindings::id_PhysicsShapeQueryParameters_get_collision_mask);
		}
		
		void set_exclude(const Array &in exclude) {
			ptr.godot_icall(bindings::id_PhysicsShapeQueryParameters_set_exclude, exclude);
		}
		
		Array get_exclude() const {
			return ptr.godot_icall(bindings::id_PhysicsShapeQueryParameters_get_exclude);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_PhysicsShapeQueryParameters)).ptr();
		}
		
	}
	
	class AudioStream : Resource {
		
		
		float get_length() const {
			return ptr.godot_icall(bindings::id_AudioStream_get_length);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioStream)).ptr();
		}
		
	}
	
	class XMLParser : Reference {
		
		
		int read() {
			return ptr.godot_icall(bindings::id_XMLParser_read);
		}
		
		int get_node_type() {
			return ptr.godot_icall(bindings::id_XMLParser_get_node_type);
		}
		
		String get_node_name() const {
			return ptr.godot_icall(bindings::id_XMLParser_get_node_name);
		}
		
		String get_node_data() const {
			return ptr.godot_icall(bindings::id_XMLParser_get_node_data);
		}
		
		int get_node_offset() const {
			return ptr.godot_icall(bindings::id_XMLParser_get_node_offset);
		}
		
		int get_attribute_count() const {
			return ptr.godot_icall(bindings::id_XMLParser_get_attribute_count);
		}
		
		String get_attribute_name(int idx) const {
			return ptr.godot_icall(bindings::id_XMLParser_get_attribute_name, idx);
		}
		
		String get_attribute_value(int idx) const {
			return ptr.godot_icall(bindings::id_XMLParser_get_attribute_value, idx);
		}
		
		bool has_attribute(const String &in name) const {
			return ptr.godot_icall(bindings::id_XMLParser_has_attribute, name);
		}
		
		String get_named_attribute_value(const String &in name) const {
			return ptr.godot_icall(bindings::id_XMLParser_get_named_attribute_value, name);
		}
		
		String get_named_attribute_value_safe(const String &in name) const {
			return ptr.godot_icall(bindings::id_XMLParser_get_named_attribute_value_safe, name);
		}
		
		bool is_empty() const {
			return ptr.godot_icall(bindings::id_XMLParser_is_empty);
		}
		
		int get_current_line() const {
			return ptr.godot_icall(bindings::id_XMLParser_get_current_line);
		}
		
		void skip_section() {
			ptr.godot_icall(bindings::id_XMLParser_skip_section);
		}
		
		int seek(int position) {
			return ptr.godot_icall(bindings::id_XMLParser_seek, position);
		}
		
		int open(const String &in file) {
			return ptr.godot_icall(bindings::id_XMLParser_open, file);
		}
		
		int open_buffer(const PoolByteArray &in buffer) {
			return ptr.godot_icall(bindings::id_XMLParser_open_buffer, buffer);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_XMLParser)).ptr();
		}
		
	}
	
	class _ResourceLoader : Object {
		
		
		ResourceInteractiveLoader@ load_interactive(const String &in path, const String &in type_hint) {
			ResourceInteractiveLoader ret = ptr.godot_icall(bindings::id__ResourceLoader_load_interactive, path, type_hint);
			return  ret;
		}
		
		Resource@ load(const String &in path, const String &in type_hint, bool p_no_cache) {
			Resource ret = ptr.godot_icall(bindings::id__ResourceLoader_load, path, type_hint, p_no_cache);
			return  ret;
		}
		
		PoolStringArray get_recognized_extensions_for_type(const String &in type) {
			return ptr.godot_icall(bindings::id__ResourceLoader_get_recognized_extensions_for_type, type);
		}
		
		void set_abort_on_missing_resources(bool abort) {
			ptr.godot_icall(bindings::id__ResourceLoader_set_abort_on_missing_resources, abort);
		}
		
		PoolStringArray get_dependencies(const String &in path) {
			return ptr.godot_icall(bindings::id__ResourceLoader_get_dependencies, path);
		}
		
		bool has(const String &in path) {
			return ptr.godot_icall(bindings::id__ResourceLoader_has, path);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id__ResourceLoader);
		}
		
	}
	
	class MaxRectsBinPack : RectangleBinPack {
		
		
		void set_choice_method(int p_methid) {
			ptr.godot_icall(bindings::id_MaxRectsBinPack_set_choice_method, p_methid);
		}
		
		int get_choice_method() const {
			return ptr.godot_icall(bindings::id_MaxRectsBinPack_get_choice_method);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_MaxRectsBinPack)).ptr();
		}
		
	}
	
	class SceneTreeTimer : Reference {
		
		
		void set_time_left(float time) {
			ptr.godot_icall(bindings::id_SceneTreeTimer_set_time_left, time);
		}
		
		float get_time_left() const {
			return ptr.godot_icall(bindings::id_SceneTreeTimer_get_time_left);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_SceneTreeTimer)).ptr();
		}
		
	}
	
	class GradientTexture : Texture {
		
		
		void set_gradient(Gradient@ gradient) {
			ptr.godot_icall(bindings::id_GradientTexture_set_gradient, gradient);
		}
		
		Gradient@ get_gradient() const {
			Gradient ret = ptr.godot_icall(bindings::id_GradientTexture_get_gradient);
			return  ret;
		}
		
		void set_width(int width) {
			ptr.godot_icall(bindings::id_GradientTexture_set_width, width);
		}
		
		protected void _update() {
			ptr.godot_icall(bindings::id_GradientTexture__update);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_GradientTexture)).ptr();
		}
		
	}
	
	class Camera2D : Node2D {
		
		
		void set_offset(const Vector2 &in offset) {
			ptr.godot_icall(bindings::id_Camera2D_set_offset, offset);
		}
		
		Vector2 get_offset() const {
			return ptr.godot_icall(bindings::id_Camera2D_get_offset);
		}
		
		void set_anchor_mode(int anchor_mode) {
			ptr.godot_icall(bindings::id_Camera2D_set_anchor_mode, anchor_mode);
		}
		
		int get_anchor_mode() const {
			return ptr.godot_icall(bindings::id_Camera2D_get_anchor_mode);
		}
		
		void set_rotating(bool rotating) {
			ptr.godot_icall(bindings::id_Camera2D_set_rotating, rotating);
		}
		
		bool is_rotating() const {
			return ptr.godot_icall(bindings::id_Camera2D_is_rotating);
		}
		
		void make_current() {
			ptr.godot_icall(bindings::id_Camera2D_make_current);
		}
		
		void clear_current() {
			ptr.godot_icall(bindings::id_Camera2D_clear_current);
		}
		
		protected void _make_current(Object@ arg0) {
			ptr.godot_icall(bindings::id_Camera2D__make_current, arg0);
		}
		
		protected void _update_scroll() {
			ptr.godot_icall(bindings::id_Camera2D__update_scroll);
		}
		
		protected void _set_current(bool current) {
			ptr.godot_icall(bindings::id_Camera2D__set_current, current);
		}
		
		bool is_current() const {
			return ptr.godot_icall(bindings::id_Camera2D_is_current);
		}
		
		void set_limit(int margin, int limit) {
			ptr.godot_icall(bindings::id_Camera2D_set_limit, margin, limit);
		}
		
		int get_limit(int margin) const {
			return ptr.godot_icall(bindings::id_Camera2D_get_limit, margin);
		}
		
		void set_limit_smoothing_enabled(bool limit_smoothing_enabled) {
			ptr.godot_icall(bindings::id_Camera2D_set_limit_smoothing_enabled, limit_smoothing_enabled);
		}
		
		bool is_limit_smoothing_enabled() const {
			return ptr.godot_icall(bindings::id_Camera2D_is_limit_smoothing_enabled);
		}
		
		void set_v_drag_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_Camera2D_set_v_drag_enabled, enabled);
		}
		
		bool is_v_drag_enabled() const {
			return ptr.godot_icall(bindings::id_Camera2D_is_v_drag_enabled);
		}
		
		void set_h_drag_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_Camera2D_set_h_drag_enabled, enabled);
		}
		
		bool is_h_drag_enabled() const {
			return ptr.godot_icall(bindings::id_Camera2D_is_h_drag_enabled);
		}
		
		void set_v_offset(float ofs) {
			ptr.godot_icall(bindings::id_Camera2D_set_v_offset, ofs);
		}
		
		float get_v_offset() const {
			return ptr.godot_icall(bindings::id_Camera2D_get_v_offset);
		}
		
		void set_h_offset(float ofs) {
			ptr.godot_icall(bindings::id_Camera2D_set_h_offset, ofs);
		}
		
		float get_h_offset() const {
			return ptr.godot_icall(bindings::id_Camera2D_get_h_offset);
		}
		
		void set_drag_margin(int margin, float drag_margin) {
			ptr.godot_icall(bindings::id_Camera2D_set_drag_margin, margin, drag_margin);
		}
		
		float get_drag_margin(int margin) const {
			return ptr.godot_icall(bindings::id_Camera2D_get_drag_margin, margin);
		}
		
		Vector2 get_camera_position() const {
			return ptr.godot_icall(bindings::id_Camera2D_get_camera_position);
		}
		
		Vector2 get_camera_screen_center() const {
			return ptr.godot_icall(bindings::id_Camera2D_get_camera_screen_center);
		}
		
		void set_zoom(const Vector2 &in zoom) {
			ptr.godot_icall(bindings::id_Camera2D_set_zoom, zoom);
		}
		
		Vector2 get_zoom() const {
			return ptr.godot_icall(bindings::id_Camera2D_get_zoom);
		}
		
		void set_custom_viewport(Node@ viewport) {
			ptr.godot_icall(bindings::id_Camera2D_set_custom_viewport, viewport);
		}
		
		Node@ get_custom_viewport() const {
			Node ret = ptr.godot_icall(bindings::id_Camera2D_get_custom_viewport);
			return  ret;
		}
		
		void set_follow_smoothing(float follow_smoothing) {
			ptr.godot_icall(bindings::id_Camera2D_set_follow_smoothing, follow_smoothing);
		}
		
		float get_follow_smoothing() const {
			return ptr.godot_icall(bindings::id_Camera2D_get_follow_smoothing);
		}
		
		void set_enable_follow_smoothing(bool follow_smoothing) {
			ptr.godot_icall(bindings::id_Camera2D_set_enable_follow_smoothing, follow_smoothing);
		}
		
		bool is_follow_smoothing_enabled() const {
			return ptr.godot_icall(bindings::id_Camera2D_is_follow_smoothing_enabled);
		}
		
		void force_update_scroll() {
			ptr.godot_icall(bindings::id_Camera2D_force_update_scroll);
		}
		
		void reset_smoothing() {
			ptr.godot_icall(bindings::id_Camera2D_reset_smoothing);
		}
		
		void align() {
			ptr.godot_icall(bindings::id_Camera2D_align);
		}
		
		protected void _set_old_smoothing(float follow_smoothing) {
			ptr.godot_icall(bindings::id_Camera2D__set_old_smoothing, follow_smoothing);
		}
		
		void set_screen_drawing_enabled(bool screen_drawing_enabled) {
			ptr.godot_icall(bindings::id_Camera2D_set_screen_drawing_enabled, screen_drawing_enabled);
		}
		
		bool is_screen_drawing_enabled() const {
			return ptr.godot_icall(bindings::id_Camera2D_is_screen_drawing_enabled);
		}
		
		void set_limit_drawing_enabled(bool limit_drawing_enabled) {
			ptr.godot_icall(bindings::id_Camera2D_set_limit_drawing_enabled, limit_drawing_enabled);
		}
		
		bool is_limit_drawing_enabled() const {
			return ptr.godot_icall(bindings::id_Camera2D_is_limit_drawing_enabled);
		}
		
		void set_margin_drawing_enabled(bool margin_drawing_enabled) {
			ptr.godot_icall(bindings::id_Camera2D_set_margin_drawing_enabled, margin_drawing_enabled);
		}
		
		bool is_margin_drawing_enabled() const {
			return ptr.godot_icall(bindings::id_Camera2D_is_margin_drawing_enabled);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Camera2D);
		}
		
	}
	
	class StreamPeerTCP : StreamPeer {
		
		
		int connect_to_host(const String &in host, int port) {
			return ptr.godot_icall(bindings::id_StreamPeerTCP_connect_to_host, host, port);
		}
		
		bool is_connected_to_host() const {
			return ptr.godot_icall(bindings::id_StreamPeerTCP_is_connected_to_host);
		}
		
		int get_status() const {
			return ptr.godot_icall(bindings::id_StreamPeerTCP_get_status);
		}
		
		String get_connected_host() const {
			return ptr.godot_icall(bindings::id_StreamPeerTCP_get_connected_host);
		}
		
		int get_connected_port() const {
			return ptr.godot_icall(bindings::id_StreamPeerTCP_get_connected_port);
		}
		
		void disconnect_from_host() {
			ptr.godot_icall(bindings::id_StreamPeerTCP_disconnect_from_host);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_StreamPeerTCP)).ptr();
		}
		
	}
	
	class MainLoop : Object {
		
		
		protected void _input_event(InputEvent@ ev) {
			
		}
		
		protected void _input_text(const String &in text) {
			
		}
		
		protected void _initialize() {
			
		}
		
		protected void _iteration(float delta) {
			
		}
		
		protected void _idle(float delta) {
			
		}
		
		protected void _drop_files(const PoolStringArray &in files, int screen) {
			
		}
		
		protected void _finalize() {
			
		}
		
		void input_event(InputEvent@ ev) {
			ptr.godot_icall(bindings::id_MainLoop_input_event, ev);
		}
		
		void input_text(const String &in text) {
			ptr.godot_icall(bindings::id_MainLoop_input_text, text);
		}
		
		void init() {
			ptr.godot_icall(bindings::id_MainLoop_init);
		}
		
		bool iteration(float delta) {
			return ptr.godot_icall(bindings::id_MainLoop_iteration, delta);
		}
		
		bool idle(float delta) {
			return ptr.godot_icall(bindings::id_MainLoop_idle, delta);
		}
		
		void finish() {
			ptr.godot_icall(bindings::id_MainLoop_finish);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_MainLoop);
		}
		
	}
	
	class _File : Reference {
		
		
		int open_encrypted(const String &in path, int mode_flags, const PoolByteArray &in key) {
			return ptr.godot_icall(bindings::id__File_open_encrypted, path, mode_flags, key);
		}
		
		int open_encrypted_with_pass(const String &in path, int mode_flags, const String &in pass) {
			return ptr.godot_icall(bindings::id__File_open_encrypted_with_pass, path, mode_flags, pass);
		}
		
		int open_compressed(const String &in path, int mode_flags, int compression_mode) {
			return ptr.godot_icall(bindings::id__File_open_compressed, path, mode_flags, compression_mode);
		}
		
		int open(const String &in path, int flags) {
			return ptr.godot_icall(bindings::id__File_open, path, flags);
		}
		
		void close() {
			ptr.godot_icall(bindings::id__File_close);
		}
		
		bool is_open() const {
			return ptr.godot_icall(bindings::id__File_is_open);
		}
		
		void seek(int position) {
			ptr.godot_icall(bindings::id__File_seek, position);
		}
		
		void seek_end(int position) {
			ptr.godot_icall(bindings::id__File_seek_end, position);
		}
		
		int get_position() const {
			return ptr.godot_icall(bindings::id__File_get_position);
		}
		
		int get_len() const {
			return ptr.godot_icall(bindings::id__File_get_len);
		}
		
		bool eof_reached() const {
			return ptr.godot_icall(bindings::id__File_eof_reached);
		}
		
		int get_8() const {
			return ptr.godot_icall(bindings::id__File_get_8);
		}
		
		int get_16() const {
			return ptr.godot_icall(bindings::id__File_get_16);
		}
		
		int get_32() const {
			return ptr.godot_icall(bindings::id__File_get_32);
		}
		
		int get_64() const {
			return ptr.godot_icall(bindings::id__File_get_64);
		}
		
		float get_float() const {
			return ptr.godot_icall(bindings::id__File_get_float);
		}
		
		float get_double() const {
			return ptr.godot_icall(bindings::id__File_get_double);
		}
		
		float get_real() const {
			return ptr.godot_icall(bindings::id__File_get_real);
		}
		
		PoolByteArray get_buffer(int len) const {
			return ptr.godot_icall(bindings::id__File_get_buffer, len);
		}
		
		String get_line() const {
			return ptr.godot_icall(bindings::id__File_get_line);
		}
		
		String get_as_text() const {
			return ptr.godot_icall(bindings::id__File_get_as_text);
		}
		
		String get_md5(const String &in path) const {
			return ptr.godot_icall(bindings::id__File_get_md5, path);
		}
		
		String get_sha256(const String &in path) const {
			return ptr.godot_icall(bindings::id__File_get_sha256, path);
		}
		
		bool get_endian_swap() {
			return ptr.godot_icall(bindings::id__File_get_endian_swap);
		}
		
		void set_endian_swap(bool enable) {
			ptr.godot_icall(bindings::id__File_set_endian_swap, enable);
		}
		
		int get_error() const {
			return ptr.godot_icall(bindings::id__File_get_error);
		}
		
		Variant get_var() const {
			return ptr.godot_icall(bindings::id__File_get_var);
		}
		
		PoolStringArray get_csv_line(const String &in delim) const {
			return ptr.godot_icall(bindings::id__File_get_csv_line, delim);
		}
		
		void store_8(int value) {
			ptr.godot_icall(bindings::id__File_store_8, value);
		}
		
		void store_16(int value) {
			ptr.godot_icall(bindings::id__File_store_16, value);
		}
		
		void store_32(int value) {
			ptr.godot_icall(bindings::id__File_store_32, value);
		}
		
		void store_64(int value) {
			ptr.godot_icall(bindings::id__File_store_64, value);
		}
		
		void store_float(float value) {
			ptr.godot_icall(bindings::id__File_store_float, value);
		}
		
		void store_double(float value) {
			ptr.godot_icall(bindings::id__File_store_double, value);
		}
		
		void store_real(float value) {
			ptr.godot_icall(bindings::id__File_store_real, value);
		}
		
		void store_buffer(const PoolByteArray &in buffer) {
			ptr.godot_icall(bindings::id__File_store_buffer, buffer);
		}
		
		void store_line(const String &in line) {
			ptr.godot_icall(bindings::id__File_store_line, line);
		}
		
		void store_string(const String &in string) {
			ptr.godot_icall(bindings::id__File_store_string, string);
		}
		
		void store_var(const Variant &in value) {
			ptr.godot_icall(bindings::id__File_store_var, value);
		}
		
		void store_pascal_string(const String &in string) {
			ptr.godot_icall(bindings::id__File_store_pascal_string, string);
		}
		
		String get_pascal_string() {
			return ptr.godot_icall(bindings::id__File_get_pascal_string);
		}
		
		bool file_exists(const String &in path) const {
			return ptr.godot_icall(bindings::id__File_file_exists, path);
		}
		
		int get_modified_time(const String &in file) const {
			return ptr.godot_icall(bindings::id__File_get_modified_time, file);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id__File)).ptr();
		}
		
	}
	
	class TreeItem : Object {
		
		
		void set_cell_mode(int column, int mode) {
			ptr.godot_icall(bindings::id_TreeItem_set_cell_mode, column, mode);
		}
		
		int get_cell_mode(int column) const {
			return ptr.godot_icall(bindings::id_TreeItem_get_cell_mode, column);
		}
		
		void set_checked(int column, bool checked) {
			ptr.godot_icall(bindings::id_TreeItem_set_checked, column, checked);
		}
		
		bool is_checked(int column) const {
			return ptr.godot_icall(bindings::id_TreeItem_is_checked, column);
		}
		
		void set_text(int column, const String &in text) {
			ptr.godot_icall(bindings::id_TreeItem_set_text, column, text);
		}
		
		String get_text(int column) const {
			return ptr.godot_icall(bindings::id_TreeItem_get_text, column);
		}
		
		void set_icon(int column, Texture@ texture) {
			ptr.godot_icall(bindings::id_TreeItem_set_icon, column, texture);
		}
		
		Texture@ get_icon(int column) const {
			Texture ret = ptr.godot_icall(bindings::id_TreeItem_get_icon, column);
			return  ret;
		}
		
		void set_icon_region(int column, const Rect2 &in region) {
			ptr.godot_icall(bindings::id_TreeItem_set_icon_region, column, region);
		}
		
		Rect2 get_icon_region(int column) const {
			return ptr.godot_icall(bindings::id_TreeItem_get_icon_region, column);
		}
		
		void set_icon_max_width(int column, int width) {
			ptr.godot_icall(bindings::id_TreeItem_set_icon_max_width, column, width);
		}
		
		int get_icon_max_width(int column) const {
			return ptr.godot_icall(bindings::id_TreeItem_get_icon_max_width, column);
		}
		
		void set_range(int column, float value) {
			ptr.godot_icall(bindings::id_TreeItem_set_range, column, value);
		}
		
		float get_range(int column) const {
			return ptr.godot_icall(bindings::id_TreeItem_get_range, column);
		}
		
		void set_range_config(int column, float min, float max, float step, bool expr) {
			ptr.godot_icall(bindings::id_TreeItem_set_range_config, column, min, max, step, expr);
		}
		
		Dictionary get_range_config(int column) {
			return ptr.godot_icall(bindings::id_TreeItem_get_range_config, column);
		}
		
		void set_metadata(int column, const Variant &in meta) {
			ptr.godot_icall(bindings::id_TreeItem_set_metadata, column, meta);
		}
		
		Variant get_metadata(int column) const {
			return ptr.godot_icall(bindings::id_TreeItem_get_metadata, column);
		}
		
		void set_custom_draw(int column, Object@ object, const String &in callback) {
			ptr.godot_icall(bindings::id_TreeItem_set_custom_draw, column, object, callback);
		}
		
		void set_collapsed(bool enable) {
			ptr.godot_icall(bindings::id_TreeItem_set_collapsed, enable);
		}
		
		bool is_collapsed() {
			return ptr.godot_icall(bindings::id_TreeItem_is_collapsed);
		}
		
		void set_custom_minimum_height(int height) {
			ptr.godot_icall(bindings::id_TreeItem_set_custom_minimum_height, height);
		}
		
		int get_custom_minimum_height() const {
			return ptr.godot_icall(bindings::id_TreeItem_get_custom_minimum_height);
		}
		
		TreeItem@ get_next() {
			TreeItem ret = ptr.godot_icall(bindings::id_TreeItem_get_next);
			return  ret;
		}
		
		TreeItem@ get_prev() {
			TreeItem ret = ptr.godot_icall(bindings::id_TreeItem_get_prev);
			return  ret;
		}
		
		TreeItem@ get_parent() {
			TreeItem ret = ptr.godot_icall(bindings::id_TreeItem_get_parent);
			return  ret;
		}
		
		TreeItem@ get_children() {
			TreeItem ret = ptr.godot_icall(bindings::id_TreeItem_get_children);
			return  ret;
		}
		
		TreeItem@ get_next_visible() {
			TreeItem ret = ptr.godot_icall(bindings::id_TreeItem_get_next_visible);
			return  ret;
		}
		
		TreeItem@ get_prev_visible() {
			TreeItem ret = ptr.godot_icall(bindings::id_TreeItem_get_prev_visible);
			return  ret;
		}
		
		void remove_child(Object@ child) {
			ptr.godot_icall(bindings::id_TreeItem_remove_child, child);
		}
		
		void set_selectable(int column, bool selectable) {
			ptr.godot_icall(bindings::id_TreeItem_set_selectable, column, selectable);
		}
		
		bool is_selectable(int column) const {
			return ptr.godot_icall(bindings::id_TreeItem_is_selectable, column);
		}
		
		bool is_selected(int column) {
			return ptr.godot_icall(bindings::id_TreeItem_is_selected, column);
		}
		
		void select(int column) {
			ptr.godot_icall(bindings::id_TreeItem_select, column);
		}
		
		void deselect(int column) {
			ptr.godot_icall(bindings::id_TreeItem_deselect, column);
		}
		
		void set_editable(int column, bool enabled) {
			ptr.godot_icall(bindings::id_TreeItem_set_editable, column, enabled);
		}
		
		bool is_editable(int column) {
			return ptr.godot_icall(bindings::id_TreeItem_is_editable, column);
		}
		
		void set_custom_color(int column, const Color &in color) {
			ptr.godot_icall(bindings::id_TreeItem_set_custom_color, column, color);
		}
		
		void clear_custom_color(int column) {
			ptr.godot_icall(bindings::id_TreeItem_clear_custom_color, column);
		}
		
		void set_custom_bg_color(int column, const Color &in color, bool just_outline) {
			ptr.godot_icall(bindings::id_TreeItem_set_custom_bg_color, column, color, just_outline);
		}
		
		void clear_custom_bg_color(int column) {
			ptr.godot_icall(bindings::id_TreeItem_clear_custom_bg_color, column);
		}
		
		Color get_custom_bg_color(int column) const {
			return ptr.godot_icall(bindings::id_TreeItem_get_custom_bg_color, column);
		}
		
		void set_custom_as_button(int column, bool enable) {
			ptr.godot_icall(bindings::id_TreeItem_set_custom_as_button, column, enable);
		}
		
		bool is_custom_set_as_button(int column) const {
			return ptr.godot_icall(bindings::id_TreeItem_is_custom_set_as_button, column);
		}
		
		void add_button(int column, Texture@ button, int button_idx, bool disabled, const String &in tooltip) {
			ptr.godot_icall(bindings::id_TreeItem_add_button, column, button, button_idx, disabled, tooltip);
		}
		
		int get_button_count(int column) const {
			return ptr.godot_icall(bindings::id_TreeItem_get_button_count, column);
		}
		
		Texture@ get_button(int column, int button_idx) const {
			Texture ret = ptr.godot_icall(bindings::id_TreeItem_get_button, column, button_idx);
			return  ret;
		}
		
		void set_button(int column, int button_idx, Texture@ button) {
			ptr.godot_icall(bindings::id_TreeItem_set_button, column, button_idx, button);
		}
		
		void erase_button(int column, int button_idx) {
			ptr.godot_icall(bindings::id_TreeItem_erase_button, column, button_idx);
		}
		
		bool is_button_disabled(int column, int button_idx) const {
			return ptr.godot_icall(bindings::id_TreeItem_is_button_disabled, column, button_idx);
		}
		
		void set_expand_right(int column, bool enable) {
			ptr.godot_icall(bindings::id_TreeItem_set_expand_right, column, enable);
		}
		
		bool get_expand_right(int column) const {
			return ptr.godot_icall(bindings::id_TreeItem_get_expand_right, column);
		}
		
		void set_tooltip(int column, const String &in tooltip) {
			ptr.godot_icall(bindings::id_TreeItem_set_tooltip, column, tooltip);
		}
		
		String get_tooltip(int column) const {
			return ptr.godot_icall(bindings::id_TreeItem_get_tooltip, column);
		}
		
		void set_text_align(int column, int text_align) {
			ptr.godot_icall(bindings::id_TreeItem_set_text_align, column, text_align);
		}
		
		int get_text_align(int column) const {
			return ptr.godot_icall(bindings::id_TreeItem_get_text_align, column);
		}
		
		void move_to_top() {
			ptr.godot_icall(bindings::id_TreeItem_move_to_top);
		}
		
		void move_to_bottom() {
			ptr.godot_icall(bindings::id_TreeItem_move_to_bottom);
		}
		
		void set_disable_folding(bool disable) {
			ptr.godot_icall(bindings::id_TreeItem_set_disable_folding, disable);
		}
		
		bool is_folding_disabled() const {
			return ptr.godot_icall(bindings::id_TreeItem_is_folding_disabled);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_TreeItem);
		}
		
	}
	
	class ARVRController : Spatial {
		
		
		void set_controller_id(int controller_id) {
			ptr.godot_icall(bindings::id_ARVRController_set_controller_id, controller_id);
		}
		
		int get_controller_id() const {
			return ptr.godot_icall(bindings::id_ARVRController_get_controller_id);
		}
		
		String get_controller_name() const {
			return ptr.godot_icall(bindings::id_ARVRController_get_controller_name);
		}
		
		int get_joystick_id() const {
			return ptr.godot_icall(bindings::id_ARVRController_get_joystick_id);
		}
		
		int is_button_pressed(int button) const {
			return ptr.godot_icall(bindings::id_ARVRController_is_button_pressed, button);
		}
		
		float get_joystick_axis(int axis) const {
			return ptr.godot_icall(bindings::id_ARVRController_get_joystick_axis, axis);
		}
		
		bool get_is_active() const {
			return ptr.godot_icall(bindings::id_ARVRController_get_is_active);
		}
		
		int get_hand() const {
			return ptr.godot_icall(bindings::id_ARVRController_get_hand);
		}
		
		float get_rumble() const {
			return ptr.godot_icall(bindings::id_ARVRController_get_rumble);
		}
		
		void set_rumble(float rumble) {
			ptr.godot_icall(bindings::id_ARVRController_set_rumble, rumble);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ARVRController);
		}
		
	}
	
	class GDScript : Script {
		
		
		Variant new() {
			return ptr.godot_icall(bindings::id_GDScript_new);
		}
		
		PoolByteArray get_as_byte_code() const {
			return ptr.godot_icall(bindings::id_GDScript_get_as_byte_code);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_GDScript)).ptr();
		}
		
	}
	
	class Animation : Resource {
		
		
		int add_track(int type, int at_position) {
			return ptr.godot_icall(bindings::id_Animation_add_track, type, at_position);
		}
		
		void remove_track(int idx) {
			ptr.godot_icall(bindings::id_Animation_remove_track, idx);
		}
		
		int get_track_count() const {
			return ptr.godot_icall(bindings::id_Animation_get_track_count);
		}
		
		int track_get_type(int idx) const {
			return ptr.godot_icall(bindings::id_Animation_track_get_type, idx);
		}
		
		NodePath track_get_path(int idx) const {
			return ptr.godot_icall(bindings::id_Animation_track_get_path, idx);
		}
		
		void track_set_path(int idx, const NodePath &in path) {
			ptr.godot_icall(bindings::id_Animation_track_set_path, idx, path);
		}
		
		int find_track(const NodePath &in path) const {
			return ptr.godot_icall(bindings::id_Animation_find_track, path);
		}
		
		void track_move_up(int idx) {
			ptr.godot_icall(bindings::id_Animation_track_move_up, idx);
		}
		
		void track_move_down(int idx) {
			ptr.godot_icall(bindings::id_Animation_track_move_down, idx);
		}
		
		void track_set_imported(int idx, bool imported) {
			ptr.godot_icall(bindings::id_Animation_track_set_imported, idx, imported);
		}
		
		bool track_is_imported(int idx) const {
			return ptr.godot_icall(bindings::id_Animation_track_is_imported, idx);
		}
		
		void track_set_enabled(int idx, bool enabled) {
			ptr.godot_icall(bindings::id_Animation_track_set_enabled, idx, enabled);
		}
		
		bool track_is_enabled(int idx) const {
			return ptr.godot_icall(bindings::id_Animation_track_is_enabled, idx);
		}
		
		int transform_track_insert_key(int idx, float time, const Vector3 &in location, const Quat &in rotation, const Vector3 &in scale) {
			return ptr.godot_icall(bindings::id_Animation_transform_track_insert_key, idx, time, location, rotation, scale);
		}
		
		void track_insert_key(int idx, float time, const Variant &in key, float transition) {
			ptr.godot_icall(bindings::id_Animation_track_insert_key, idx, time, key, transition);
		}
		
		void track_remove_key(int idx, int key_idx) {
			ptr.godot_icall(bindings::id_Animation_track_remove_key, idx, key_idx);
		}
		
		void track_remove_key_at_position(int idx, float position) {
			ptr.godot_icall(bindings::id_Animation_track_remove_key_at_position, idx, position);
		}
		
		void track_set_key_value(int idx, int key, const Variant &in value) {
			ptr.godot_icall(bindings::id_Animation_track_set_key_value, idx, key, value);
		}
		
		void track_set_key_transition(int idx, int key_idx, float transition) {
			ptr.godot_icall(bindings::id_Animation_track_set_key_transition, idx, key_idx, transition);
		}
		
		float track_get_key_transition(int idx, int key_idx) const {
			return ptr.godot_icall(bindings::id_Animation_track_get_key_transition, idx, key_idx);
		}
		
		int track_get_key_count(int idx) const {
			return ptr.godot_icall(bindings::id_Animation_track_get_key_count, idx);
		}
		
		Variant track_get_key_value(int idx, int key_idx) const {
			return ptr.godot_icall(bindings::id_Animation_track_get_key_value, idx, key_idx);
		}
		
		float track_get_key_time(int idx, int key_idx) const {
			return ptr.godot_icall(bindings::id_Animation_track_get_key_time, idx, key_idx);
		}
		
		int track_find_key(int idx, float time, bool exact) const {
			return ptr.godot_icall(bindings::id_Animation_track_find_key, idx, time, exact);
		}
		
		void track_set_interpolation_type(int idx, int interpolation) {
			ptr.godot_icall(bindings::id_Animation_track_set_interpolation_type, idx, interpolation);
		}
		
		int track_get_interpolation_type(int idx) const {
			return ptr.godot_icall(bindings::id_Animation_track_get_interpolation_type, idx);
		}
		
		void track_set_interpolation_loop_wrap(int idx, bool interpolation) {
			ptr.godot_icall(bindings::id_Animation_track_set_interpolation_loop_wrap, idx, interpolation);
		}
		
		bool track_get_interpolation_loop_wrap(int idx) const {
			return ptr.godot_icall(bindings::id_Animation_track_get_interpolation_loop_wrap, idx);
		}
		
		Array transform_track_interpolate(int idx, float time_sec) const {
			return ptr.godot_icall(bindings::id_Animation_transform_track_interpolate, idx, time_sec);
		}
		
		void value_track_set_update_mode(int idx, int mode) {
			ptr.godot_icall(bindings::id_Animation_value_track_set_update_mode, idx, mode);
		}
		
		int value_track_get_update_mode(int idx) const {
			return ptr.godot_icall(bindings::id_Animation_value_track_get_update_mode, idx);
		}
		
		PoolIntArray value_track_get_key_indices(int idx, float time_sec, float delta) const {
			return ptr.godot_icall(bindings::id_Animation_value_track_get_key_indices, idx, time_sec, delta);
		}
		
		PoolIntArray method_track_get_key_indices(int idx, float time_sec, float delta) const {
			return ptr.godot_icall(bindings::id_Animation_method_track_get_key_indices, idx, time_sec, delta);
		}
		
		String method_track_get_name(int idx, int key_idx) const {
			return ptr.godot_icall(bindings::id_Animation_method_track_get_name, idx, key_idx);
		}
		
		Array method_track_get_params(int idx, int key_idx) const {
			return ptr.godot_icall(bindings::id_Animation_method_track_get_params, idx, key_idx);
		}
		
		void set_length(float time_sec) {
			ptr.godot_icall(bindings::id_Animation_set_length, time_sec);
		}
		
		float get_length() const {
			return ptr.godot_icall(bindings::id_Animation_get_length);
		}
		
		void set_loop(bool enabled) {
			ptr.godot_icall(bindings::id_Animation_set_loop, enabled);
		}
		
		bool has_loop() const {
			return ptr.godot_icall(bindings::id_Animation_has_loop);
		}
		
		void set_step(float size_sec) {
			ptr.godot_icall(bindings::id_Animation_set_step, size_sec);
		}
		
		float get_step() const {
			return ptr.godot_icall(bindings::id_Animation_get_step);
		}
		
		void clear() {
			ptr.godot_icall(bindings::id_Animation_clear);
		}
		
		void copy_track(int track, Animation@ to_animation) {
			ptr.godot_icall(bindings::id_Animation_copy_track, track, to_animation);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Animation)).ptr();
		}
		
	}
	
	class Label : Control {
		
		
		void set_align(int align) {
			ptr.godot_icall(bindings::id_Label_set_align, align);
		}
		
		int get_align() const {
			return ptr.godot_icall(bindings::id_Label_get_align);
		}
		
		void set_valign(int valign) {
			ptr.godot_icall(bindings::id_Label_set_valign, valign);
		}
		
		int get_valign() const {
			return ptr.godot_icall(bindings::id_Label_get_valign);
		}
		
		void set_text(const String &in text) {
			ptr.godot_icall(bindings::id_Label_set_text, text);
		}
		
		String get_text() const {
			return ptr.godot_icall(bindings::id_Label_get_text);
		}
		
		void set_autowrap(bool enable) {
			ptr.godot_icall(bindings::id_Label_set_autowrap, enable);
		}
		
		bool has_autowrap() const {
			return ptr.godot_icall(bindings::id_Label_has_autowrap);
		}
		
		void set_clip_text(bool enable) {
			ptr.godot_icall(bindings::id_Label_set_clip_text, enable);
		}
		
		bool is_clipping_text() const {
			return ptr.godot_icall(bindings::id_Label_is_clipping_text);
		}
		
		void set_uppercase(bool enable) {
			ptr.godot_icall(bindings::id_Label_set_uppercase, enable);
		}
		
		bool is_uppercase() const {
			return ptr.godot_icall(bindings::id_Label_is_uppercase);
		}
		
		int get_line_height() const {
			return ptr.godot_icall(bindings::id_Label_get_line_height);
		}
		
		int get_line_count() const {
			return ptr.godot_icall(bindings::id_Label_get_line_count);
		}
		
		int get_visible_line_count() const {
			return ptr.godot_icall(bindings::id_Label_get_visible_line_count);
		}
		
		int get_total_character_count() const {
			return ptr.godot_icall(bindings::id_Label_get_total_character_count);
		}
		
		void set_visible_characters(int amount) {
			ptr.godot_icall(bindings::id_Label_set_visible_characters, amount);
		}
		
		int get_visible_characters() const {
			return ptr.godot_icall(bindings::id_Label_get_visible_characters);
		}
		
		void set_percent_visible(float percent_visible) {
			ptr.godot_icall(bindings::id_Label_set_percent_visible, percent_visible);
		}
		
		float get_percent_visible() const {
			return ptr.godot_icall(bindings::id_Label_get_percent_visible);
		}
		
		void set_lines_skipped(int lines_skipped) {
			ptr.godot_icall(bindings::id_Label_set_lines_skipped, lines_skipped);
		}
		
		int get_lines_skipped() const {
			return ptr.godot_icall(bindings::id_Label_get_lines_skipped);
		}
		
		void set_max_lines_visible(int lines_visible) {
			ptr.godot_icall(bindings::id_Label_set_max_lines_visible, lines_visible);
		}
		
		int get_max_lines_visible() const {
			return ptr.godot_icall(bindings::id_Label_get_max_lines_visible);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Label);
		}
		
	}
	
	class Viewport : Node {
		
		
		void set_use_arvr(bool use) {
			ptr.godot_icall(bindings::id_Viewport_set_use_arvr, use);
		}
		
		bool use_arvr() {
			return ptr.godot_icall(bindings::id_Viewport_use_arvr);
		}
		
		void set_size(const Vector2 &in size) {
			ptr.godot_icall(bindings::id_Viewport_set_size, size);
		}
		
		Vector2 get_size() const {
			return ptr.godot_icall(bindings::id_Viewport_get_size);
		}
		
		void set_world_2d(World2D@ world_2d) {
			ptr.godot_icall(bindings::id_Viewport_set_world_2d, world_2d);
		}
		
		World2D@ get_world_2d() const {
			World2D ret = ptr.godot_icall(bindings::id_Viewport_get_world_2d);
			return  ret;
		}
		
		World2D@ find_world_2d() const {
			World2D ret = ptr.godot_icall(bindings::id_Viewport_find_world_2d);
			return  ret;
		}
		
		void set_world(World@ world) {
			ptr.godot_icall(bindings::id_Viewport_set_world, world);
		}
		
		World@ get_world() const {
			World ret = ptr.godot_icall(bindings::id_Viewport_get_world);
			return  ret;
		}
		
		World@ find_world() const {
			World ret = ptr.godot_icall(bindings::id_Viewport_find_world);
			return  ret;
		}
		
		void set_canvas_transform(const Transform2D &in xform) {
			ptr.godot_icall(bindings::id_Viewport_set_canvas_transform, xform);
		}
		
		Transform2D get_canvas_transform() const {
			return ptr.godot_icall(bindings::id_Viewport_get_canvas_transform);
		}
		
		void set_global_canvas_transform(const Transform2D &in xform) {
			ptr.godot_icall(bindings::id_Viewport_set_global_canvas_transform, xform);
		}
		
		Transform2D get_global_canvas_transform() const {
			return ptr.godot_icall(bindings::id_Viewport_get_global_canvas_transform);
		}
		
		Transform2D get_final_transform() const {
			return ptr.godot_icall(bindings::id_Viewport_get_final_transform);
		}
		
		Rect2 get_visible_rect() const {
			return ptr.godot_icall(bindings::id_Viewport_get_visible_rect);
		}
		
		void set_transparent_background(bool enable) {
			ptr.godot_icall(bindings::id_Viewport_set_transparent_background, enable);
		}
		
		bool has_transparent_background() const {
			return ptr.godot_icall(bindings::id_Viewport_has_transparent_background);
		}
		
		protected void _vp_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_Viewport__vp_input, arg0);
		}
		
		protected void _vp_input_text(const String &in text) {
			ptr.godot_icall(bindings::id_Viewport__vp_input_text, text);
		}
		
		protected void _vp_unhandled_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_Viewport__vp_unhandled_input, arg0);
		}
		
		void set_size_override(bool enable, const Vector2 &in size, const Vector2 &in margin) {
			ptr.godot_icall(bindings::id_Viewport_set_size_override, enable, size, margin);
		}
		
		Vector2 get_size_override() const {
			return ptr.godot_icall(bindings::id_Viewport_get_size_override);
		}
		
		bool is_size_override_enabled() const {
			return ptr.godot_icall(bindings::id_Viewport_is_size_override_enabled);
		}
		
		void set_size_override_stretch(bool enabled) {
			ptr.godot_icall(bindings::id_Viewport_set_size_override_stretch, enabled);
		}
		
		bool is_size_override_stretch_enabled() const {
			return ptr.godot_icall(bindings::id_Viewport_is_size_override_stretch_enabled);
		}
		
		void set_vflip(bool enable) {
			ptr.godot_icall(bindings::id_Viewport_set_vflip, enable);
		}
		
		bool get_vflip() const {
			return ptr.godot_icall(bindings::id_Viewport_get_vflip);
		}
		
		void set_clear_mode(int mode) {
			ptr.godot_icall(bindings::id_Viewport_set_clear_mode, mode);
		}
		
		int get_clear_mode() const {
			return ptr.godot_icall(bindings::id_Viewport_get_clear_mode);
		}
		
		void set_update_mode(int mode) {
			ptr.godot_icall(bindings::id_Viewport_set_update_mode, mode);
		}
		
		int get_update_mode() const {
			return ptr.godot_icall(bindings::id_Viewport_get_update_mode);
		}
		
		void set_msaa(int msaa) {
			ptr.godot_icall(bindings::id_Viewport_set_msaa, msaa);
		}
		
		int get_msaa() const {
			return ptr.godot_icall(bindings::id_Viewport_get_msaa);
		}
		
		void set_hdr(bool enable) {
			ptr.godot_icall(bindings::id_Viewport_set_hdr, enable);
		}
		
		bool get_hdr() const {
			return ptr.godot_icall(bindings::id_Viewport_get_hdr);
		}
		
		void set_usage(int usage) {
			ptr.godot_icall(bindings::id_Viewport_set_usage, usage);
		}
		
		int get_usage() const {
			return ptr.godot_icall(bindings::id_Viewport_get_usage);
		}
		
		void set_debug_draw(int debug_draw) {
			ptr.godot_icall(bindings::id_Viewport_set_debug_draw, debug_draw);
		}
		
		int get_debug_draw() const {
			return ptr.godot_icall(bindings::id_Viewport_get_debug_draw);
		}
		
		int get_render_info(int info) {
			return ptr.godot_icall(bindings::id_Viewport_get_render_info, info);
		}
		
		ViewportTexture@ get_texture() const {
			ViewportTexture ret = ptr.godot_icall(bindings::id_Viewport_get_texture);
			return  ret;
		}
		
		void set_physics_object_picking(bool enable) {
			ptr.godot_icall(bindings::id_Viewport_set_physics_object_picking, enable);
		}
		
		bool get_physics_object_picking() {
			return ptr.godot_icall(bindings::id_Viewport_get_physics_object_picking);
		}
		
		RID get_viewport_rid() const {
			return ptr.godot_icall(bindings::id_Viewport_get_viewport_rid);
		}
		
		void input(InputEvent@ local_event) {
			ptr.godot_icall(bindings::id_Viewport_input, local_event);
		}
		
		void unhandled_input(InputEvent@ local_event) {
			ptr.godot_icall(bindings::id_Viewport_unhandled_input, local_event);
		}
		
		void update_worlds() {
			ptr.godot_icall(bindings::id_Viewport_update_worlds);
		}
		
		void set_use_own_world(bool enable) {
			ptr.godot_icall(bindings::id_Viewport_set_use_own_world, enable);
		}
		
		bool is_using_own_world() const {
			return ptr.godot_icall(bindings::id_Viewport_is_using_own_world);
		}
		
		Camera@ get_camera() const {
			Camera ret = ptr.godot_icall(bindings::id_Viewport_get_camera);
			return  ret;
		}
		
		void set_as_audio_listener(bool enable) {
			ptr.godot_icall(bindings::id_Viewport_set_as_audio_listener, enable);
		}
		
		bool is_audio_listener() const {
			return ptr.godot_icall(bindings::id_Viewport_is_audio_listener);
		}
		
		void set_as_audio_listener_2d(bool enable) {
			ptr.godot_icall(bindings::id_Viewport_set_as_audio_listener_2d, enable);
		}
		
		bool is_audio_listener_2d() const {
			return ptr.godot_icall(bindings::id_Viewport_is_audio_listener_2d);
		}
		
		void set_attach_to_screen_rect(const Rect2 &in rect) {
			ptr.godot_icall(bindings::id_Viewport_set_attach_to_screen_rect, rect);
		}
		
		Vector2 get_mouse_position() const {
			return ptr.godot_icall(bindings::id_Viewport_get_mouse_position);
		}
		
		void warp_mouse(const Vector2 &in to_position) {
			ptr.godot_icall(bindings::id_Viewport_warp_mouse, to_position);
		}
		
		bool gui_has_modal_stack() const {
			return ptr.godot_icall(bindings::id_Viewport_gui_has_modal_stack);
		}
		
		Variant gui_get_drag_data() const {
			return ptr.godot_icall(bindings::id_Viewport_gui_get_drag_data);
		}
		
		void set_disable_input(bool disable) {
			ptr.godot_icall(bindings::id_Viewport_set_disable_input, disable);
		}
		
		bool is_input_disabled() const {
			return ptr.godot_icall(bindings::id_Viewport_is_input_disabled);
		}
		
		void set_disable_3d(bool disable) {
			ptr.godot_icall(bindings::id_Viewport_set_disable_3d, disable);
		}
		
		bool is_3d_disabled() const {
			return ptr.godot_icall(bindings::id_Viewport_is_3d_disabled);
		}
		
		protected void _gui_show_tooltip() {
			ptr.godot_icall(bindings::id_Viewport__gui_show_tooltip);
		}
		
		protected void _gui_remove_focus() {
			ptr.godot_icall(bindings::id_Viewport__gui_remove_focus);
		}
		
		void set_shadow_atlas_size(int size) {
			ptr.godot_icall(bindings::id_Viewport_set_shadow_atlas_size, size);
		}
		
		int get_shadow_atlas_size() const {
			return ptr.godot_icall(bindings::id_Viewport_get_shadow_atlas_size);
		}
		
		void set_snap_controls_to_pixels(bool enabled) {
			ptr.godot_icall(bindings::id_Viewport_set_snap_controls_to_pixels, enabled);
		}
		
		bool is_snap_controls_to_pixels_enabled() const {
			return ptr.godot_icall(bindings::id_Viewport_is_snap_controls_to_pixels_enabled);
		}
		
		void set_shadow_atlas_quadrant_subdiv(int quadrant, int subdiv) {
			ptr.godot_icall(bindings::id_Viewport_set_shadow_atlas_quadrant_subdiv, quadrant, subdiv);
		}
		
		int get_shadow_atlas_quadrant_subdiv(int quadrant) const {
			return ptr.godot_icall(bindings::id_Viewport_get_shadow_atlas_quadrant_subdiv, quadrant);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Viewport);
		}
		
	}
	
	class UndoRedo : Object {
		
		
		void create_action(const String &in name, int merge_mode) {
			ptr.godot_icall(bindings::id_UndoRedo_create_action, name, merge_mode);
		}
		
		void commit_action() {
			ptr.godot_icall(bindings::id_UndoRedo_commit_action);
		}
		
		Variant add_do_method(Object@ object, const String &in method) {
			return ptr.godot_icall(bindings::id_UndoRedo_add_do_method, object, method);
		}
		
		Variant add_undo_method(Object@ object, const String &in method) {
			return ptr.godot_icall(bindings::id_UndoRedo_add_undo_method, object, method);
		}
		
		void add_do_property(Object@ object, const String &in property, const Variant &in value) {
			ptr.godot_icall(bindings::id_UndoRedo_add_do_property, object, property, value);
		}
		
		void add_undo_property(Object@ object, const String &in property, const Variant &in value) {
			ptr.godot_icall(bindings::id_UndoRedo_add_undo_property, object, property, value);
		}
		
		void add_do_reference(Object@ object) {
			ptr.godot_icall(bindings::id_UndoRedo_add_do_reference, object);
		}
		
		void add_undo_reference(Object@ object) {
			ptr.godot_icall(bindings::id_UndoRedo_add_undo_reference, object);
		}
		
		void clear_history() {
			ptr.godot_icall(bindings::id_UndoRedo_clear_history);
		}
		
		String get_current_action_name() const {
			return ptr.godot_icall(bindings::id_UndoRedo_get_current_action_name);
		}
		
		int get_version() const {
			return ptr.godot_icall(bindings::id_UndoRedo_get_version);
		}
		
		void redo() {
			ptr.godot_icall(bindings::id_UndoRedo_redo);
		}
		
		void undo() {
			ptr.godot_icall(bindings::id_UndoRedo_undo);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_UndoRedo);
		}
		
	}
	
	class EditorFileSystemDirectory : Object {
		
		
		int get_subdir_count() const {
			return ptr.godot_icall(bindings::id_EditorFileSystemDirectory_get_subdir_count);
		}
		
		EditorFileSystemDirectory@ get_subdir(int idx) {
			EditorFileSystemDirectory ret = ptr.godot_icall(bindings::id_EditorFileSystemDirectory_get_subdir, idx);
			return  ret;
		}
		
		int get_file_count() const {
			return ptr.godot_icall(bindings::id_EditorFileSystemDirectory_get_file_count);
		}
		
		String get_file(int idx) const {
			return ptr.godot_icall(bindings::id_EditorFileSystemDirectory_get_file, idx);
		}
		
		String get_file_path(int idx) const {
			return ptr.godot_icall(bindings::id_EditorFileSystemDirectory_get_file_path, idx);
		}
		
		String get_file_type(int idx) const {
			return ptr.godot_icall(bindings::id_EditorFileSystemDirectory_get_file_type, idx);
		}
		
		bool get_file_import_is_valid(int idx) const {
			return ptr.godot_icall(bindings::id_EditorFileSystemDirectory_get_file_import_is_valid, idx);
		}
		
		String get_name() {
			return ptr.godot_icall(bindings::id_EditorFileSystemDirectory_get_name);
		}
		
		String get_path() const {
			return ptr.godot_icall(bindings::id_EditorFileSystemDirectory_get_path);
		}
		
		EditorFileSystemDirectory@ get_parent() {
			EditorFileSystemDirectory ret = ptr.godot_icall(bindings::id_EditorFileSystemDirectory_get_parent);
			return  ret;
		}
		
		int find_file_index(const String &in name) const {
			return ptr.godot_icall(bindings::id_EditorFileSystemDirectory_find_file_index, name);
		}
		
		int find_dir_index(const String &in name) const {
			return ptr.godot_icall(bindings::id_EditorFileSystemDirectory_find_dir_index, name);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_EditorFileSystemDirectory);
		}
		
	}
	
	class PinJoint2D : Joint2D {
		
		
		void set_softness(float softness) {
			ptr.godot_icall(bindings::id_PinJoint2D_set_softness, softness);
		}
		
		float get_softness() const {
			return ptr.godot_icall(bindings::id_PinJoint2D_get_softness);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_PinJoint2D);
		}
		
	}
	
	class YSort : Node2D {
		
		
		void set_sort_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_YSort_set_sort_enabled, enabled);
		}
		
		bool is_sort_enabled() const {
			return ptr.godot_icall(bindings::id_YSort_is_sort_enabled);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_YSort);
		}
		
	}
	
	class Control : CanvasItem {
		
		
		protected void _gui_input(InputEvent@ event) {
			
		}
		
		protected Vector2 _get_minimum_size() {
			return Vector2();
		}
		
		Variant get_drag_data(const Vector2 &in position) {
			return Variant();
		}
		
		bool can_drop_data(const Vector2 &in position, const Variant &in data) {
			return false;
		}
		
		void drop_data(const Vector2 &in position, const Variant &in data) {
			
		}
		
		bool has_point(const Vector2 &in point) {
			return false;
		}
		
		protected void _size_changed() {
			ptr.godot_icall(bindings::id_Control__size_changed);
		}
		
		protected void _update_minimum_size() {
			ptr.godot_icall(bindings::id_Control__update_minimum_size);
		}
		
		void accept_event() {
			ptr.godot_icall(bindings::id_Control_accept_event);
		}
		
		Vector2 get_minimum_size() const {
			return ptr.godot_icall(bindings::id_Control_get_minimum_size);
		}
		
		Vector2 get_combined_minimum_size() const {
			return ptr.godot_icall(bindings::id_Control_get_combined_minimum_size);
		}
		
		void set_anchors_preset(int preset, bool keep_margin) {
			ptr.godot_icall(bindings::id_Control_set_anchors_preset, preset, keep_margin);
		}
		
		void set_margins_preset(int preset, int resize_mode, int margin) {
			ptr.godot_icall(bindings::id_Control_set_margins_preset, preset, resize_mode, margin);
		}
		
		void set_anchors_and_margins_preset(int preset, int resize_mode, int margin) {
			ptr.godot_icall(bindings::id_Control_set_anchors_and_margins_preset, preset, resize_mode, margin);
		}
		
		void set_anchor(int margin, float anchor, bool keep_margin, bool push_opposite_anchor) {
			ptr.godot_icall(bindings::id_Control_set_anchor, margin, anchor, keep_margin, push_opposite_anchor);
		}
		
		protected void _set_anchor(int margin, float anchor) {
			ptr.godot_icall(bindings::id_Control__set_anchor, margin, anchor);
		}
		
		float get_anchor(int margin) const {
			return ptr.godot_icall(bindings::id_Control_get_anchor, margin);
		}
		
		void set_margin(int margin, float offset) {
			ptr.godot_icall(bindings::id_Control_set_margin, margin, offset);
		}
		
		void set_anchor_and_margin(int margin, float anchor, float offset, bool push_opposite_anchor) {
			ptr.godot_icall(bindings::id_Control_set_anchor_and_margin, margin, anchor, offset, push_opposite_anchor);
		}
		
		void set_begin(const Vector2 &in position) {
			ptr.godot_icall(bindings::id_Control_set_begin, position);
		}
		
		void set_end(const Vector2 &in position) {
			ptr.godot_icall(bindings::id_Control_set_end, position);
		}
		
		void set_position(const Vector2 &in position) {
			ptr.godot_icall(bindings::id_Control_set_position, position);
		}
		
		void set_size(const Vector2 &in size) {
			ptr.godot_icall(bindings::id_Control_set_size, size);
		}
		
		void set_custom_minimum_size(const Vector2 &in size) {
			ptr.godot_icall(bindings::id_Control_set_custom_minimum_size, size);
		}
		
		void set_global_position(const Vector2 &in position) {
			ptr.godot_icall(bindings::id_Control_set_global_position, position);
		}
		
		void set_rotation(float radians) {
			ptr.godot_icall(bindings::id_Control_set_rotation, radians);
		}
		
		void set_rotation_degrees(float degrees) {
			ptr.godot_icall(bindings::id_Control_set_rotation_degrees, degrees);
		}
		
		void set_scale(const Vector2 &in scale) {
			ptr.godot_icall(bindings::id_Control_set_scale, scale);
		}
		
		void set_pivot_offset(const Vector2 &in pivot_offset) {
			ptr.godot_icall(bindings::id_Control_set_pivot_offset, pivot_offset);
		}
		
		float get_margin(int margin) const {
			return ptr.godot_icall(bindings::id_Control_get_margin, margin);
		}
		
		Vector2 get_begin() const {
			return ptr.godot_icall(bindings::id_Control_get_begin);
		}
		
		Vector2 get_end() const {
			return ptr.godot_icall(bindings::id_Control_get_end);
		}
		
		Vector2 get_position() const {
			return ptr.godot_icall(bindings::id_Control_get_position);
		}
		
		Vector2 get_size() const {
			return ptr.godot_icall(bindings::id_Control_get_size);
		}
		
		float get_rotation() const {
			return ptr.godot_icall(bindings::id_Control_get_rotation);
		}
		
		float get_rotation_degrees() const {
			return ptr.godot_icall(bindings::id_Control_get_rotation_degrees);
		}
		
		Vector2 get_scale() const {
			return ptr.godot_icall(bindings::id_Control_get_scale);
		}
		
		Vector2 get_pivot_offset() const {
			return ptr.godot_icall(bindings::id_Control_get_pivot_offset);
		}
		
		Vector2 get_custom_minimum_size() const {
			return ptr.godot_icall(bindings::id_Control_get_custom_minimum_size);
		}
		
		Vector2 get_parent_area_size() const {
			return ptr.godot_icall(bindings::id_Control_get_parent_area_size);
		}
		
		Vector2 get_global_position() const {
			return ptr.godot_icall(bindings::id_Control_get_global_position);
		}
		
		Rect2 get_rect() const {
			return ptr.godot_icall(bindings::id_Control_get_rect);
		}
		
		Rect2 get_global_rect() const {
			return ptr.godot_icall(bindings::id_Control_get_global_rect);
		}
		
		void show_modal(bool exclusive) {
			ptr.godot_icall(bindings::id_Control_show_modal, exclusive);
		}
		
		void set_focus_mode(int mode) {
			ptr.godot_icall(bindings::id_Control_set_focus_mode, mode);
		}
		
		int get_focus_mode() const {
			return ptr.godot_icall(bindings::id_Control_get_focus_mode);
		}
		
		bool has_focus() const {
			return ptr.godot_icall(bindings::id_Control_has_focus);
		}
		
		void grab_focus() {
			ptr.godot_icall(bindings::id_Control_grab_focus);
		}
		
		void release_focus() {
			ptr.godot_icall(bindings::id_Control_release_focus);
		}
		
		Control@ get_focus_owner() const {
			Control ret = ptr.godot_icall(bindings::id_Control_get_focus_owner);
			return  ret;
		}
		
		void set_h_size_flags(int flags) {
			ptr.godot_icall(bindings::id_Control_set_h_size_flags, flags);
		}
		
		int get_h_size_flags() const {
			return ptr.godot_icall(bindings::id_Control_get_h_size_flags);
		}
		
		void set_stretch_ratio(float ratio) {
			ptr.godot_icall(bindings::id_Control_set_stretch_ratio, ratio);
		}
		
		float get_stretch_ratio() const {
			return ptr.godot_icall(bindings::id_Control_get_stretch_ratio);
		}
		
		void set_v_size_flags(int flags) {
			ptr.godot_icall(bindings::id_Control_set_v_size_flags, flags);
		}
		
		int get_v_size_flags() const {
			return ptr.godot_icall(bindings::id_Control_get_v_size_flags);
		}
		
		void set_theme(Theme@ theme) {
			ptr.godot_icall(bindings::id_Control_set_theme, theme);
		}
		
		Theme@ get_theme() const {
			Theme ret = ptr.godot_icall(bindings::id_Control_get_theme);
			return  ret;
		}
		
		void add_icon_override(const String &in name, Texture@ texture) {
			ptr.godot_icall(bindings::id_Control_add_icon_override, name, texture);
		}
		
		void add_shader_override(const String &in name, Shader@ shader) {
			ptr.godot_icall(bindings::id_Control_add_shader_override, name, shader);
		}
		
		void add_stylebox_override(const String &in name, StyleBox@ stylebox) {
			ptr.godot_icall(bindings::id_Control_add_stylebox_override, name, stylebox);
		}
		
		void add_font_override(const String &in name, Font@ font) {
			ptr.godot_icall(bindings::id_Control_add_font_override, name, font);
		}
		
		void add_color_override(const String &in name, const Color &in color) {
			ptr.godot_icall(bindings::id_Control_add_color_override, name, color);
		}
		
		void add_constant_override(const String &in name, int constant) {
			ptr.godot_icall(bindings::id_Control_add_constant_override, name, constant);
		}
		
		Texture@ get_icon(const String &in name, const String &in type) const {
			Texture ret = ptr.godot_icall(bindings::id_Control_get_icon, name, type);
			return  ret;
		}
		
		StyleBox@ get_stylebox(const String &in name, const String &in type) const {
			StyleBox ret = ptr.godot_icall(bindings::id_Control_get_stylebox, name, type);
			return  ret;
		}
		
		Font@ get_font(const String &in name, const String &in type) const {
			Font ret = ptr.godot_icall(bindings::id_Control_get_font, name, type);
			return  ret;
		}
		
		Color get_color(const String &in name, const String &in type) const {
			return ptr.godot_icall(bindings::id_Control_get_color, name, type);
		}
		
		int get_constant(const String &in name, const String &in type) const {
			return ptr.godot_icall(bindings::id_Control_get_constant, name, type);
		}
		
		bool has_icon_override(const String &in name) const {
			return ptr.godot_icall(bindings::id_Control_has_icon_override, name);
		}
		
		bool has_shader_override(const String &in name) const {
			return ptr.godot_icall(bindings::id_Control_has_shader_override, name);
		}
		
		bool has_stylebox_override(const String &in name) const {
			return ptr.godot_icall(bindings::id_Control_has_stylebox_override, name);
		}
		
		bool has_font_override(const String &in name) const {
			return ptr.godot_icall(bindings::id_Control_has_font_override, name);
		}
		
		bool has_color_override(const String &in name) const {
			return ptr.godot_icall(bindings::id_Control_has_color_override, name);
		}
		
		bool has_constant_override(const String &in name) const {
			return ptr.godot_icall(bindings::id_Control_has_constant_override, name);
		}
		
		bool has_icon(const String &in name, const String &in type) const {
			return ptr.godot_icall(bindings::id_Control_has_icon, name, type);
		}
		
		bool has_stylebox(const String &in name, const String &in type) const {
			return ptr.godot_icall(bindings::id_Control_has_stylebox, name, type);
		}
		
		bool has_font(const String &in name, const String &in type) const {
			return ptr.godot_icall(bindings::id_Control_has_font, name, type);
		}
		
		bool has_color(const String &in name, const String &in type) const {
			return ptr.godot_icall(bindings::id_Control_has_color, name, type);
		}
		
		bool has_constant(const String &in name, const String &in type) const {
			return ptr.godot_icall(bindings::id_Control_has_constant, name, type);
		}
		
		Control@ get_parent_control() const {
			Control ret = ptr.godot_icall(bindings::id_Control_get_parent_control);
			return  ret;
		}
		
		void set_h_grow_direction(int direction) {
			ptr.godot_icall(bindings::id_Control_set_h_grow_direction, direction);
		}
		
		int get_h_grow_direction() const {
			return ptr.godot_icall(bindings::id_Control_get_h_grow_direction);
		}
		
		void set_v_grow_direction(int direction) {
			ptr.godot_icall(bindings::id_Control_set_v_grow_direction, direction);
		}
		
		int get_v_grow_direction() const {
			return ptr.godot_icall(bindings::id_Control_get_v_grow_direction);
		}
		
		void set_tooltip(const String &in tooltip) {
			ptr.godot_icall(bindings::id_Control_set_tooltip, tooltip);
		}
		
		String get_tooltip(const Vector2 &in at_position) const {
			return ptr.godot_icall(bindings::id_Control_get_tooltip, at_position);
		}
		
		protected String _get_tooltip() const {
			return ptr.godot_icall(bindings::id_Control__get_tooltip);
		}
		
		void set_default_cursor_shape(int shape) {
			ptr.godot_icall(bindings::id_Control_set_default_cursor_shape, shape);
		}
		
		int get_default_cursor_shape() const {
			return ptr.godot_icall(bindings::id_Control_get_default_cursor_shape);
		}
		
		int get_cursor_shape(const Vector2 &in position) const {
			return ptr.godot_icall(bindings::id_Control_get_cursor_shape, position);
		}
		
		void set_focus_neighbour(int margin, const NodePath &in neighbour) {
			ptr.godot_icall(bindings::id_Control_set_focus_neighbour, margin, neighbour);
		}
		
		NodePath get_focus_neighbour(int margin) const {
			return ptr.godot_icall(bindings::id_Control_get_focus_neighbour, margin);
		}
		
		void set_focus_next(const NodePath &in next) {
			ptr.godot_icall(bindings::id_Control_set_focus_next, next);
		}
		
		NodePath get_focus_next() const {
			return ptr.godot_icall(bindings::id_Control_get_focus_next);
		}
		
		void set_focus_previous(const NodePath &in previous) {
			ptr.godot_icall(bindings::id_Control_set_focus_previous, previous);
		}
		
		NodePath get_focus_previous() const {
			return ptr.godot_icall(bindings::id_Control_get_focus_previous);
		}
		
		void force_drag(const Variant &in data, Control@ preview) {
			ptr.godot_icall(bindings::id_Control_force_drag, data, preview);
		}
		
		void set_mouse_filter(int filter) {
			ptr.godot_icall(bindings::id_Control_set_mouse_filter, filter);
		}
		
		int get_mouse_filter() const {
			return ptr.godot_icall(bindings::id_Control_get_mouse_filter);
		}
		
		void set_clip_contents(bool enable) {
			ptr.godot_icall(bindings::id_Control_set_clip_contents, enable);
		}
		
		bool is_clipping_contents() {
			return ptr.godot_icall(bindings::id_Control_is_clipping_contents);
		}
		
		void grab_click_focus() {
			ptr.godot_icall(bindings::id_Control_grab_click_focus);
		}
		
		void set_drag_forwarding(Control@ target) {
			ptr.godot_icall(bindings::id_Control_set_drag_forwarding, target);
		}
		
		void set_drag_preview(Control@ control) {
			ptr.godot_icall(bindings::id_Control_set_drag_preview, control);
		}
		
		void warp_mouse(const Vector2 &in to_position) {
			ptr.godot_icall(bindings::id_Control_warp_mouse, to_position);
		}
		
		void minimum_size_changed() {
			ptr.godot_icall(bindings::id_Control_minimum_size_changed);
		}
		
		protected void _theme_changed() {
			ptr.godot_icall(bindings::id_Control__theme_changed);
		}
		
		protected void _font_changed() {
			ptr.godot_icall(bindings::id_Control__font_changed);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Control);
		}
		
	}
	
	class Physics2DDirectSpaceState : Object {
		
		
		Array intersect_point(const Vector2 &in point, int max_results, const Array &in exclude, int collision_layer) {
			return ptr.godot_icall(bindings::id_Physics2DDirectSpaceState_intersect_point, point, max_results, exclude, collision_layer);
		}
		
		Dictionary intersect_ray(const Vector2 &in From, const Vector2 &in to, const Array &in exclude, int collision_layer) {
			return ptr.godot_icall(bindings::id_Physics2DDirectSpaceState_intersect_ray, From, to, exclude, collision_layer);
		}
		
		Array intersect_shape(Physics2DShapeQueryParameters@ shape, int max_results) {
			return ptr.godot_icall(bindings::id_Physics2DDirectSpaceState_intersect_shape, shape, max_results);
		}
		
		Array cast_motion(Physics2DShapeQueryParameters@ shape) {
			return ptr.godot_icall(bindings::id_Physics2DDirectSpaceState_cast_motion, shape);
		}
		
		Array collide_shape(Physics2DShapeQueryParameters@ shape, int max_results) {
			return ptr.godot_icall(bindings::id_Physics2DDirectSpaceState_collide_shape, shape, max_results);
		}
		
		Dictionary get_rest_info(Physics2DShapeQueryParameters@ shape) {
			return ptr.godot_icall(bindings::id_Physics2DDirectSpaceState_get_rest_info, shape);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Physics2DDirectSpaceState);
		}
		
	}
	
	class _OS : Object {
		
		
		void set_clipboard(const String &in clipboard) {
			ptr.godot_icall(bindings::id__OS_set_clipboard, clipboard);
		}
		
		String get_clipboard() const {
			return ptr.godot_icall(bindings::id__OS_get_clipboard);
		}
		
		int get_screen_count() const {
			return ptr.godot_icall(bindings::id__OS_get_screen_count);
		}
		
		int get_current_screen() const {
			return ptr.godot_icall(bindings::id__OS_get_current_screen);
		}
		
		void set_current_screen(int screen) {
			ptr.godot_icall(bindings::id__OS_set_current_screen, screen);
		}
		
		Vector2 get_screen_position(int screen) const {
			return ptr.godot_icall(bindings::id__OS_get_screen_position, screen);
		}
		
		Vector2 get_screen_size(int screen) const {
			return ptr.godot_icall(bindings::id__OS_get_screen_size, screen);
		}
		
		int get_screen_dpi(int screen) const {
			return ptr.godot_icall(bindings::id__OS_get_screen_dpi, screen);
		}
		
		Vector2 get_window_position() const {
			return ptr.godot_icall(bindings::id__OS_get_window_position);
		}
		
		void set_window_position(const Vector2 &in position) {
			ptr.godot_icall(bindings::id__OS_set_window_position, position);
		}
		
		Vector2 get_window_size() const {
			return ptr.godot_icall(bindings::id__OS_get_window_size);
		}
		
		void set_window_size(const Vector2 &in size) {
			ptr.godot_icall(bindings::id__OS_set_window_size, size);
		}
		
		void set_window_fullscreen(bool enabled) {
			ptr.godot_icall(bindings::id__OS_set_window_fullscreen, enabled);
		}
		
		bool is_window_fullscreen() const {
			return ptr.godot_icall(bindings::id__OS_is_window_fullscreen);
		}
		
		void set_window_resizable(bool enabled) {
			ptr.godot_icall(bindings::id__OS_set_window_resizable, enabled);
		}
		
		bool is_window_resizable() const {
			return ptr.godot_icall(bindings::id__OS_is_window_resizable);
		}
		
		void set_window_minimized(bool enabled) {
			ptr.godot_icall(bindings::id__OS_set_window_minimized, enabled);
		}
		
		bool is_window_minimized() const {
			return ptr.godot_icall(bindings::id__OS_is_window_minimized);
		}
		
		void set_window_maximized(bool enabled) {
			ptr.godot_icall(bindings::id__OS_set_window_maximized, enabled);
		}
		
		bool is_window_maximized() const {
			return ptr.godot_icall(bindings::id__OS_is_window_maximized);
		}
		
		void request_attention() {
			ptr.godot_icall(bindings::id__OS_request_attention);
		}
		
		void set_borderless_window(bool borderless) {
			ptr.godot_icall(bindings::id__OS_set_borderless_window, borderless);
		}
		
		bool get_borderless_window() const {
			return ptr.godot_icall(bindings::id__OS_get_borderless_window);
		}
		
		void set_ime_position(const Vector2 &in position) {
			ptr.godot_icall(bindings::id__OS_set_ime_position, position);
		}
		
		void set_screen_orientation(int orientation) {
			ptr.godot_icall(bindings::id__OS_set_screen_orientation, orientation);
		}
		
		int get_screen_orientation() const {
			return ptr.godot_icall(bindings::id__OS_get_screen_orientation);
		}
		
		void set_keep_screen_on(bool enabled) {
			ptr.godot_icall(bindings::id__OS_set_keep_screen_on, enabled);
		}
		
		bool is_keep_screen_on() const {
			return ptr.godot_icall(bindings::id__OS_is_keep_screen_on);
		}
		
		bool has_touchscreen_ui_hint() const {
			return ptr.godot_icall(bindings::id__OS_has_touchscreen_ui_hint);
		}
		
		void set_window_title(const String &in title) {
			ptr.godot_icall(bindings::id__OS_set_window_title, title);
		}
		
		void set_low_processor_usage_mode(bool enable) {
			ptr.godot_icall(bindings::id__OS_set_low_processor_usage_mode, enable);
		}
		
		bool is_in_low_processor_usage_mode() const {
			return ptr.godot_icall(bindings::id__OS_is_in_low_processor_usage_mode);
		}
		
		int get_processor_count() const {
			return ptr.godot_icall(bindings::id__OS_get_processor_count);
		}
		
		String get_executable_path() const {
			return ptr.godot_icall(bindings::id__OS_get_executable_path);
		}
		
		int execute(const String &in path, const PoolStringArray &in arguments, bool blocking, const Array &in output) {
			return ptr.godot_icall(bindings::id__OS_execute, path, arguments, blocking, output);
		}
		
		int kill(int pid) {
			return ptr.godot_icall(bindings::id__OS_kill, pid);
		}
		
		int shell_open(const String &in uri) {
			return ptr.godot_icall(bindings::id__OS_shell_open, uri);
		}
		
		int get_process_id() const {
			return ptr.godot_icall(bindings::id__OS_get_process_id);
		}
		
		String get_environment(const String &in environment) const {
			return ptr.godot_icall(bindings::id__OS_get_environment, environment);
		}
		
		bool has_environment(const String &in environment) const {
			return ptr.godot_icall(bindings::id__OS_has_environment, environment);
		}
		
		String get_name() const {
			return ptr.godot_icall(bindings::id__OS_get_name);
		}
		
		PoolStringArray get_cmdline_args() {
			return ptr.godot_icall(bindings::id__OS_get_cmdline_args);
		}
		
		Dictionary get_datetime(bool utc) const {
			return ptr.godot_icall(bindings::id__OS_get_datetime, utc);
		}
		
		Dictionary get_date(bool utc) const {
			return ptr.godot_icall(bindings::id__OS_get_date, utc);
		}
		
		Dictionary get_time(bool utc) const {
			return ptr.godot_icall(bindings::id__OS_get_time, utc);
		}
		
		Dictionary get_time_zone_info() const {
			return ptr.godot_icall(bindings::id__OS_get_time_zone_info);
		}
		
		int get_unix_time() const {
			return ptr.godot_icall(bindings::id__OS_get_unix_time);
		}
		
		Dictionary get_datetime_from_unix_time(int unix_time_val) const {
			return ptr.godot_icall(bindings::id__OS_get_datetime_from_unix_time, unix_time_val);
		}
		
		int get_unix_time_from_datetime(const Dictionary &in datetime) const {
			return ptr.godot_icall(bindings::id__OS_get_unix_time_from_datetime, datetime);
		}
		
		int get_system_time_secs() const {
			return ptr.godot_icall(bindings::id__OS_get_system_time_secs);
		}
		
		void set_icon(Image@ icon) {
			ptr.godot_icall(bindings::id__OS_set_icon, icon);
		}
		
		int get_exit_code() const {
			return ptr.godot_icall(bindings::id__OS_get_exit_code);
		}
		
		void set_exit_code(int code) {
			ptr.godot_icall(bindings::id__OS_set_exit_code, code);
		}
		
		void delay_usec(int usec) const {
			ptr.godot_icall(bindings::id__OS_delay_usec, usec);
		}
		
		void delay_msec(int msec) const {
			ptr.godot_icall(bindings::id__OS_delay_msec, msec);
		}
		
		int get_ticks_msec() const {
			return ptr.godot_icall(bindings::id__OS_get_ticks_msec);
		}
		
		int get_splash_tick_msec() const {
			return ptr.godot_icall(bindings::id__OS_get_splash_tick_msec);
		}
		
		String get_locale() const {
			return ptr.godot_icall(bindings::id__OS_get_locale);
		}
		
		String get_latin_keyboard_variant() const {
			return ptr.godot_icall(bindings::id__OS_get_latin_keyboard_variant);
		}
		
		String get_model_name() const {
			return ptr.godot_icall(bindings::id__OS_get_model_name);
		}
		
		bool can_draw() const {
			return ptr.godot_icall(bindings::id__OS_can_draw);
		}
		
		bool is_userfs_persistent() const {
			return ptr.godot_icall(bindings::id__OS_is_userfs_persistent);
		}
		
		bool is_stdout_verbose() const {
			return ptr.godot_icall(bindings::id__OS_is_stdout_verbose);
		}
		
		bool can_use_threads() const {
			return ptr.godot_icall(bindings::id__OS_can_use_threads);
		}
		
		bool is_debug_build() const {
			return ptr.godot_icall(bindings::id__OS_is_debug_build);
		}
		
		void dump_memory_to_file(const String &in file) {
			ptr.godot_icall(bindings::id__OS_dump_memory_to_file, file);
		}
		
		void dump_resources_to_file(const String &in file) {
			ptr.godot_icall(bindings::id__OS_dump_resources_to_file, file);
		}
		
		bool has_virtual_keyboard() const {
			return ptr.godot_icall(bindings::id__OS_has_virtual_keyboard);
		}
		
		void show_virtual_keyboard(const String &in existing_text) {
			ptr.godot_icall(bindings::id__OS_show_virtual_keyboard, existing_text);
		}
		
		void hide_virtual_keyboard() {
			ptr.godot_icall(bindings::id__OS_hide_virtual_keyboard);
		}
		
		int get_virtual_keyboard_height() {
			return ptr.godot_icall(bindings::id__OS_get_virtual_keyboard_height);
		}
		
		void print_resources_in_use(bool short) {
			ptr.godot_icall(bindings::id__OS_print_resources_in_use, short);
		}
		
		void print_all_resources(const String &in tofile) {
			ptr.godot_icall(bindings::id__OS_print_all_resources, tofile);
		}
		
		int get_static_memory_usage() const {
			return ptr.godot_icall(bindings::id__OS_get_static_memory_usage);
		}
		
		int get_static_memory_peak_usage() const {
			return ptr.godot_icall(bindings::id__OS_get_static_memory_peak_usage);
		}
		
		int get_dynamic_memory_usage() const {
			return ptr.godot_icall(bindings::id__OS_get_dynamic_memory_usage);
		}
		
		String get_user_data_dir() const {
			return ptr.godot_icall(bindings::id__OS_get_user_data_dir);
		}
		
		String get_system_dir(int dir) const {
			return ptr.godot_icall(bindings::id__OS_get_system_dir, dir);
		}
		
		String get_unique_id() const {
			return ptr.godot_icall(bindings::id__OS_get_unique_id);
		}
		
		bool is_ok_left_and_cancel_right() const {
			return ptr.godot_icall(bindings::id__OS_is_ok_left_and_cancel_right);
		}
		
		void print_all_textures_by_size() {
			ptr.godot_icall(bindings::id__OS_print_all_textures_by_size);
		}
		
		void print_resources_by_type(const PoolStringArray &in types) {
			ptr.godot_icall(bindings::id__OS_print_resources_by_type, types);
		}
		
		int native_video_play(const String &in path, float volume, const String &in audio_track, const String &in subtitle_track) {
			return ptr.godot_icall(bindings::id__OS_native_video_play, path, volume, audio_track, subtitle_track);
		}
		
		bool native_video_is_playing() {
			return ptr.godot_icall(bindings::id__OS_native_video_is_playing);
		}
		
		void native_video_stop() {
			ptr.godot_icall(bindings::id__OS_native_video_stop);
		}
		
		void native_video_pause() {
			ptr.godot_icall(bindings::id__OS_native_video_pause);
		}
		
		void native_video_unpause() {
			ptr.godot_icall(bindings::id__OS_native_video_unpause);
		}
		
		String get_scancode_string(int code) const {
			return ptr.godot_icall(bindings::id__OS_get_scancode_string, code);
		}
		
		bool is_scancode_unicode(int code) const {
			return ptr.godot_icall(bindings::id__OS_is_scancode_unicode, code);
		}
		
		int find_scancode_from_string(const String &in string) const {
			return ptr.godot_icall(bindings::id__OS_find_scancode_from_string, string);
		}
		
		void set_use_file_access_save_and_swap(bool enabled) {
			ptr.godot_icall(bindings::id__OS_set_use_file_access_save_and_swap, enabled);
		}
		
		void alert(const String &in text, const String &in title) {
			ptr.godot_icall(bindings::id__OS_alert, text, title);
		}
		
		int set_thread_name(const String &in name) {
			return ptr.godot_icall(bindings::id__OS_set_thread_name, name);
		}
		
		void set_use_vsync(bool enable) {
			ptr.godot_icall(bindings::id__OS_set_use_vsync, enable);
		}
		
		bool is_vsync_enabled() const {
			return ptr.godot_icall(bindings::id__OS_is_vsync_enabled);
		}
		
		bool has_feature(const String &in tag_name) const {
			return ptr.godot_icall(bindings::id__OS_has_feature, tag_name);
		}
		
		int get_power_state() {
			return ptr.godot_icall(bindings::id__OS_get_power_state);
		}
		
		int get_power_seconds_left() {
			return ptr.godot_icall(bindings::id__OS_get_power_seconds_left);
		}
		
		int get_power_percent_left() {
			return ptr.godot_icall(bindings::id__OS_get_power_percent_left);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id__OS);
		}
		
	}
	
	class MarginContainer : Container {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_MarginContainer);
		}
		
	}
	
	class KinematicCollision : Reference {
		
		
		Vector3 get_position() const {
			return ptr.godot_icall(bindings::id_KinematicCollision_get_position);
		}
		
		Vector3 get_normal() const {
			return ptr.godot_icall(bindings::id_KinematicCollision_get_normal);
		}
		
		Vector3 get_travel() const {
			return ptr.godot_icall(bindings::id_KinematicCollision_get_travel);
		}
		
		Vector3 get_remainder() const {
			return ptr.godot_icall(bindings::id_KinematicCollision_get_remainder);
		}
		
		Object@ get_local_shape() const {
			Object ret = ptr.godot_icall(bindings::id_KinematicCollision_get_local_shape);
			return  ret;
		}
		
		Object@ get_collider() const {
			Object ret = ptr.godot_icall(bindings::id_KinematicCollision_get_collider);
			return  ret;
		}
		
		int get_collider_id() const {
			return ptr.godot_icall(bindings::id_KinematicCollision_get_collider_id);
		}
		
		Object@ get_collider_shape() const {
			Object ret = ptr.godot_icall(bindings::id_KinematicCollision_get_collider_shape);
			return  ret;
		}
		
		int get_collider_shape_index() const {
			return ptr.godot_icall(bindings::id_KinematicCollision_get_collider_shape_index);
		}
		
		Vector3 get_collider_velocity() const {
			return ptr.godot_icall(bindings::id_KinematicCollision_get_collider_velocity);
		}
		
		Variant get_collider_metadata() const {
			return ptr.godot_icall(bindings::id_KinematicCollision_get_collider_metadata);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_KinematicCollision)).ptr();
		}
		
	}
	
	class VisibilityEnabler : VisibilityNotifier {
		
		
		void set_enabler(int enabler, bool enabled) {
			ptr.godot_icall(bindings::id_VisibilityEnabler_set_enabler, enabler, enabled);
		}
		
		bool is_enabler_enabled(int enabler) const {
			return ptr.godot_icall(bindings::id_VisibilityEnabler_is_enabler_enabled, enabler);
		}
		
		protected void _node_removed(Node@ arg0) {
			ptr.godot_icall(bindings::id_VisibilityEnabler__node_removed, arg0);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_VisibilityEnabler);
		}
		
	}
	
	class BulletPhysicsServer : PhysicsServer {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_BulletPhysicsServer);
		}
		
	}
	
	class VisualScriptSequence : VisualScriptNode {
		
		
		void set_steps(int steps) {
			ptr.godot_icall(bindings::id_VisualScriptSequence_set_steps, steps);
		}
		
		int get_steps() const {
			return ptr.godot_icall(bindings::id_VisualScriptSequence_get_steps);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptSequence)).ptr();
		}
		
	}
	
	class VisualScriptWhile : VisualScriptNode {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptWhile)).ptr();
		}
		
	}
	
	class AudioStreamPlayer3D : Spatial {
		
		
		void set_stream(AudioStream@ stream) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D_set_stream, stream);
		}
		
		AudioStream@ get_stream() const {
			AudioStream ret = ptr.godot_icall(bindings::id_AudioStreamPlayer3D_get_stream);
			return  ret;
		}
		
		void set_unit_db(float unit_db) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D_set_unit_db, unit_db);
		}
		
		float get_unit_db() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer3D_get_unit_db);
		}
		
		void set_unit_size(float unit_size) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D_set_unit_size, unit_size);
		}
		
		float get_unit_size() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer3D_get_unit_size);
		}
		
		void set_max_db(float max_db) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D_set_max_db, max_db);
		}
		
		float get_max_db() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer3D_get_max_db);
		}
		
		void play(float from_position) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D_play, from_position);
		}
		
		void seek(float to_position) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D_seek, to_position);
		}
		
		void stop() {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D_stop);
		}
		
		bool is_playing() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer3D_is_playing);
		}
		
		float get_playback_position() {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer3D_get_playback_position);
		}
		
		void set_bus(const String &in bus) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D_set_bus, bus);
		}
		
		String get_bus() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer3D_get_bus);
		}
		
		void set_autoplay(bool enable) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D_set_autoplay, enable);
		}
		
		bool is_autoplay_enabled() {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer3D_is_autoplay_enabled);
		}
		
		protected void _set_playing(bool enable) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D__set_playing, enable);
		}
		
		protected bool _is_active() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer3D__is_active);
		}
		
		void set_max_distance(float metres) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D_set_max_distance, metres);
		}
		
		float get_max_distance() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer3D_get_max_distance);
		}
		
		void set_area_mask(int mask) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D_set_area_mask, mask);
		}
		
		int get_area_mask() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer3D_get_area_mask);
		}
		
		void set_emission_angle(float degrees) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D_set_emission_angle, degrees);
		}
		
		float get_emission_angle() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer3D_get_emission_angle);
		}
		
		void set_emission_angle_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D_set_emission_angle_enabled, enabled);
		}
		
		bool is_emission_angle_enabled() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer3D_is_emission_angle_enabled);
		}
		
		void set_emission_angle_filter_attenuation_db(float db) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D_set_emission_angle_filter_attenuation_db, db);
		}
		
		float get_emission_angle_filter_attenuation_db() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer3D_get_emission_angle_filter_attenuation_db);
		}
		
		void set_attenuation_filter_cutoff_hz(float degrees) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D_set_attenuation_filter_cutoff_hz, degrees);
		}
		
		float get_attenuation_filter_cutoff_hz() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer3D_get_attenuation_filter_cutoff_hz);
		}
		
		void set_attenuation_filter_db(float db) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D_set_attenuation_filter_db, db);
		}
		
		float get_attenuation_filter_db() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer3D_get_attenuation_filter_db);
		}
		
		void set_attenuation_model(int model) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D_set_attenuation_model, model);
		}
		
		int get_attenuation_model() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer3D_get_attenuation_model);
		}
		
		void set_out_of_range_mode(int mode) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D_set_out_of_range_mode, mode);
		}
		
		int get_out_of_range_mode() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer3D_get_out_of_range_mode);
		}
		
		void set_doppler_tracking(int mode) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D_set_doppler_tracking, mode);
		}
		
		int get_doppler_tracking() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer3D_get_doppler_tracking);
		}
		
		protected void _bus_layout_changed() {
			ptr.godot_icall(bindings::id_AudioStreamPlayer3D__bus_layout_changed);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_AudioStreamPlayer3D);
		}
		
	}
	
	class StyleBoxLine : StyleBox {
		
		
		void set_color(const Color &in color) {
			ptr.godot_icall(bindings::id_StyleBoxLine_set_color, color);
		}
		
		Color get_color() const {
			return ptr.godot_icall(bindings::id_StyleBoxLine_get_color);
		}
		
		void set_thickness(int thickness) {
			ptr.godot_icall(bindings::id_StyleBoxLine_set_thickness, thickness);
		}
		
		int get_thickness() const {
			return ptr.godot_icall(bindings::id_StyleBoxLine_get_thickness);
		}
		
		void set_grow(float grow) {
			ptr.godot_icall(bindings::id_StyleBoxLine_set_grow, grow);
		}
		
		float get_grow() const {
			return ptr.godot_icall(bindings::id_StyleBoxLine_get_grow);
		}
		
		void set_vertical(bool vertical) {
			ptr.godot_icall(bindings::id_StyleBoxLine_set_vertical, vertical);
		}
		
		bool is_vertical() const {
			return ptr.godot_icall(bindings::id_StyleBoxLine_is_vertical);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_StyleBoxLine)).ptr();
		}
		
	}
	
	class AudioEffectPhaser : AudioEffect {
		
		
		void set_range_min_hz(float hz) {
			ptr.godot_icall(bindings::id_AudioEffectPhaser_set_range_min_hz, hz);
		}
		
		float get_range_min_hz() const {
			return ptr.godot_icall(bindings::id_AudioEffectPhaser_get_range_min_hz);
		}
		
		void set_range_max_hz(float hz) {
			ptr.godot_icall(bindings::id_AudioEffectPhaser_set_range_max_hz, hz);
		}
		
		float get_range_max_hz() const {
			return ptr.godot_icall(bindings::id_AudioEffectPhaser_get_range_max_hz);
		}
		
		void set_rate_hz(float hz) {
			ptr.godot_icall(bindings::id_AudioEffectPhaser_set_rate_hz, hz);
		}
		
		float get_rate_hz() const {
			return ptr.godot_icall(bindings::id_AudioEffectPhaser_get_rate_hz);
		}
		
		void set_feedback(float fbk) {
			ptr.godot_icall(bindings::id_AudioEffectPhaser_set_feedback, fbk);
		}
		
		float get_feedback() const {
			return ptr.godot_icall(bindings::id_AudioEffectPhaser_get_feedback);
		}
		
		void set_depth(float depth) {
			ptr.godot_icall(bindings::id_AudioEffectPhaser_set_depth, depth);
		}
		
		float get_depth() const {
			return ptr.godot_icall(bindings::id_AudioEffectPhaser_get_depth);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectPhaser)).ptr();
		}
		
	}
	
	class MeshInstance : GeometryInstance {
		
		
		void set_mesh(Mesh@ mesh) {
			ptr.godot_icall(bindings::id_MeshInstance_set_mesh, mesh);
		}
		
		Mesh@ get_mesh() const {
			Mesh ret = ptr.godot_icall(bindings::id_MeshInstance_get_mesh);
			return  ret;
		}
		
		void set_skeleton_path(const NodePath &in skeleton_path) {
			ptr.godot_icall(bindings::id_MeshInstance_set_skeleton_path, skeleton_path);
		}
		
		NodePath get_skeleton_path() {
			return ptr.godot_icall(bindings::id_MeshInstance_get_skeleton_path);
		}
		
		void set_surface_material(int surface, Material@ material) {
			ptr.godot_icall(bindings::id_MeshInstance_set_surface_material, surface, material);
		}
		
		Material@ get_surface_material(int surface) const {
			Material ret = ptr.godot_icall(bindings::id_MeshInstance_get_surface_material, surface);
			return  ret;
		}
		
		void create_trimesh_collision() {
			ptr.godot_icall(bindings::id_MeshInstance_create_trimesh_collision);
		}
		
		void create_convex_collision() {
			ptr.godot_icall(bindings::id_MeshInstance_create_convex_collision);
		}
		
		protected void _mesh_changed() {
			ptr.godot_icall(bindings::id_MeshInstance__mesh_changed);
		}
		
		void create_debug_tangents() {
			ptr.godot_icall(bindings::id_MeshInstance_create_debug_tangents);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_MeshInstance);
		}
		
	}
	
	class GIProbeData : Resource {
		
		
		void set_bounds(const AABB &in bounds) {
			ptr.godot_icall(bindings::id_GIProbeData_set_bounds, bounds);
		}
		
		AABB get_bounds() const {
			return ptr.godot_icall(bindings::id_GIProbeData_get_bounds);
		}
		
		void set_cell_size(float cell_size) {
			ptr.godot_icall(bindings::id_GIProbeData_set_cell_size, cell_size);
		}
		
		float get_cell_size() const {
			return ptr.godot_icall(bindings::id_GIProbeData_get_cell_size);
		}
		
		void set_to_cell_xform(const Transform &in to_cell_xform) {
			ptr.godot_icall(bindings::id_GIProbeData_set_to_cell_xform, to_cell_xform);
		}
		
		Transform get_to_cell_xform() const {
			return ptr.godot_icall(bindings::id_GIProbeData_get_to_cell_xform);
		}
		
		void set_dynamic_data(const PoolIntArray &in dynamic_data) {
			ptr.godot_icall(bindings::id_GIProbeData_set_dynamic_data, dynamic_data);
		}
		
		PoolIntArray get_dynamic_data() const {
			return ptr.godot_icall(bindings::id_GIProbeData_get_dynamic_data);
		}
		
		void set_dynamic_range(int dynamic_range) {
			ptr.godot_icall(bindings::id_GIProbeData_set_dynamic_range, dynamic_range);
		}
		
		int get_dynamic_range() const {
			return ptr.godot_icall(bindings::id_GIProbeData_get_dynamic_range);
		}
		
		void set_energy(float energy) {
			ptr.godot_icall(bindings::id_GIProbeData_set_energy, energy);
		}
		
		float get_energy() const {
			return ptr.godot_icall(bindings::id_GIProbeData_get_energy);
		}
		
		void set_bias(float bias) {
			ptr.godot_icall(bindings::id_GIProbeData_set_bias, bias);
		}
		
		float get_bias() const {
			return ptr.godot_icall(bindings::id_GIProbeData_get_bias);
		}
		
		void set_normal_bias(float bias) {
			ptr.godot_icall(bindings::id_GIProbeData_set_normal_bias, bias);
		}
		
		float get_normal_bias() const {
			return ptr.godot_icall(bindings::id_GIProbeData_get_normal_bias);
		}
		
		void set_propagation(float propagation) {
			ptr.godot_icall(bindings::id_GIProbeData_set_propagation, propagation);
		}
		
		float get_propagation() const {
			return ptr.godot_icall(bindings::id_GIProbeData_get_propagation);
		}
		
		void set_interior(bool interior) {
			ptr.godot_icall(bindings::id_GIProbeData_set_interior, interior);
		}
		
		bool is_interior() const {
			return ptr.godot_icall(bindings::id_GIProbeData_is_interior);
		}
		
		void set_compress(bool compress) {
			ptr.godot_icall(bindings::id_GIProbeData_set_compress, compress);
		}
		
		bool is_compressed() const {
			return ptr.godot_icall(bindings::id_GIProbeData_is_compressed);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_GIProbeData)).ptr();
		}
		
	}
	
	class ProximityGroup : Spatial {
		
		
		void set_group_name(const String &in name) {
			ptr.godot_icall(bindings::id_ProximityGroup_set_group_name, name);
		}
		
		String get_group_name() const {
			return ptr.godot_icall(bindings::id_ProximityGroup_get_group_name);
		}
		
		void set_dispatch_mode(int mode) {
			ptr.godot_icall(bindings::id_ProximityGroup_set_dispatch_mode, mode);
		}
		
		int get_dispatch_mode() const {
			return ptr.godot_icall(bindings::id_ProximityGroup_get_dispatch_mode);
		}
		
		void set_grid_radius(const Vector3 &in radius) {
			ptr.godot_icall(bindings::id_ProximityGroup_set_grid_radius, radius);
		}
		
		Vector3 get_grid_radius() const {
			return ptr.godot_icall(bindings::id_ProximityGroup_get_grid_radius);
		}
		
		void broadcast(const String &in name, const Variant &in parameters) {
			ptr.godot_icall(bindings::id_ProximityGroup_broadcast, name, parameters);
		}
		
		protected void _proximity_group_broadcast(const String &in name, const Variant &in params) {
			ptr.godot_icall(bindings::id_ProximityGroup__proximity_group_broadcast, name, params);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ProximityGroup);
		}
		
	}
	
	class MeshLibrary : Resource {
		
		
		void create_item(int id) {
			ptr.godot_icall(bindings::id_MeshLibrary_create_item, id);
		}
		
		void set_item_name(int id, const String &in name) {
			ptr.godot_icall(bindings::id_MeshLibrary_set_item_name, id, name);
		}
		
		void set_item_mesh(int id, Mesh@ mesh) {
			ptr.godot_icall(bindings::id_MeshLibrary_set_item_mesh, id, mesh);
		}
		
		void set_item_navmesh(int id, NavigationMesh@ navmesh) {
			ptr.godot_icall(bindings::id_MeshLibrary_set_item_navmesh, id, navmesh);
		}
		
		void set_item_shapes(int id, const Array &in shapes) {
			ptr.godot_icall(bindings::id_MeshLibrary_set_item_shapes, id, shapes);
		}
		
		void set_item_preview(int id, Texture@ texture) {
			ptr.godot_icall(bindings::id_MeshLibrary_set_item_preview, id, texture);
		}
		
		String get_item_name(int id) const {
			return ptr.godot_icall(bindings::id_MeshLibrary_get_item_name, id);
		}
		
		Mesh@ get_item_mesh(int id) const {
			Mesh ret = ptr.godot_icall(bindings::id_MeshLibrary_get_item_mesh, id);
			return  ret;
		}
		
		NavigationMesh@ get_item_navmesh(int id) const {
			NavigationMesh ret = ptr.godot_icall(bindings::id_MeshLibrary_get_item_navmesh, id);
			return  ret;
		}
		
		Array get_item_shapes(int id) const {
			return ptr.godot_icall(bindings::id_MeshLibrary_get_item_shapes, id);
		}
		
		Texture@ get_item_preview(int id) const {
			Texture ret = ptr.godot_icall(bindings::id_MeshLibrary_get_item_preview, id);
			return  ret;
		}
		
		void remove_item(int id) {
			ptr.godot_icall(bindings::id_MeshLibrary_remove_item, id);
		}
		
		int find_item_by_name(const String &in name) const {
			return ptr.godot_icall(bindings::id_MeshLibrary_find_item_by_name, name);
		}
		
		void clear() {
			ptr.godot_icall(bindings::id_MeshLibrary_clear);
		}
		
		PoolIntArray get_item_list() const {
			return ptr.godot_icall(bindings::id_MeshLibrary_get_item_list);
		}
		
		int get_last_unused_item_id() const {
			return ptr.godot_icall(bindings::id_MeshLibrary_get_last_unused_item_id);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_MeshLibrary)).ptr();
		}
		
	}
	
	class Path2D : Node2D {
		
		
		void set_curve(Curve2D@ curve) {
			ptr.godot_icall(bindings::id_Path2D_set_curve, curve);
		}
		
		Curve2D@ get_curve() const {
			Curve2D ret = ptr.godot_icall(bindings::id_Path2D_get_curve);
			return  ret;
		}
		
		protected void _curve_changed() {
			ptr.godot_icall(bindings::id_Path2D__curve_changed);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Path2D);
		}
		
	}
	
	class VideoStream : Resource {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VideoStream)).ptr();
		}
		
	}
	
	class Image : Resource {
		
		
		int get_width() const {
			return ptr.godot_icall(bindings::id_Image_get_width);
		}
		
		int get_height() const {
			return ptr.godot_icall(bindings::id_Image_get_height);
		}
		
		Vector2 get_size() const {
			return ptr.godot_icall(bindings::id_Image_get_size);
		}
		
		bool has_mipmaps() const {
			return ptr.godot_icall(bindings::id_Image_has_mipmaps);
		}
		
		int get_format() const {
			return ptr.godot_icall(bindings::id_Image_get_format);
		}
		
		PoolByteArray get_data() const {
			return ptr.godot_icall(bindings::id_Image_get_data);
		}
		
		void convert(int format) {
			ptr.godot_icall(bindings::id_Image_convert, format);
		}
		
		int get_mipmap_offset(int mipmap) const {
			return ptr.godot_icall(bindings::id_Image_get_mipmap_offset, mipmap);
		}
		
		void resize_to_po2(bool square) {
			ptr.godot_icall(bindings::id_Image_resize_to_po2, square);
		}
		
		void resize(int width, int height, int interpolation) {
			ptr.godot_icall(bindings::id_Image_resize, width, height, interpolation);
		}
		
		void shrink_x2() {
			ptr.godot_icall(bindings::id_Image_shrink_x2);
		}
		
		void expand_x2_hq2x() {
			ptr.godot_icall(bindings::id_Image_expand_x2_hq2x);
		}
		
		void crop(int width, int height) {
			ptr.godot_icall(bindings::id_Image_crop, width, height);
		}
		
		void flip_x() {
			ptr.godot_icall(bindings::id_Image_flip_x);
		}
		
		void flip_y() {
			ptr.godot_icall(bindings::id_Image_flip_y);
		}
		
		int generate_mipmaps() {
			return ptr.godot_icall(bindings::id_Image_generate_mipmaps);
		}
		
		void clear_mipmaps() {
			ptr.godot_icall(bindings::id_Image_clear_mipmaps);
		}
		
		void create(int width, int height, bool use_mipmaps, int format) {
			ptr.godot_icall(bindings::id_Image_create, width, height, use_mipmaps, format);
		}
		
		void create_from_data(int width, int height, bool use_mipmaps, int format, const PoolByteArray &in data) {
			ptr.godot_icall(bindings::id_Image_create_from_data, width, height, use_mipmaps, format, data);
		}
		
		bool is_empty() const {
			return ptr.godot_icall(bindings::id_Image_is_empty);
		}
		
		int load(const String &in path) {
			return ptr.godot_icall(bindings::id_Image_load, path);
		}
		
		int save_png(const String &in path) const {
			return ptr.godot_icall(bindings::id_Image_save_png, path);
		}
		
		int detect_alpha() const {
			return ptr.godot_icall(bindings::id_Image_detect_alpha);
		}
		
		bool is_invisible() const {
			return ptr.godot_icall(bindings::id_Image_is_invisible);
		}
		
		int compress(int mode, int source, float lossy_quality) {
			return ptr.godot_icall(bindings::id_Image_compress, mode, source, lossy_quality);
		}
		
		int decompress() {
			return ptr.godot_icall(bindings::id_Image_decompress);
		}
		
		bool is_compressed() const {
			return ptr.godot_icall(bindings::id_Image_is_compressed);
		}
		
		void fix_alpha_edges() {
			ptr.godot_icall(bindings::id_Image_fix_alpha_edges);
		}
		
		void premultiply_alpha() {
			ptr.godot_icall(bindings::id_Image_premultiply_alpha);
		}
		
		void srgb_to_linear() {
			ptr.godot_icall(bindings::id_Image_srgb_to_linear);
		}
		
		void normalmap_to_xy() {
			ptr.godot_icall(bindings::id_Image_normalmap_to_xy);
		}
		
		void blit_rect(Image@ src, const Rect2 &in src_rect, const Vector2 &in dst) {
			ptr.godot_icall(bindings::id_Image_blit_rect, src, src_rect, dst);
		}
		
		void blit_rect_mask(Image@ src, Image@ mask, const Rect2 &in src_rect, const Vector2 &in dst) {
			ptr.godot_icall(bindings::id_Image_blit_rect_mask, src, mask, src_rect, dst);
		}
		
		void blend_rect(Image@ src, const Rect2 &in src_rect, const Vector2 &in dst) {
			ptr.godot_icall(bindings::id_Image_blend_rect, src, src_rect, dst);
		}
		
		void blend_rect_mask(Image@ src, Image@ mask, const Rect2 &in src_rect, const Vector2 &in dst) {
			ptr.godot_icall(bindings::id_Image_blend_rect_mask, src, mask, src_rect, dst);
		}
		
		void fill(const Color &in color) {
			ptr.godot_icall(bindings::id_Image_fill, color);
		}
		
		Rect2 get_used_rect() const {
			return ptr.godot_icall(bindings::id_Image_get_used_rect);
		}
		
		Image@ get_rect(const Rect2 &in rect) const {
			Image ret = ptr.godot_icall(bindings::id_Image_get_rect, rect);
			return  ret;
		}
		
		void copy_from(Image@ src) {
			ptr.godot_icall(bindings::id_Image_copy_from, src);
		}
		
		protected void _set_data(const Dictionary &in data) {
			ptr.godot_icall(bindings::id_Image__set_data, data);
		}
		
		protected Dictionary _get_data() const {
			return ptr.godot_icall(bindings::id_Image__get_data);
		}
		
		void lock() {
			ptr.godot_icall(bindings::id_Image_lock);
		}
		
		void unlock() {
			ptr.godot_icall(bindings::id_Image_unlock);
		}
		
		void set_pixel(int x, int y, const Color &in color) {
			ptr.godot_icall(bindings::id_Image_set_pixel, x, y, color);
		}
		
		Color get_pixel(int x, int y) const {
			return ptr.godot_icall(bindings::id_Image_get_pixel, x, y);
		}
		
		int load_png_from_buffer(const PoolByteArray &in buffer) {
			return ptr.godot_icall(bindings::id_Image_load_png_from_buffer, buffer);
		}
		
		int load_jpg_from_buffer(const PoolByteArray &in buffer) {
			return ptr.godot_icall(bindings::id_Image_load_jpg_from_buffer, buffer);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Image)).ptr();
		}
		
	}
	
	class Slider : Range {
		
		
		protected void _gui_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_Slider__gui_input, arg0);
		}
		
		void set_ticks(int count) {
			ptr.godot_icall(bindings::id_Slider_set_ticks, count);
		}
		
		int get_ticks() const {
			return ptr.godot_icall(bindings::id_Slider_get_ticks);
		}
		
		bool get_ticks_on_borders() const {
			return ptr.godot_icall(bindings::id_Slider_get_ticks_on_borders);
		}
		
		void set_ticks_on_borders(bool ticks_on_border) {
			ptr.godot_icall(bindings::id_Slider_set_ticks_on_borders, ticks_on_border);
		}
		
		void set_editable(bool editable) {
			ptr.godot_icall(bindings::id_Slider_set_editable, editable);
		}
		
		bool is_editable() const {
			return ptr.godot_icall(bindings::id_Slider_is_editable);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Slider);
		}
		
	}
	
	class SpinBox : Range {
		
		
		protected void _gui_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_SpinBox__gui_input, arg0);
		}
		
		protected void _text_entered(const String &in arg0) {
			ptr.godot_icall(bindings::id_SpinBox__text_entered, arg0);
		}
		
		void set_suffix(const String &in suffix) {
			ptr.godot_icall(bindings::id_SpinBox_set_suffix, suffix);
		}
		
		String get_suffix() const {
			return ptr.godot_icall(bindings::id_SpinBox_get_suffix);
		}
		
		void set_prefix(const String &in prefix) {
			ptr.godot_icall(bindings::id_SpinBox_set_prefix, prefix);
		}
		
		String get_prefix() const {
			return ptr.godot_icall(bindings::id_SpinBox_get_prefix);
		}
		
		void set_editable(bool editable) {
			ptr.godot_icall(bindings::id_SpinBox_set_editable, editable);
		}
		
		bool is_editable() const {
			return ptr.godot_icall(bindings::id_SpinBox_is_editable);
		}
		
		protected void _line_edit_focus_exit() {
			ptr.godot_icall(bindings::id_SpinBox__line_edit_focus_exit);
		}
		
		LineEdit@ get_line_edit() {
			LineEdit ret = ptr.godot_icall(bindings::id_SpinBox_get_line_edit);
			return  ret;
		}
		
		protected void _line_edit_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_SpinBox__line_edit_input, arg0);
		}
		
		protected void _range_click_timeout() {
			ptr.godot_icall(bindings::id_SpinBox__range_click_timeout);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_SpinBox);
		}
		
	}
	
	class ReflectionProbe : VisualInstance {
		
		
		void set_intensity(float intensity) {
			ptr.godot_icall(bindings::id_ReflectionProbe_set_intensity, intensity);
		}
		
		float get_intensity() const {
			return ptr.godot_icall(bindings::id_ReflectionProbe_get_intensity);
		}
		
		void set_interior_ambient(const Color &in ambient) {
			ptr.godot_icall(bindings::id_ReflectionProbe_set_interior_ambient, ambient);
		}
		
		Color get_interior_ambient() const {
			return ptr.godot_icall(bindings::id_ReflectionProbe_get_interior_ambient);
		}
		
		void set_interior_ambient_energy(float ambient_energy) {
			ptr.godot_icall(bindings::id_ReflectionProbe_set_interior_ambient_energy, ambient_energy);
		}
		
		float get_interior_ambient_energy() const {
			return ptr.godot_icall(bindings::id_ReflectionProbe_get_interior_ambient_energy);
		}
		
		void set_interior_ambient_probe_contribution(float ambient_probe_contribution) {
			ptr.godot_icall(bindings::id_ReflectionProbe_set_interior_ambient_probe_contribution, ambient_probe_contribution);
		}
		
		float get_interior_ambient_probe_contribution() const {
			return ptr.godot_icall(bindings::id_ReflectionProbe_get_interior_ambient_probe_contribution);
		}
		
		void set_max_distance(float max_distance) {
			ptr.godot_icall(bindings::id_ReflectionProbe_set_max_distance, max_distance);
		}
		
		float get_max_distance() const {
			return ptr.godot_icall(bindings::id_ReflectionProbe_get_max_distance);
		}
		
		void set_extents(const Vector3 &in extents) {
			ptr.godot_icall(bindings::id_ReflectionProbe_set_extents, extents);
		}
		
		Vector3 get_extents() const {
			return ptr.godot_icall(bindings::id_ReflectionProbe_get_extents);
		}
		
		void set_origin_offset(const Vector3 &in origin_offset) {
			ptr.godot_icall(bindings::id_ReflectionProbe_set_origin_offset, origin_offset);
		}
		
		Vector3 get_origin_offset() const {
			return ptr.godot_icall(bindings::id_ReflectionProbe_get_origin_offset);
		}
		
		void set_as_interior(bool enable) {
			ptr.godot_icall(bindings::id_ReflectionProbe_set_as_interior, enable);
		}
		
		bool is_set_as_interior() const {
			return ptr.godot_icall(bindings::id_ReflectionProbe_is_set_as_interior);
		}
		
		void set_enable_box_projection(bool enable) {
			ptr.godot_icall(bindings::id_ReflectionProbe_set_enable_box_projection, enable);
		}
		
		bool is_box_projection_enabled() const {
			return ptr.godot_icall(bindings::id_ReflectionProbe_is_box_projection_enabled);
		}
		
		void set_enable_shadows(bool enable) {
			ptr.godot_icall(bindings::id_ReflectionProbe_set_enable_shadows, enable);
		}
		
		bool are_shadows_enabled() const {
			return ptr.godot_icall(bindings::id_ReflectionProbe_are_shadows_enabled);
		}
		
		void set_cull_mask(int layers) {
			ptr.godot_icall(bindings::id_ReflectionProbe_set_cull_mask, layers);
		}
		
		int get_cull_mask() const {
			return ptr.godot_icall(bindings::id_ReflectionProbe_get_cull_mask);
		}
		
		void set_update_mode(int mode) {
			ptr.godot_icall(bindings::id_ReflectionProbe_set_update_mode, mode);
		}
		
		int get_update_mode() const {
			return ptr.godot_icall(bindings::id_ReflectionProbe_get_update_mode);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ReflectionProbe);
		}
		
	}
	
	class CollisionObject : Spatial {
		
		
		protected void _input_event(Object@ camera, InputEvent@ event, const Vector3 &in click_position, const Vector3 &in click_normal, int shape_idx) {
			
		}
		
		void set_ray_pickable(bool ray_pickable) {
			ptr.godot_icall(bindings::id_CollisionObject_set_ray_pickable, ray_pickable);
		}
		
		bool is_ray_pickable() const {
			return ptr.godot_icall(bindings::id_CollisionObject_is_ray_pickable);
		}
		
		void set_capture_input_on_drag(bool enable) {
			ptr.godot_icall(bindings::id_CollisionObject_set_capture_input_on_drag, enable);
		}
		
		bool get_capture_input_on_drag() const {
			return ptr.godot_icall(bindings::id_CollisionObject_get_capture_input_on_drag);
		}
		
		RID get_rid() const {
			return ptr.godot_icall(bindings::id_CollisionObject_get_rid);
		}
		
		int create_shape_owner(Object@ owner) {
			return ptr.godot_icall(bindings::id_CollisionObject_create_shape_owner, owner);
		}
		
		void remove_shape_owner(int owner_id) {
			ptr.godot_icall(bindings::id_CollisionObject_remove_shape_owner, owner_id);
		}
		
		Array get_shape_owners() {
			return ptr.godot_icall(bindings::id_CollisionObject_get_shape_owners);
		}
		
		void shape_owner_set_transform(int owner_id, const Transform &in transform) {
			ptr.godot_icall(bindings::id_CollisionObject_shape_owner_set_transform, owner_id, transform);
		}
		
		Transform shape_owner_get_transform(int owner_id) const {
			return ptr.godot_icall(bindings::id_CollisionObject_shape_owner_get_transform, owner_id);
		}
		
		Object@ shape_owner_get_owner(int owner_id) const {
			Object ret = ptr.godot_icall(bindings::id_CollisionObject_shape_owner_get_owner, owner_id);
			return  ret;
		}
		
		void shape_owner_set_disabled(int owner_id, bool disabled) {
			ptr.godot_icall(bindings::id_CollisionObject_shape_owner_set_disabled, owner_id, disabled);
		}
		
		bool is_shape_owner_disabled(int owner_id) const {
			return ptr.godot_icall(bindings::id_CollisionObject_is_shape_owner_disabled, owner_id);
		}
		
		void shape_owner_add_shape(int owner_id, Shape@ shape) {
			ptr.godot_icall(bindings::id_CollisionObject_shape_owner_add_shape, owner_id, shape);
		}
		
		int shape_owner_get_shape_count(int owner_id) const {
			return ptr.godot_icall(bindings::id_CollisionObject_shape_owner_get_shape_count, owner_id);
		}
		
		Shape@ shape_owner_get_shape(int owner_id, int shape_id) const {
			Shape ret = ptr.godot_icall(bindings::id_CollisionObject_shape_owner_get_shape, owner_id, shape_id);
			return  ret;
		}
		
		int shape_owner_get_shape_index(int owner_id, int shape_id) const {
			return ptr.godot_icall(bindings::id_CollisionObject_shape_owner_get_shape_index, owner_id, shape_id);
		}
		
		void shape_owner_remove_shape(int owner_id, int shape_id) {
			ptr.godot_icall(bindings::id_CollisionObject_shape_owner_remove_shape, owner_id, shape_id);
		}
		
		void shape_owner_clear_shapes(int owner_id) {
			ptr.godot_icall(bindings::id_CollisionObject_shape_owner_clear_shapes, owner_id);
		}
		
		int shape_find_owner(int shape_index) const {
			return ptr.godot_icall(bindings::id_CollisionObject_shape_find_owner, shape_index);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_CollisionObject);
		}
		
	}
	
	class KinematicBody : PhysicsBody {
		
		
		KinematicCollision@ move_and_collide(const Vector3 &in rel_vec) {
			KinematicCollision ret = ptr.godot_icall(bindings::id_KinematicBody_move_and_collide, rel_vec);
			return  ret;
		}
		
		Vector3 move_and_slide(const Vector3 &in linear_velocity, const Vector3 &in floor_normal, float slope_stop_min_velocity, int max_slides, float floor_max_angle) {
			return ptr.godot_icall(bindings::id_KinematicBody_move_and_slide, linear_velocity, floor_normal, slope_stop_min_velocity, max_slides, floor_max_angle);
		}
		
		bool test_move(const Transform &in From, const Vector3 &in rel_vec) {
			return ptr.godot_icall(bindings::id_KinematicBody_test_move, From, rel_vec);
		}
		
		bool is_on_floor() const {
			return ptr.godot_icall(bindings::id_KinematicBody_is_on_floor);
		}
		
		bool is_on_ceiling() const {
			return ptr.godot_icall(bindings::id_KinematicBody_is_on_ceiling);
		}
		
		bool is_on_wall() const {
			return ptr.godot_icall(bindings::id_KinematicBody_is_on_wall);
		}
		
		Vector3 get_floor_velocity() const {
			return ptr.godot_icall(bindings::id_KinematicBody_get_floor_velocity);
		}
		
		void set_axis_lock(int axis, bool lock) {
			ptr.godot_icall(bindings::id_KinematicBody_set_axis_lock, axis, lock);
		}
		
		bool get_axis_lock(int axis) const {
			return ptr.godot_icall(bindings::id_KinematicBody_get_axis_lock, axis);
		}
		
		void set_safe_margin(float pixels) {
			ptr.godot_icall(bindings::id_KinematicBody_set_safe_margin, pixels);
		}
		
		float get_safe_margin() const {
			return ptr.godot_icall(bindings::id_KinematicBody_get_safe_margin);
		}
		
		int get_slide_count() const {
			return ptr.godot_icall(bindings::id_KinematicBody_get_slide_count);
		}
		
		KinematicCollision@ get_slide_collision(int slide_idx) {
			KinematicCollision ret = ptr.godot_icall(bindings::id_KinematicBody_get_slide_collision, slide_idx);
			return  ret;
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_KinematicBody);
		}
		
	}
	
	class PluginScript : Script {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_PluginScript)).ptr();
		}
		
	}
	
	class EditorResourceConversionPlugin : Reference {
		
		
		protected Resource@ _convert(Resource@ resource) {
			return null;
		}
		
		protected String _converts_to() {
			return String();
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_EditorResourceConversionPlugin)).ptr();
		}
		
	}
	
	class PacketPeer : Reference {
		
		
		Variant get_var() {
			return ptr.godot_icall(bindings::id_PacketPeer_get_var);
		}
		
		int put_var(const Variant &in var) {
			return ptr.godot_icall(bindings::id_PacketPeer_put_var, var);
		}
		
		PoolByteArray get_packet() {
			return ptr.godot_icall(bindings::id_PacketPeer_get_packet);
		}
		
		int put_packet(const PoolByteArray &in buffer) {
			return ptr.godot_icall(bindings::id_PacketPeer_put_packet, buffer);
		}
		
		int get_packet_error() const {
			return ptr.godot_icall(bindings::id_PacketPeer_get_packet_error);
		}
		
		int get_available_packet_count() const {
			return ptr.godot_icall(bindings::id_PacketPeer_get_available_packet_count);
		}
		
		void set_allow_object_decoding(bool enable) {
			ptr.godot_icall(bindings::id_PacketPeer_set_allow_object_decoding, enable);
		}
		
		bool is_object_decoding_allowed() const {
			return ptr.godot_icall(bindings::id_PacketPeer_is_object_decoding_allowed);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_PacketPeer)).ptr();
		}
		
	}
	
	class ScrollBar : Range {
		
		
		protected void _gui_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_ScrollBar__gui_input, arg0);
		}
		
		void set_custom_step(float step) {
			ptr.godot_icall(bindings::id_ScrollBar_set_custom_step, step);
		}
		
		float get_custom_step() const {
			return ptr.godot_icall(bindings::id_ScrollBar_get_custom_step);
		}
		
		protected void _drag_slave_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_ScrollBar__drag_slave_input, arg0);
		}
		
		protected void _drag_slave_exit() {
			ptr.godot_icall(bindings::id_ScrollBar__drag_slave_exit);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ScrollBar);
		}
		
	}
	
	class PopupPanel : Popup {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_PopupPanel);
		}
		
	}
	
	class PopupDialog : Popup {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_PopupDialog);
		}
		
	}
	
	class VideoPlayer : Control {
		
		
		void set_stream(VideoStream@ stream) {
			ptr.godot_icall(bindings::id_VideoPlayer_set_stream, stream);
		}
		
		VideoStream@ get_stream() const {
			VideoStream ret = ptr.godot_icall(bindings::id_VideoPlayer_get_stream);
			return  ret;
		}
		
		void play() {
			ptr.godot_icall(bindings::id_VideoPlayer_play);
		}
		
		void stop() {
			ptr.godot_icall(bindings::id_VideoPlayer_stop);
		}
		
		bool is_playing() const {
			return ptr.godot_icall(bindings::id_VideoPlayer_is_playing);
		}
		
		void set_paused(bool paused) {
			ptr.godot_icall(bindings::id_VideoPlayer_set_paused, paused);
		}
		
		bool is_paused() const {
			return ptr.godot_icall(bindings::id_VideoPlayer_is_paused);
		}
		
		void set_volume(float volume) {
			ptr.godot_icall(bindings::id_VideoPlayer_set_volume, volume);
		}
		
		float get_volume() const {
			return ptr.godot_icall(bindings::id_VideoPlayer_get_volume);
		}
		
		void set_volume_db(float db) {
			ptr.godot_icall(bindings::id_VideoPlayer_set_volume_db, db);
		}
		
		float get_volume_db() const {
			return ptr.godot_icall(bindings::id_VideoPlayer_get_volume_db);
		}
		
		void set_audio_track(int track) {
			ptr.godot_icall(bindings::id_VideoPlayer_set_audio_track, track);
		}
		
		int get_audio_track() const {
			return ptr.godot_icall(bindings::id_VideoPlayer_get_audio_track);
		}
		
		String get_stream_name() const {
			return ptr.godot_icall(bindings::id_VideoPlayer_get_stream_name);
		}
		
		void set_stream_position(float position) {
			ptr.godot_icall(bindings::id_VideoPlayer_set_stream_position, position);
		}
		
		float get_stream_position() const {
			return ptr.godot_icall(bindings::id_VideoPlayer_get_stream_position);
		}
		
		void set_autoplay(bool enabled) {
			ptr.godot_icall(bindings::id_VideoPlayer_set_autoplay, enabled);
		}
		
		bool has_autoplay() const {
			return ptr.godot_icall(bindings::id_VideoPlayer_has_autoplay);
		}
		
		void set_expand(bool enable) {
			ptr.godot_icall(bindings::id_VideoPlayer_set_expand, enable);
		}
		
		bool has_expand() const {
			return ptr.godot_icall(bindings::id_VideoPlayer_has_expand);
		}
		
		void set_buffering_msec(int msec) {
			ptr.godot_icall(bindings::id_VideoPlayer_set_buffering_msec, msec);
		}
		
		int get_buffering_msec() const {
			return ptr.godot_icall(bindings::id_VideoPlayer_get_buffering_msec);
		}
		
		void set_bus(const String &in bus) {
			ptr.godot_icall(bindings::id_VideoPlayer_set_bus, bus);
		}
		
		String get_bus() const {
			return ptr.godot_icall(bindings::id_VideoPlayer_get_bus);
		}
		
		Texture@ get_video_texture() {
			Texture ret = ptr.godot_icall(bindings::id_VideoPlayer_get_video_texture);
			return  ret;
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_VideoPlayer);
		}
		
	}
	
	class Joint : Spatial {
		
		
		void set_node_a(const NodePath &in node) {
			ptr.godot_icall(bindings::id_Joint_set_node_a, node);
		}
		
		NodePath get_node_a() const {
			return ptr.godot_icall(bindings::id_Joint_get_node_a);
		}
		
		void set_node_b(const NodePath &in node) {
			ptr.godot_icall(bindings::id_Joint_set_node_b, node);
		}
		
		NodePath get_node_b() const {
			return ptr.godot_icall(bindings::id_Joint_get_node_b);
		}
		
		void set_solver_priority(int priority) {
			ptr.godot_icall(bindings::id_Joint_set_solver_priority, priority);
		}
		
		int get_solver_priority() const {
			return ptr.godot_icall(bindings::id_Joint_get_solver_priority);
		}
		
		void set_exclude_nodes_from_collision(bool enable) {
			ptr.godot_icall(bindings::id_Joint_set_exclude_nodes_from_collision, enable);
		}
		
		bool get_exclude_nodes_from_collision() const {
			return ptr.godot_icall(bindings::id_Joint_get_exclude_nodes_from_collision);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Joint);
		}
		
	}
	
	class ConeTwistJoint : Joint {
		
		
		void set_param(int param, float value) {
			ptr.godot_icall(bindings::id_ConeTwistJoint_set_param, param, value);
		}
		
		float get_param(int param) const {
			return ptr.godot_icall(bindings::id_ConeTwistJoint_get_param, param);
		}
		
		protected void _set_swing_span(float swing_span) {
			ptr.godot_icall(bindings::id_ConeTwistJoint__set_swing_span, swing_span);
		}
		
		protected float _get_swing_span() const {
			return ptr.godot_icall(bindings::id_ConeTwistJoint__get_swing_span);
		}
		
		protected void _set_twist_span(float twist_span) {
			ptr.godot_icall(bindings::id_ConeTwistJoint__set_twist_span, twist_span);
		}
		
		protected float _get_twist_span() const {
			return ptr.godot_icall(bindings::id_ConeTwistJoint__get_twist_span);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ConeTwistJoint);
		}
		
	}
	
	class Curve : Resource {
		
		
		int add_point(const Vector2 &in position, float left_tangent, float right_tangent, int left_mode, int right_mode) {
			return ptr.godot_icall(bindings::id_Curve_add_point, position, left_tangent, right_tangent, left_mode, right_mode);
		}
		
		void remove_point(int index) {
			ptr.godot_icall(bindings::id_Curve_remove_point, index);
		}
		
		void clear_points() {
			ptr.godot_icall(bindings::id_Curve_clear_points);
		}
		
		Vector2 get_point_position(int index) const {
			return ptr.godot_icall(bindings::id_Curve_get_point_position, index);
		}
		
		void set_point_value(int index, float y) {
			ptr.godot_icall(bindings::id_Curve_set_point_value, index, y);
		}
		
		int set_point_offset(int index, float offset) {
			return ptr.godot_icall(bindings::id_Curve_set_point_offset, index, offset);
		}
		
		float interpolate(float offset) const {
			return ptr.godot_icall(bindings::id_Curve_interpolate, offset);
		}
		
		float interpolate_baked(float offset) {
			return ptr.godot_icall(bindings::id_Curve_interpolate_baked, offset);
		}
		
		float get_point_left_tangent(int index) const {
			return ptr.godot_icall(bindings::id_Curve_get_point_left_tangent, index);
		}
		
		float get_point_right_tangent(int index) const {
			return ptr.godot_icall(bindings::id_Curve_get_point_right_tangent, index);
		}
		
		int get_point_left_mode(int index) const {
			return ptr.godot_icall(bindings::id_Curve_get_point_left_mode, index);
		}
		
		int get_point_right_mode(int index) const {
			return ptr.godot_icall(bindings::id_Curve_get_point_right_mode, index);
		}
		
		void set_point_left_tangent(int index, float tangent) {
			ptr.godot_icall(bindings::id_Curve_set_point_left_tangent, index, tangent);
		}
		
		void set_point_right_tangent(int index, float tangent) {
			ptr.godot_icall(bindings::id_Curve_set_point_right_tangent, index, tangent);
		}
		
		void set_point_left_mode(int index, int mode) {
			ptr.godot_icall(bindings::id_Curve_set_point_left_mode, index, mode);
		}
		
		void set_point_right_mode(int index, int mode) {
			ptr.godot_icall(bindings::id_Curve_set_point_right_mode, index, mode);
		}
		
		float get_min_value() const {
			return ptr.godot_icall(bindings::id_Curve_get_min_value);
		}
		
		void set_min_value(float min) {
			ptr.godot_icall(bindings::id_Curve_set_min_value, min);
		}
		
		float get_max_value() const {
			return ptr.godot_icall(bindings::id_Curve_get_max_value);
		}
		
		void set_max_value(float max) {
			ptr.godot_icall(bindings::id_Curve_set_max_value, max);
		}
		
		void clean_dupes() {
			ptr.godot_icall(bindings::id_Curve_clean_dupes);
		}
		
		void bake() {
			ptr.godot_icall(bindings::id_Curve_bake);
		}
		
		int get_bake_resolution() const {
			return ptr.godot_icall(bindings::id_Curve_get_bake_resolution);
		}
		
		void set_bake_resolution(int resolution) {
			ptr.godot_icall(bindings::id_Curve_set_bake_resolution, resolution);
		}
		
		protected Array _get_data() const {
			return ptr.godot_icall(bindings::id_Curve__get_data);
		}
		
		protected void _set_data(const Array &in data) {
			ptr.godot_icall(bindings::id_Curve__set_data, data);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Curve)).ptr();
		}
		
	}
	
	class MeshDataTool : Reference {
		
		
		void clear() {
			ptr.godot_icall(bindings::id_MeshDataTool_clear);
		}
		
		int create_from_surface(ArrayMesh@ mesh, int surface) {
			return ptr.godot_icall(bindings::id_MeshDataTool_create_from_surface, mesh, surface);
		}
		
		int commit_to_surface(ArrayMesh@ mesh) {
			return ptr.godot_icall(bindings::id_MeshDataTool_commit_to_surface, mesh);
		}
		
		int get_format() const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_format);
		}
		
		int get_vertex_count() const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_vertex_count);
		}
		
		int get_edge_count() const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_edge_count);
		}
		
		int get_face_count() const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_face_count);
		}
		
		void set_vertex(int idx, const Vector3 &in vertex) {
			ptr.godot_icall(bindings::id_MeshDataTool_set_vertex, idx, vertex);
		}
		
		Vector3 get_vertex(int idx) const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_vertex, idx);
		}
		
		void set_vertex_normal(int idx, const Vector3 &in normal) {
			ptr.godot_icall(bindings::id_MeshDataTool_set_vertex_normal, idx, normal);
		}
		
		Vector3 get_vertex_normal(int idx) const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_vertex_normal, idx);
		}
		
		void set_vertex_tangent(int idx, const Plane &in tangent) {
			ptr.godot_icall(bindings::id_MeshDataTool_set_vertex_tangent, idx, tangent);
		}
		
		Plane get_vertex_tangent(int idx) const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_vertex_tangent, idx);
		}
		
		void set_vertex_uv(int idx, const Vector2 &in uv) {
			ptr.godot_icall(bindings::id_MeshDataTool_set_vertex_uv, idx, uv);
		}
		
		Vector2 get_vertex_uv(int idx) const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_vertex_uv, idx);
		}
		
		void set_vertex_uv2(int idx, const Vector2 &in uv2) {
			ptr.godot_icall(bindings::id_MeshDataTool_set_vertex_uv2, idx, uv2);
		}
		
		Vector2 get_vertex_uv2(int idx) const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_vertex_uv2, idx);
		}
		
		void set_vertex_color(int idx, const Color &in color) {
			ptr.godot_icall(bindings::id_MeshDataTool_set_vertex_color, idx, color);
		}
		
		Color get_vertex_color(int idx) const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_vertex_color, idx);
		}
		
		void set_vertex_bones(int idx, const PoolIntArray &in bones) {
			ptr.godot_icall(bindings::id_MeshDataTool_set_vertex_bones, idx, bones);
		}
		
		PoolIntArray get_vertex_bones(int idx) const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_vertex_bones, idx);
		}
		
		void set_vertex_weights(int idx, const PoolRealArray &in weights) {
			ptr.godot_icall(bindings::id_MeshDataTool_set_vertex_weights, idx, weights);
		}
		
		PoolRealArray get_vertex_weights(int idx) const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_vertex_weights, idx);
		}
		
		void set_vertex_meta(int idx, const Variant &in meta) {
			ptr.godot_icall(bindings::id_MeshDataTool_set_vertex_meta, idx, meta);
		}
		
		Variant get_vertex_meta(int idx) const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_vertex_meta, idx);
		}
		
		PoolIntArray get_vertex_edges(int idx) const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_vertex_edges, idx);
		}
		
		PoolIntArray get_vertex_faces(int idx) const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_vertex_faces, idx);
		}
		
		int get_edge_vertex(int idx, int vertex) const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_edge_vertex, idx, vertex);
		}
		
		PoolIntArray get_edge_faces(int idx) const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_edge_faces, idx);
		}
		
		void set_edge_meta(int idx, const Variant &in meta) {
			ptr.godot_icall(bindings::id_MeshDataTool_set_edge_meta, idx, meta);
		}
		
		Variant get_edge_meta(int idx) const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_edge_meta, idx);
		}
		
		int get_face_vertex(int idx, int vertex) const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_face_vertex, idx, vertex);
		}
		
		int get_face_edge(int idx, int edge) const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_face_edge, idx, edge);
		}
		
		void set_face_meta(int idx, const Variant &in meta) {
			ptr.godot_icall(bindings::id_MeshDataTool_set_face_meta, idx, meta);
		}
		
		Variant get_face_meta(int idx) const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_face_meta, idx);
		}
		
		Vector3 get_face_normal(int idx) const {
			return ptr.godot_icall(bindings::id_MeshDataTool_get_face_normal, idx);
		}
		
		void set_material(Material@ material) {
			ptr.godot_icall(bindings::id_MeshDataTool_set_material, material);
		}
		
		Material@ get_material() const {
			Material ret = ptr.godot_icall(bindings::id_MeshDataTool_get_material);
			return  ret;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_MeshDataTool)).ptr();
		}
		
	}
	
	class AudioEffectReverb : AudioEffect {
		
		
		void set_predelay_msec(float msec) {
			ptr.godot_icall(bindings::id_AudioEffectReverb_set_predelay_msec, msec);
		}
		
		float get_predelay_msec() const {
			return ptr.godot_icall(bindings::id_AudioEffectReverb_get_predelay_msec);
		}
		
		void set_predelay_feedback(float feedback) {
			ptr.godot_icall(bindings::id_AudioEffectReverb_set_predelay_feedback, feedback);
		}
		
		float get_predelay_feedback() const {
			return ptr.godot_icall(bindings::id_AudioEffectReverb_get_predelay_feedback);
		}
		
		void set_room_size(float size) {
			ptr.godot_icall(bindings::id_AudioEffectReverb_set_room_size, size);
		}
		
		float get_room_size() const {
			return ptr.godot_icall(bindings::id_AudioEffectReverb_get_room_size);
		}
		
		void set_damping(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectReverb_set_damping, amount);
		}
		
		float get_damping() const {
			return ptr.godot_icall(bindings::id_AudioEffectReverb_get_damping);
		}
		
		void set_spread(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectReverb_set_spread, amount);
		}
		
		float get_spread() const {
			return ptr.godot_icall(bindings::id_AudioEffectReverb_get_spread);
		}
		
		void set_dry(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectReverb_set_dry, amount);
		}
		
		float get_dry() const {
			return ptr.godot_icall(bindings::id_AudioEffectReverb_get_dry);
		}
		
		void set_wet(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectReverb_set_wet, amount);
		}
		
		float get_wet() const {
			return ptr.godot_icall(bindings::id_AudioEffectReverb_get_wet);
		}
		
		void set_hpf(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectReverb_set_hpf, amount);
		}
		
		float get_hpf() const {
			return ptr.godot_icall(bindings::id_AudioEffectReverb_get_hpf);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectReverb)).ptr();
		}
		
	}
	
	class Skeleton : Spatial {
		
		
		void add_bone(const String &in name) {
			ptr.godot_icall(bindings::id_Skeleton_add_bone, name);
		}
		
		int find_bone(const String &in name) const {
			return ptr.godot_icall(bindings::id_Skeleton_find_bone, name);
		}
		
		String get_bone_name(int bone_idx) const {
			return ptr.godot_icall(bindings::id_Skeleton_get_bone_name, bone_idx);
		}
		
		int get_bone_parent(int bone_idx) const {
			return ptr.godot_icall(bindings::id_Skeleton_get_bone_parent, bone_idx);
		}
		
		void set_bone_parent(int bone_idx, int parent_idx) {
			ptr.godot_icall(bindings::id_Skeleton_set_bone_parent, bone_idx, parent_idx);
		}
		
		int get_bone_count() const {
			return ptr.godot_icall(bindings::id_Skeleton_get_bone_count);
		}
		
		void unparent_bone_and_rest(int bone_idx) {
			ptr.godot_icall(bindings::id_Skeleton_unparent_bone_and_rest, bone_idx);
		}
		
		Transform get_bone_rest(int bone_idx) const {
			return ptr.godot_icall(bindings::id_Skeleton_get_bone_rest, bone_idx);
		}
		
		void set_bone_rest(int bone_idx, const Transform &in rest) {
			ptr.godot_icall(bindings::id_Skeleton_set_bone_rest, bone_idx, rest);
		}
		
		void set_bone_disable_rest(int bone_idx, bool disable) {
			ptr.godot_icall(bindings::id_Skeleton_set_bone_disable_rest, bone_idx, disable);
		}
		
		bool is_bone_rest_disabled(int bone_idx) const {
			return ptr.godot_icall(bindings::id_Skeleton_is_bone_rest_disabled, bone_idx);
		}
		
		void bind_child_node_to_bone(int bone_idx, Node@ node) {
			ptr.godot_icall(bindings::id_Skeleton_bind_child_node_to_bone, bone_idx, node);
		}
		
		void unbind_child_node_from_bone(int bone_idx, Node@ node) {
			ptr.godot_icall(bindings::id_Skeleton_unbind_child_node_from_bone, bone_idx, node);
		}
		
		Array get_bound_child_nodes_to_bone(int bone_idx) const {
			return ptr.godot_icall(bindings::id_Skeleton_get_bound_child_nodes_to_bone, bone_idx);
		}
		
		void clear_bones() {
			ptr.godot_icall(bindings::id_Skeleton_clear_bones);
		}
		
		Transform get_bone_pose(int bone_idx) const {
			return ptr.godot_icall(bindings::id_Skeleton_get_bone_pose, bone_idx);
		}
		
		void set_bone_pose(int bone_idx, const Transform &in pose) {
			ptr.godot_icall(bindings::id_Skeleton_set_bone_pose, bone_idx, pose);
		}
		
		void set_bone_global_pose(int bone_idx, const Transform &in pose) {
			ptr.godot_icall(bindings::id_Skeleton_set_bone_global_pose, bone_idx, pose);
		}
		
		Transform get_bone_global_pose(int bone_idx) const {
			return ptr.godot_icall(bindings::id_Skeleton_get_bone_global_pose, bone_idx);
		}
		
		Transform get_bone_custom_pose(int bone_idx) const {
			return ptr.godot_icall(bindings::id_Skeleton_get_bone_custom_pose, bone_idx);
		}
		
		void set_bone_custom_pose(int bone_idx, const Transform &in custom_pose) {
			ptr.godot_icall(bindings::id_Skeleton_set_bone_custom_pose, bone_idx, custom_pose);
		}
		
		Transform get_bone_transform(int bone_idx) const {
			return ptr.godot_icall(bindings::id_Skeleton_get_bone_transform, bone_idx);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Skeleton);
		}
		
	}
	
	class VideoStreamTheora : VideoStream {
		
		
		void set_file(const String &in file) {
			ptr.godot_icall(bindings::id_VideoStreamTheora_set_file, file);
		}
		
		String get_file() {
			return ptr.godot_icall(bindings::id_VideoStreamTheora_get_file);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VideoStreamTheora)).ptr();
		}
		
	}
	
	class Navigation2D : Node2D {
		
		
		int navpoly_add(NavigationPolygon@ mesh, const Transform2D &in xform, Object@ owner) {
			return ptr.godot_icall(bindings::id_Navigation2D_navpoly_add, mesh, xform, owner);
		}
		
		void navpoly_set_transform(int id, const Transform2D &in xform) {
			ptr.godot_icall(bindings::id_Navigation2D_navpoly_set_transform, id, xform);
		}
		
		void navpoly_remove(int id) {
			ptr.godot_icall(bindings::id_Navigation2D_navpoly_remove, id);
		}
		
		PoolVector2Array get_simple_path(const Vector2 &in start, const Vector2 &in end, bool optimize) {
			return ptr.godot_icall(bindings::id_Navigation2D_get_simple_path, start, end, optimize);
		}
		
		Vector2 get_closest_point(const Vector2 &in to_point) {
			return ptr.godot_icall(bindings::id_Navigation2D_get_closest_point, to_point);
		}
		
		Object@ get_closest_point_owner(const Vector2 &in to_point) {
			Object ret = ptr.godot_icall(bindings::id_Navigation2D_get_closest_point_owner, to_point);
			return  ret;
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Navigation2D);
		}
		
	}
	
	class AtlasTexture : Texture {
		
		
		void set_atlas(Texture@ atlas) {
			ptr.godot_icall(bindings::id_AtlasTexture_set_atlas, atlas);
		}
		
		Texture@ get_atlas() const {
			Texture ret = ptr.godot_icall(bindings::id_AtlasTexture_get_atlas);
			return  ret;
		}
		
		void set_region(const Rect2 &in region) {
			ptr.godot_icall(bindings::id_AtlasTexture_set_region, region);
		}
		
		Rect2 get_region() const {
			return ptr.godot_icall(bindings::id_AtlasTexture_get_region);
		}
		
		void set_margin(const Rect2 &in margin) {
			ptr.godot_icall(bindings::id_AtlasTexture_set_margin, margin);
		}
		
		Rect2 get_margin() const {
			return ptr.godot_icall(bindings::id_AtlasTexture_get_margin);
		}
		
		void set_filter_clip(bool enable) {
			ptr.godot_icall(bindings::id_AtlasTexture_set_filter_clip, enable);
		}
		
		bool has_filter_clip() const {
			return ptr.godot_icall(bindings::id_AtlasTexture_has_filter_clip);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AtlasTexture)).ptr();
		}
		
	}
	
	class PrimitiveMesh : Mesh {
		
		
		protected void _update() const {
			ptr.godot_icall(bindings::id_PrimitiveMesh__update);
		}
		
		void set_material(Material@ material) {
			ptr.godot_icall(bindings::id_PrimitiveMesh_set_material, material);
		}
		
		Material@ get_material() const {
			Material ret = ptr.godot_icall(bindings::id_PrimitiveMesh_get_material);
			return  ret;
		}
		
		Array get_mesh_arrays() const {
			return ptr.godot_icall(bindings::id_PrimitiveMesh_get_mesh_arrays);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_PrimitiveMesh)).ptr();
		}
		
	}
	
	class BackBufferCopy : Node2D {
		
		
		void set_rect(const Rect2 &in rect) {
			ptr.godot_icall(bindings::id_BackBufferCopy_set_rect, rect);
		}
		
		Rect2 get_rect() const {
			return ptr.godot_icall(bindings::id_BackBufferCopy_get_rect);
		}
		
		void set_copy_mode(int copy_mode) {
			ptr.godot_icall(bindings::id_BackBufferCopy_set_copy_mode, copy_mode);
		}
		
		int get_copy_mode() const {
			return ptr.godot_icall(bindings::id_BackBufferCopy_get_copy_mode);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_BackBufferCopy);
		}
		
	}
	
	class Node : Object {
		
		
		protected void _process(float delta) {
			
		}
		
		protected void _physics_process(float delta) {
			
		}
		
		protected void _enter_tree() {
			
		}
		
		protected void _exit_tree() {
			
		}
		
		protected void _ready() {
			
		}
		
		protected void _input(InputEvent@ event) {
			
		}
		
		protected void _unhandled_input(InputEvent@ event) {
			
		}
		
		protected void _unhandled_key_input(InputEventKey@ event) {
			
		}
		
		void add_child_below_node(Node@ node, Node@ child_node, bool legible_unique_name) {
			ptr.godot_icall(bindings::id_Node_add_child_below_node, node, child_node, legible_unique_name);
		}
		
		void set_name(const String &in name) {
			ptr.godot_icall(bindings::id_Node_set_name, name);
		}
		
		String get_name() const {
			return ptr.godot_icall(bindings::id_Node_get_name);
		}
		
		void add_child(Node@ node, bool legible_unique_name) {
			ptr.godot_icall(bindings::id_Node_add_child, node, legible_unique_name);
		}
		
		void remove_child(Node@ node) {
			ptr.godot_icall(bindings::id_Node_remove_child, node);
		}
		
		int get_child_count() const {
			return ptr.godot_icall(bindings::id_Node_get_child_count);
		}
		
		Array get_children() const {
			return ptr.godot_icall(bindings::id_Node_get_children);
		}
		
		Node@ get_child(int idx) const {
			Node ret = ptr.godot_icall(bindings::id_Node_get_child, idx);
			return  ret;
		}
		
		bool has_node(const NodePath &in path) const {
			return ptr.godot_icall(bindings::id_Node_has_node, path);
		}
		
		Node@ get_node(const NodePath &in path) const {
			Node ret = ptr.godot_icall(bindings::id_Node_get_node, path);
			return  ret;
		}
		
		Node@ get_parent() const {
			Node ret = ptr.godot_icall(bindings::id_Node_get_parent);
			return  ret;
		}
		
		Node@ find_node(const String &in mask, bool recursive, bool owned) const {
			Node ret = ptr.godot_icall(bindings::id_Node_find_node, mask, recursive, owned);
			return  ret;
		}
		
		bool has_node_and_resource(const NodePath &in path) const {
			return ptr.godot_icall(bindings::id_Node_has_node_and_resource, path);
		}
		
		Array get_node_and_resource(const NodePath &in path) {
			return ptr.godot_icall(bindings::id_Node_get_node_and_resource, path);
		}
		
		bool is_inside_tree() const {
			return ptr.godot_icall(bindings::id_Node_is_inside_tree);
		}
		
		bool is_a_parent_of(Node@ node) const {
			return ptr.godot_icall(bindings::id_Node_is_a_parent_of, node);
		}
		
		bool is_greater_than(Node@ node) const {
			return ptr.godot_icall(bindings::id_Node_is_greater_than, node);
		}
		
		NodePath get_path() const {
			return ptr.godot_icall(bindings::id_Node_get_path);
		}
		
		NodePath get_path_to(Node@ node) const {
			return ptr.godot_icall(bindings::id_Node_get_path_to, node);
		}
		
		void add_to_group(const String &in group, bool persistent) {
			ptr.godot_icall(bindings::id_Node_add_to_group, group, persistent);
		}
		
		void remove_from_group(const String &in group) {
			ptr.godot_icall(bindings::id_Node_remove_from_group, group);
		}
		
		bool is_in_group(const String &in group) const {
			return ptr.godot_icall(bindings::id_Node_is_in_group, group);
		}
		
		void move_child(Node@ child_node, int to_position) {
			ptr.godot_icall(bindings::id_Node_move_child, child_node, to_position);
		}
		
		Array get_groups() const {
			return ptr.godot_icall(bindings::id_Node_get_groups);
		}
		
		void raise() {
			ptr.godot_icall(bindings::id_Node_raise);
		}
		
		void set_owner(Node@ owner) {
			ptr.godot_icall(bindings::id_Node_set_owner, owner);
		}
		
		Node@ get_owner() const {
			Node ret = ptr.godot_icall(bindings::id_Node_get_owner);
			return  ret;
		}
		
		void remove_and_skip() {
			ptr.godot_icall(bindings::id_Node_remove_and_skip);
		}
		
		int get_index() const {
			return ptr.godot_icall(bindings::id_Node_get_index);
		}
		
		void print_tree() {
			ptr.godot_icall(bindings::id_Node_print_tree);
		}
		
		void set_filename(const String &in filename) {
			ptr.godot_icall(bindings::id_Node_set_filename, filename);
		}
		
		String get_filename() const {
			return ptr.godot_icall(bindings::id_Node_get_filename);
		}
		
		void propagate_notification(int what) {
			ptr.godot_icall(bindings::id_Node_propagate_notification, what);
		}
		
		void propagate_call(const String &in method, const Array &in args, bool parent_first) {
			ptr.godot_icall(bindings::id_Node_propagate_call, method, args, parent_first);
		}
		
		void set_physics_process(bool enable) {
			ptr.godot_icall(bindings::id_Node_set_physics_process, enable);
		}
		
		float get_physics_process_delta_time() const {
			return ptr.godot_icall(bindings::id_Node_get_physics_process_delta_time);
		}
		
		bool is_physics_processing() const {
			return ptr.godot_icall(bindings::id_Node_is_physics_processing);
		}
		
		float get_process_delta_time() const {
			return ptr.godot_icall(bindings::id_Node_get_process_delta_time);
		}
		
		void set_process(bool enable) {
			ptr.godot_icall(bindings::id_Node_set_process, enable);
		}
		
		bool is_processing() const {
			return ptr.godot_icall(bindings::id_Node_is_processing);
		}
		
		void set_process_input(bool enable) {
			ptr.godot_icall(bindings::id_Node_set_process_input, enable);
		}
		
		bool is_processing_input() const {
			return ptr.godot_icall(bindings::id_Node_is_processing_input);
		}
		
		void set_process_unhandled_input(bool enable) {
			ptr.godot_icall(bindings::id_Node_set_process_unhandled_input, enable);
		}
		
		bool is_processing_unhandled_input() const {
			return ptr.godot_icall(bindings::id_Node_is_processing_unhandled_input);
		}
		
		void set_process_unhandled_key_input(bool enable) {
			ptr.godot_icall(bindings::id_Node_set_process_unhandled_key_input, enable);
		}
		
		bool is_processing_unhandled_key_input() const {
			return ptr.godot_icall(bindings::id_Node_is_processing_unhandled_key_input);
		}
		
		void set_pause_mode(int mode) {
			ptr.godot_icall(bindings::id_Node_set_pause_mode, mode);
		}
		
		int get_pause_mode() const {
			return ptr.godot_icall(bindings::id_Node_get_pause_mode);
		}
		
		bool can_process() const {
			return ptr.godot_icall(bindings::id_Node_can_process);
		}
		
		void print_stray_nodes() {
			ptr.godot_icall(bindings::id_Node_print_stray_nodes);
		}
		
		int get_position_in_parent() const {
			return ptr.godot_icall(bindings::id_Node_get_position_in_parent);
		}
		
		void set_display_folded(bool fold) {
			ptr.godot_icall(bindings::id_Node_set_display_folded, fold);
		}
		
		bool is_displayed_folded() const {
			return ptr.godot_icall(bindings::id_Node_is_displayed_folded);
		}
		
		void set_process_internal(bool enable) {
			ptr.godot_icall(bindings::id_Node_set_process_internal, enable);
		}
		
		bool is_processing_internal() const {
			return ptr.godot_icall(bindings::id_Node_is_processing_internal);
		}
		
		void set_physics_process_internal(bool enable) {
			ptr.godot_icall(bindings::id_Node_set_physics_process_internal, enable);
		}
		
		bool is_physics_processing_internal() const {
			return ptr.godot_icall(bindings::id_Node_is_physics_processing_internal);
		}
		
		SceneTree@ get_tree() const {
			SceneTree ret = ptr.godot_icall(bindings::id_Node_get_tree);
			return  ret;
		}
		
		Node@ duplicate(int flags) const {
			Node ret = ptr.godot_icall(bindings::id_Node_duplicate, flags);
			return  ret;
		}
		
		void replace_by(Node@ node, bool keep_data) {
			ptr.godot_icall(bindings::id_Node_replace_by, node, keep_data);
		}
		
		void set_scene_instance_load_placeholder(bool load_placeholder) {
			ptr.godot_icall(bindings::id_Node_set_scene_instance_load_placeholder, load_placeholder);
		}
		
		bool get_scene_instance_load_placeholder() const {
			return ptr.godot_icall(bindings::id_Node_get_scene_instance_load_placeholder);
		}
		
		Viewport@ get_viewport() const {
			Viewport ret = ptr.godot_icall(bindings::id_Node_get_viewport);
			return  ret;
		}
		
		void queue_free() {
			ptr.godot_icall(bindings::id_Node_queue_free);
		}
		
		void request_ready() {
			ptr.godot_icall(bindings::id_Node_request_ready);
		}
		
		void set_network_master(int id, bool recursive) {
			ptr.godot_icall(bindings::id_Node_set_network_master, id, recursive);
		}
		
		int get_network_master() const {
			return ptr.godot_icall(bindings::id_Node_get_network_master);
		}
		
		bool is_network_master() const {
			return ptr.godot_icall(bindings::id_Node_is_network_master);
		}
		
		void rpc_config(const String &in method, int mode) {
			ptr.godot_icall(bindings::id_Node_rpc_config, method, mode);
		}
		
		void rset_config(const String &in property, int mode) {
			ptr.godot_icall(bindings::id_Node_rset_config, property, mode);
		}
		
		protected void _set_import_path(const NodePath &in import_path) {
			ptr.godot_icall(bindings::id_Node__set_import_path, import_path);
		}
		
		protected NodePath _get_import_path() const {
			return ptr.godot_icall(bindings::id_Node__get_import_path);
		}
		
		Variant rpc(const String &in method) {
			return ptr.godot_icall(bindings::id_Node_rpc, method);
		}
		
		Variant rpc_unreliable(const String &in method) {
			return ptr.godot_icall(bindings::id_Node_rpc_unreliable, method);
		}
		
		Variant rpc_id(int peer_id, const String &in method) {
			return ptr.godot_icall(bindings::id_Node_rpc_id, peer_id, method);
		}
		
		Variant rpc_unreliable_id(int peer_id, const String &in method) {
			return ptr.godot_icall(bindings::id_Node_rpc_unreliable_id, peer_id, method);
		}
		
		void rset(const String &in property, const Variant &in value) {
			ptr.godot_icall(bindings::id_Node_rset, property, value);
		}
		
		void rset_id(int peer_id, const String &in property, const Variant &in value) {
			ptr.godot_icall(bindings::id_Node_rset_id, peer_id, property, value);
		}
		
		void rset_unreliable(const String &in property, const Variant &in value) {
			ptr.godot_icall(bindings::id_Node_rset_unreliable, property, value);
		}
		
		void rset_unreliable_id(int peer_id, const String &in property, const Variant &in value) {
			ptr.godot_icall(bindings::id_Node_rset_unreliable_id, peer_id, property, value);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Node);
		}
		
	}
	
	class _Marshalls : Reference {
		
		
		String variant_to_base64(const Variant &in variant) {
			return ptr.godot_icall(bindings::id__Marshalls_variant_to_base64, variant);
		}
		
		Variant base64_to_variant(const String &in base64_str) {
			return ptr.godot_icall(bindings::id__Marshalls_base64_to_variant, base64_str);
		}
		
		String raw_to_base64(const PoolByteArray &in array) {
			return ptr.godot_icall(bindings::id__Marshalls_raw_to_base64, array);
		}
		
		PoolByteArray base64_to_raw(const String &in base64_str) {
			return ptr.godot_icall(bindings::id__Marshalls_base64_to_raw, base64_str);
		}
		
		String utf8_to_base64(const String &in utf8_str) {
			return ptr.godot_icall(bindings::id__Marshalls_utf8_to_base64, utf8_str);
		}
		
		String base64_to_utf8(const String &in base64_str) {
			return ptr.godot_icall(bindings::id__Marshalls_base64_to_utf8, base64_str);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id__Marshalls)).ptr();
		}
		
	}
	
	class TranslationServer : Object {
		
		
		void set_locale(const String &in locale) {
			ptr.godot_icall(bindings::id_TranslationServer_set_locale, locale);
		}
		
		String get_locale() const {
			return ptr.godot_icall(bindings::id_TranslationServer_get_locale);
		}
		
		String get_locale_name(const String &in locale) const {
			return ptr.godot_icall(bindings::id_TranslationServer_get_locale_name, locale);
		}
		
		String translate(const String &in message) const {
			return ptr.godot_icall(bindings::id_TranslationServer_translate, message);
		}
		
		void add_translation(Translation@ translation) {
			ptr.godot_icall(bindings::id_TranslationServer_add_translation, translation);
		}
		
		void remove_translation(Translation@ translation) {
			ptr.godot_icall(bindings::id_TranslationServer_remove_translation, translation);
		}
		
		void clear() {
			ptr.godot_icall(bindings::id_TranslationServer_clear);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_TranslationServer);
		}
		
	}
	
	class TextureProgress : Range {
		
		
		void set_under_texture(Texture@ tex) {
			ptr.godot_icall(bindings::id_TextureProgress_set_under_texture, tex);
		}
		
		Texture@ get_under_texture() const {
			Texture ret = ptr.godot_icall(bindings::id_TextureProgress_get_under_texture);
			return  ret;
		}
		
		void set_progress_texture(Texture@ tex) {
			ptr.godot_icall(bindings::id_TextureProgress_set_progress_texture, tex);
		}
		
		Texture@ get_progress_texture() const {
			Texture ret = ptr.godot_icall(bindings::id_TextureProgress_get_progress_texture);
			return  ret;
		}
		
		void set_over_texture(Texture@ tex) {
			ptr.godot_icall(bindings::id_TextureProgress_set_over_texture, tex);
		}
		
		Texture@ get_over_texture() const {
			Texture ret = ptr.godot_icall(bindings::id_TextureProgress_get_over_texture);
			return  ret;
		}
		
		void set_fill_mode(int mode) {
			ptr.godot_icall(bindings::id_TextureProgress_set_fill_mode, mode);
		}
		
		int get_fill_mode() {
			return ptr.godot_icall(bindings::id_TextureProgress_get_fill_mode);
		}
		
		void set_radial_initial_angle(float mode) {
			ptr.godot_icall(bindings::id_TextureProgress_set_radial_initial_angle, mode);
		}
		
		float get_radial_initial_angle() {
			return ptr.godot_icall(bindings::id_TextureProgress_get_radial_initial_angle);
		}
		
		void set_radial_center_offset(const Vector2 &in mode) {
			ptr.godot_icall(bindings::id_TextureProgress_set_radial_center_offset, mode);
		}
		
		Vector2 get_radial_center_offset() {
			return ptr.godot_icall(bindings::id_TextureProgress_get_radial_center_offset);
		}
		
		void set_fill_degrees(float mode) {
			ptr.godot_icall(bindings::id_TextureProgress_set_fill_degrees, mode);
		}
		
		float get_fill_degrees() {
			return ptr.godot_icall(bindings::id_TextureProgress_get_fill_degrees);
		}
		
		void set_stretch_margin(int margin, int value) {
			ptr.godot_icall(bindings::id_TextureProgress_set_stretch_margin, margin, value);
		}
		
		int get_stretch_margin(int margin) const {
			return ptr.godot_icall(bindings::id_TextureProgress_get_stretch_margin, margin);
		}
		
		void set_nine_patch_stretch(bool stretch) {
			ptr.godot_icall(bindings::id_TextureProgress_set_nine_patch_stretch, stretch);
		}
		
		bool get_nine_patch_stretch() const {
			return ptr.godot_icall(bindings::id_TextureProgress_get_nine_patch_stretch);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_TextureProgress);
		}
		
	}
	
	class DirectionalLight : Light {
		
		
		void set_shadow_mode(int mode) {
			ptr.godot_icall(bindings::id_DirectionalLight_set_shadow_mode, mode);
		}
		
		int get_shadow_mode() const {
			return ptr.godot_icall(bindings::id_DirectionalLight_get_shadow_mode);
		}
		
		void set_shadow_depth_range(int mode) {
			ptr.godot_icall(bindings::id_DirectionalLight_set_shadow_depth_range, mode);
		}
		
		int get_shadow_depth_range() const {
			return ptr.godot_icall(bindings::id_DirectionalLight_get_shadow_depth_range);
		}
		
		void set_blend_splits(bool enabled) {
			ptr.godot_icall(bindings::id_DirectionalLight_set_blend_splits, enabled);
		}
		
		bool is_blend_splits_enabled() const {
			return ptr.godot_icall(bindings::id_DirectionalLight_is_blend_splits_enabled);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_DirectionalLight);
		}
		
	}
	
	class VisualScriptSceneTree : VisualScriptNode {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptSceneTree)).ptr();
		}
		
	}
	
	class GDScriptFunctionState : Reference {
		
		
		Variant resume(const Variant &in arg) {
			return ptr.godot_icall(bindings::id_GDScriptFunctionState_resume, arg);
		}
		
		bool is_valid(bool extended_check) const {
			return ptr.godot_icall(bindings::id_GDScriptFunctionState_is_valid, extended_check);
		}
		
		protected Variant _signal_callback() {
			return ptr.godot_icall(bindings::id_GDScriptFunctionState__signal_callback);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_GDScriptFunctionState)).ptr();
		}
		
	}
	
	class TexturePacker : Reference {
		
		
		void set_packer(RectangleBinPack@ p_packer) {
			ptr.godot_icall(bindings::id_TexturePacker_set_packer, p_packer);
		}
		
		RectangleBinPack@ get_packer() const {
			RectangleBinPack ret = ptr.godot_icall(bindings::id_TexturePacker_get_packer);
			return  ret;
		}
		
		void set_pack_config(TexturePackerConfig@ p_config) {
			ptr.godot_icall(bindings::id_TexturePacker_set_pack_config, p_config);
		}
		
		TexturePackerConfig@ get_pack_config() const {
			TexturePackerConfig ret = ptr.godot_icall(bindings::id_TexturePacker_get_pack_config);
			return  ret;
		}
		
		Array get_packed_pages() const {
			return ptr.godot_icall(bindings::id_TexturePacker_get_packed_pages);
		}
		
		int pack() {
			return ptr.godot_icall(bindings::id_TexturePacker_pack);
		}
		
		Image@ trim(Image@ p_image) {
			Image ret = ptr.godot_icall(bindings::id_TexturePacker_trim, p_image);
			return  ret;
		}
		
		Image@ load_image(const String &in p_path) {
			Image ret = ptr.godot_icall(bindings::id_TexturePacker_load_image, p_path);
			return  ret;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_TexturePacker)).ptr();
		}
		
	}
	
	class Shape2D : Resource {
		
		
		void set_custom_solver_bias(float bias) {
			ptr.godot_icall(bindings::id_Shape2D_set_custom_solver_bias, bias);
		}
		
		float get_custom_solver_bias() const {
			return ptr.godot_icall(bindings::id_Shape2D_get_custom_solver_bias);
		}
		
		bool collide(const Transform2D &in local_xform, Shape2D@ with_shape, const Transform2D &in shape_xform) {
			return ptr.godot_icall(bindings::id_Shape2D_collide, local_xform, with_shape, shape_xform);
		}
		
		bool collide_with_motion(const Transform2D &in local_xform, const Vector2 &in local_motion, Shape2D@ with_shape, const Transform2D &in shape_xform, const Vector2 &in shape_motion) {
			return ptr.godot_icall(bindings::id_Shape2D_collide_with_motion, local_xform, local_motion, with_shape, shape_xform, shape_motion);
		}
		
		Variant collide_and_get_contacts(const Transform2D &in local_xform, Shape2D@ with_shape, const Transform2D &in shape_xform) {
			return ptr.godot_icall(bindings::id_Shape2D_collide_and_get_contacts, local_xform, with_shape, shape_xform);
		}
		
		Variant collide_with_motion_and_get_contacts(const Transform2D &in local_xform, const Vector2 &in local_motion, Shape2D@ with_shape, const Transform2D &in shape_xform, const Vector2 &in shape_motion) {
			return ptr.godot_icall(bindings::id_Shape2D_collide_with_motion_and_get_contacts, local_xform, local_motion, with_shape, shape_xform, shape_motion);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Shape2D)).ptr();
		}
		
	}
	
	class CylinderMesh : PrimitiveMesh {
		
		
		void set_top_radius(float radius) {
			ptr.godot_icall(bindings::id_CylinderMesh_set_top_radius, radius);
		}
		
		float get_top_radius() const {
			return ptr.godot_icall(bindings::id_CylinderMesh_get_top_radius);
		}
		
		void set_bottom_radius(float radius) {
			ptr.godot_icall(bindings::id_CylinderMesh_set_bottom_radius, radius);
		}
		
		float get_bottom_radius() const {
			return ptr.godot_icall(bindings::id_CylinderMesh_get_bottom_radius);
		}
		
		void set_height(float height) {
			ptr.godot_icall(bindings::id_CylinderMesh_set_height, height);
		}
		
		float get_height() const {
			return ptr.godot_icall(bindings::id_CylinderMesh_get_height);
		}
		
		void set_radial_segments(int segments) {
			ptr.godot_icall(bindings::id_CylinderMesh_set_radial_segments, segments);
		}
		
		int get_radial_segments() const {
			return ptr.godot_icall(bindings::id_CylinderMesh_get_radial_segments);
		}
		
		void set_rings(int rings) {
			ptr.godot_icall(bindings::id_CylinderMesh_set_rings, rings);
		}
		
		int get_rings() const {
			return ptr.godot_icall(bindings::id_CylinderMesh_get_rings);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_CylinderMesh)).ptr();
		}
		
	}
	
	class PhysicsBody2D : CollisionObject2D {
		
		
		void set_collision_layer(int layer) {
			ptr.godot_icall(bindings::id_PhysicsBody2D_set_collision_layer, layer);
		}
		
		int get_collision_layer() const {
			return ptr.godot_icall(bindings::id_PhysicsBody2D_get_collision_layer);
		}
		
		void set_collision_mask(int mask) {
			ptr.godot_icall(bindings::id_PhysicsBody2D_set_collision_mask, mask);
		}
		
		int get_collision_mask() const {
			return ptr.godot_icall(bindings::id_PhysicsBody2D_get_collision_mask);
		}
		
		void set_collision_mask_bit(int bit, bool value) {
			ptr.godot_icall(bindings::id_PhysicsBody2D_set_collision_mask_bit, bit, value);
		}
		
		bool get_collision_mask_bit(int bit) const {
			return ptr.godot_icall(bindings::id_PhysicsBody2D_get_collision_mask_bit, bit);
		}
		
		void set_collision_layer_bit(int bit, bool value) {
			ptr.godot_icall(bindings::id_PhysicsBody2D_set_collision_layer_bit, bit, value);
		}
		
		bool get_collision_layer_bit(int bit) const {
			return ptr.godot_icall(bindings::id_PhysicsBody2D_get_collision_layer_bit, bit);
		}
		
		protected void _set_layers(int mask) {
			ptr.godot_icall(bindings::id_PhysicsBody2D__set_layers, mask);
		}
		
		protected int _get_layers() const {
			return ptr.godot_icall(bindings::id_PhysicsBody2D__get_layers);
		}
		
		void add_collision_exception_with(Node@ body) {
			ptr.godot_icall(bindings::id_PhysicsBody2D_add_collision_exception_with, body);
		}
		
		void remove_collision_exception_with(Node@ body) {
			ptr.godot_icall(bindings::id_PhysicsBody2D_remove_collision_exception_with, body);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_PhysicsBody2D);
		}
		
	}
	
	class CheckBox : Button {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_CheckBox);
		}
		
	}
	
	class VSeparator : Separator {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_VSeparator);
		}
		
	}
	
	class World : Resource {
		
		
		RID get_space() const {
			return ptr.godot_icall(bindings::id_World_get_space);
		}
		
		RID get_scenario() const {
			return ptr.godot_icall(bindings::id_World_get_scenario);
		}
		
		void set_environment(Environment@ env) {
			ptr.godot_icall(bindings::id_World_set_environment, env);
		}
		
		Environment@ get_environment() const {
			Environment ret = ptr.godot_icall(bindings::id_World_get_environment);
			return  ret;
		}
		
		void set_fallback_environment(Environment@ env) {
			ptr.godot_icall(bindings::id_World_set_fallback_environment, env);
		}
		
		Environment@ get_fallback_environment() const {
			Environment ret = ptr.godot_icall(bindings::id_World_get_fallback_environment);
			return  ret;
		}
		
		PhysicsDirectSpaceState@ get_direct_space_state() {
			PhysicsDirectSpaceState ret = ptr.godot_icall(bindings::id_World_get_direct_space_state);
			return  ret;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_World)).ptr();
		}
		
	}
	
	class ProjectSettings : Object {
		
		
		bool has_setting(const String &in name) const {
			return ptr.godot_icall(bindings::id_ProjectSettings_has_setting, name);
		}
		
		void set_setting(const String &in name, const Variant &in value) {
			ptr.godot_icall(bindings::id_ProjectSettings_set_setting, name, value);
		}
		
		Variant get_setting(const String &in name) const {
			return ptr.godot_icall(bindings::id_ProjectSettings_get_setting, name);
		}
		
		void set_order(const String &in name, int position) {
			ptr.godot_icall(bindings::id_ProjectSettings_set_order, name, position);
		}
		
		int get_order(const String &in name) const {
			return ptr.godot_icall(bindings::id_ProjectSettings_get_order, name);
		}
		
		void set_initial_value(const String &in name, const Variant &in value) {
			ptr.godot_icall(bindings::id_ProjectSettings_set_initial_value, name, value);
		}
		
		void add_property_info(const Dictionary &in hint) {
			ptr.godot_icall(bindings::id_ProjectSettings_add_property_info, hint);
		}
		
		void clear(const String &in name) {
			ptr.godot_icall(bindings::id_ProjectSettings_clear, name);
		}
		
		String localize_path(const String &in path) const {
			return ptr.godot_icall(bindings::id_ProjectSettings_localize_path, path);
		}
		
		String globalize_path(const String &in path) const {
			return ptr.godot_icall(bindings::id_ProjectSettings_globalize_path, path);
		}
		
		int save() {
			return ptr.godot_icall(bindings::id_ProjectSettings_save);
		}
		
		bool load_resource_pack(const String &in pack) {
			return ptr.godot_icall(bindings::id_ProjectSettings_load_resource_pack, pack);
		}
		
		bool property_can_revert(const String &in name) {
			return ptr.godot_icall(bindings::id_ProjectSettings_property_can_revert, name);
		}
		
		Variant property_get_revert(const String &in name) {
			return ptr.godot_icall(bindings::id_ProjectSettings_property_get_revert, name);
		}
		
		int save_custom(const String &in file) {
			return ptr.godot_icall(bindings::id_ProjectSettings_save_custom, file);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ProjectSettings);
		}
		
	}
	
	class NinePatchRect : Control {
		
		
		void set_texture(Texture@ texture) {
			ptr.godot_icall(bindings::id_NinePatchRect_set_texture, texture);
		}
		
		Texture@ get_texture() const {
			Texture ret = ptr.godot_icall(bindings::id_NinePatchRect_get_texture);
			return  ret;
		}
		
		void set_patch_margin(int margin, int value) {
			ptr.godot_icall(bindings::id_NinePatchRect_set_patch_margin, margin, value);
		}
		
		int get_patch_margin(int margin) const {
			return ptr.godot_icall(bindings::id_NinePatchRect_get_patch_margin, margin);
		}
		
		void set_region_rect(const Rect2 &in rect) {
			ptr.godot_icall(bindings::id_NinePatchRect_set_region_rect, rect);
		}
		
		Rect2 get_region_rect() const {
			return ptr.godot_icall(bindings::id_NinePatchRect_get_region_rect);
		}
		
		void set_draw_center(bool draw_center) {
			ptr.godot_icall(bindings::id_NinePatchRect_set_draw_center, draw_center);
		}
		
		bool is_draw_center_enabled() const {
			return ptr.godot_icall(bindings::id_NinePatchRect_is_draw_center_enabled);
		}
		
		void set_h_axis_stretch_mode(int mode) {
			ptr.godot_icall(bindings::id_NinePatchRect_set_h_axis_stretch_mode, mode);
		}
		
		int get_h_axis_stretch_mode() const {
			return ptr.godot_icall(bindings::id_NinePatchRect_get_h_axis_stretch_mode);
		}
		
		void set_v_axis_stretch_mode(int mode) {
			ptr.godot_icall(bindings::id_NinePatchRect_set_v_axis_stretch_mode, mode);
		}
		
		int get_v_axis_stretch_mode() const {
			return ptr.godot_icall(bindings::id_NinePatchRect_get_v_axis_stretch_mode);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_NinePatchRect);
		}
		
	}
	
	class WindowDialog : Popup {
		
		
		protected void _gui_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_WindowDialog__gui_input, arg0);
		}
		
		void set_title(const String &in title) {
			ptr.godot_icall(bindings::id_WindowDialog_set_title, title);
		}
		
		String get_title() const {
			return ptr.godot_icall(bindings::id_WindowDialog_get_title);
		}
		
		void set_resizable(bool resizable) {
			ptr.godot_icall(bindings::id_WindowDialog_set_resizable, resizable);
		}
		
		bool get_resizable() const {
			return ptr.godot_icall(bindings::id_WindowDialog_get_resizable);
		}
		
		protected void _closed() {
			ptr.godot_icall(bindings::id_WindowDialog__closed);
		}
		
		TextureButton@ get_close_button() {
			TextureButton ret = ptr.godot_icall(bindings::id_WindowDialog_get_close_button);
			return  ret;
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_WindowDialog);
		}
		
	}
	
	class GIProbe : VisualInstance {
		
		
		void set_probe_data(GIProbeData@ data) {
			ptr.godot_icall(bindings::id_GIProbe_set_probe_data, data);
		}
		
		GIProbeData@ get_probe_data() const {
			GIProbeData ret = ptr.godot_icall(bindings::id_GIProbe_get_probe_data);
			return  ret;
		}
		
		void set_subdiv(int subdiv) {
			ptr.godot_icall(bindings::id_GIProbe_set_subdiv, subdiv);
		}
		
		int get_subdiv() const {
			return ptr.godot_icall(bindings::id_GIProbe_get_subdiv);
		}
		
		void set_extents(const Vector3 &in extents) {
			ptr.godot_icall(bindings::id_GIProbe_set_extents, extents);
		}
		
		Vector3 get_extents() const {
			return ptr.godot_icall(bindings::id_GIProbe_get_extents);
		}
		
		void set_dynamic_range(int max) {
			ptr.godot_icall(bindings::id_GIProbe_set_dynamic_range, max);
		}
		
		int get_dynamic_range() const {
			return ptr.godot_icall(bindings::id_GIProbe_get_dynamic_range);
		}
		
		void set_energy(float max) {
			ptr.godot_icall(bindings::id_GIProbe_set_energy, max);
		}
		
		float get_energy() const {
			return ptr.godot_icall(bindings::id_GIProbe_get_energy);
		}
		
		void set_bias(float max) {
			ptr.godot_icall(bindings::id_GIProbe_set_bias, max);
		}
		
		float get_bias() const {
			return ptr.godot_icall(bindings::id_GIProbe_get_bias);
		}
		
		void set_normal_bias(float max) {
			ptr.godot_icall(bindings::id_GIProbe_set_normal_bias, max);
		}
		
		float get_normal_bias() const {
			return ptr.godot_icall(bindings::id_GIProbe_get_normal_bias);
		}
		
		void set_propagation(float max) {
			ptr.godot_icall(bindings::id_GIProbe_set_propagation, max);
		}
		
		float get_propagation() const {
			return ptr.godot_icall(bindings::id_GIProbe_get_propagation);
		}
		
		void set_interior(bool enable) {
			ptr.godot_icall(bindings::id_GIProbe_set_interior, enable);
		}
		
		bool is_interior() const {
			return ptr.godot_icall(bindings::id_GIProbe_is_interior);
		}
		
		void set_compress(bool enable) {
			ptr.godot_icall(bindings::id_GIProbe_set_compress, enable);
		}
		
		bool is_compressed() const {
			return ptr.godot_icall(bindings::id_GIProbe_is_compressed);
		}
		
		void bake(Node@ from_node, bool create_visual_debug) {
			ptr.godot_icall(bindings::id_GIProbe_bake, from_node, create_visual_debug);
		}
		
		void debug_bake() {
			ptr.godot_icall(bindings::id_GIProbe_debug_bake);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_GIProbe);
		}
		
	}
	
	class VisualScriptReturn : VisualScriptNode {
		
		
		void set_return_type(int type) {
			ptr.godot_icall(bindings::id_VisualScriptReturn_set_return_type, type);
		}
		
		int get_return_type() const {
			return ptr.godot_icall(bindings::id_VisualScriptReturn_get_return_type);
		}
		
		void set_enable_return_value(bool enable) {
			ptr.godot_icall(bindings::id_VisualScriptReturn_set_enable_return_value, enable);
		}
		
		bool is_return_value_enabled() const {
			return ptr.godot_icall(bindings::id_VisualScriptReturn_is_return_value_enabled);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptReturn)).ptr();
		}
		
	}
	
	class VisualScriptClassConstant : VisualScriptNode {
		
		
		void set_class_constant(const String &in name) {
			ptr.godot_icall(bindings::id_VisualScriptClassConstant_set_class_constant, name);
		}
		
		String get_class_constant() {
			return ptr.godot_icall(bindings::id_VisualScriptClassConstant_get_class_constant);
		}
		
		void set_base_type(const String &in name) {
			ptr.godot_icall(bindings::id_VisualScriptClassConstant_set_base_type, name);
		}
		
		String get_base_type() {
			return ptr.godot_icall(bindings::id_VisualScriptClassConstant_get_base_type);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptClassConstant)).ptr();
		}
		
	}
	
	class VisualScript : Script {
		
		
		protected void _node_ports_changed(int arg0) {
			ptr.godot_icall(bindings::id_VisualScript__node_ports_changed, arg0);
		}
		
		void add_function(const String &in name) {
			ptr.godot_icall(bindings::id_VisualScript_add_function, name);
		}
		
		bool has_function(const String &in name) const {
			return ptr.godot_icall(bindings::id_VisualScript_has_function, name);
		}
		
		void remove_function(const String &in name) {
			ptr.godot_icall(bindings::id_VisualScript_remove_function, name);
		}
		
		void rename_function(const String &in name, const String &in new_name) {
			ptr.godot_icall(bindings::id_VisualScript_rename_function, name, new_name);
		}
		
		void set_function_scroll(const String &in name, const Vector2 &in ofs) {
			ptr.godot_icall(bindings::id_VisualScript_set_function_scroll, name, ofs);
		}
		
		Vector2 get_function_scroll(const String &in name) const {
			return ptr.godot_icall(bindings::id_VisualScript_get_function_scroll, name);
		}
		
		void add_node(const String &in func, int id, VisualScriptNode@ node, const Vector2 &in position) {
			ptr.godot_icall(bindings::id_VisualScript_add_node, func, id, node, position);
		}
		
		void remove_node(const String &in func, int id) {
			ptr.godot_icall(bindings::id_VisualScript_remove_node, func, id);
		}
		
		int get_function_node_id(const String &in name) const {
			return ptr.godot_icall(bindings::id_VisualScript_get_function_node_id, name);
		}
		
		VisualScriptNode@ get_node(const String &in func, int id) const {
			VisualScriptNode ret = ptr.godot_icall(bindings::id_VisualScript_get_node, func, id);
			return  ret;
		}
		
		bool has_node(const String &in func, int id) const {
			return ptr.godot_icall(bindings::id_VisualScript_has_node, func, id);
		}
		
		void set_node_position(const String &in func, int id, const Vector2 &in position) {
			ptr.godot_icall(bindings::id_VisualScript_set_node_position, func, id, position);
		}
		
		Vector2 get_node_position(const String &in func, int id) const {
			return ptr.godot_icall(bindings::id_VisualScript_get_node_position, func, id);
		}
		
		void sequence_connect(const String &in func, int from_node, int from_output, int to_node) {
			ptr.godot_icall(bindings::id_VisualScript_sequence_connect, func, from_node, from_output, to_node);
		}
		
		void sequence_disconnect(const String &in func, int from_node, int from_output, int to_node) {
			ptr.godot_icall(bindings::id_VisualScript_sequence_disconnect, func, from_node, from_output, to_node);
		}
		
		bool has_sequence_connection(const String &in func, int from_node, int from_output, int to_node) const {
			return ptr.godot_icall(bindings::id_VisualScript_has_sequence_connection, func, from_node, from_output, to_node);
		}
		
		void data_connect(const String &in func, int from_node, int from_port, int to_node, int to_port) {
			ptr.godot_icall(bindings::id_VisualScript_data_connect, func, from_node, from_port, to_node, to_port);
		}
		
		void data_disconnect(const String &in func, int from_node, int from_port, int to_node, int to_port) {
			ptr.godot_icall(bindings::id_VisualScript_data_disconnect, func, from_node, from_port, to_node, to_port);
		}
		
		bool has_data_connection(const String &in func, int from_node, int from_port, int to_node, int to_port) const {
			return ptr.godot_icall(bindings::id_VisualScript_has_data_connection, func, from_node, from_port, to_node, to_port);
		}
		
		void add_variable(const String &in name, const Variant &in default_value, bool export) {
			ptr.godot_icall(bindings::id_VisualScript_add_variable, name, default_value, export);
		}
		
		bool has_variable(const String &in name) const {
			return ptr.godot_icall(bindings::id_VisualScript_has_variable, name);
		}
		
		void remove_variable(const String &in name) {
			ptr.godot_icall(bindings::id_VisualScript_remove_variable, name);
		}
		
		void set_variable_default_value(const String &in name, const Variant &in value) {
			ptr.godot_icall(bindings::id_VisualScript_set_variable_default_value, name, value);
		}
		
		Variant get_variable_default_value(const String &in name) const {
			return ptr.godot_icall(bindings::id_VisualScript_get_variable_default_value, name);
		}
		
		void set_variable_info(const String &in name, const Dictionary &in value) {
			ptr.godot_icall(bindings::id_VisualScript_set_variable_info, name, value);
		}
		
		Dictionary get_variable_info(const String &in name) const {
			return ptr.godot_icall(bindings::id_VisualScript_get_variable_info, name);
		}
		
		void set_variable_export(const String &in name, bool enable) {
			ptr.godot_icall(bindings::id_VisualScript_set_variable_export, name, enable);
		}
		
		bool get_variable_export(const String &in name) const {
			return ptr.godot_icall(bindings::id_VisualScript_get_variable_export, name);
		}
		
		void rename_variable(const String &in name, const String &in new_name) {
			ptr.godot_icall(bindings::id_VisualScript_rename_variable, name, new_name);
		}
		
		void add_custom_signal(const String &in name) {
			ptr.godot_icall(bindings::id_VisualScript_add_custom_signal, name);
		}
		
		bool has_custom_signal(const String &in name) const {
			return ptr.godot_icall(bindings::id_VisualScript_has_custom_signal, name);
		}
		
		void custom_signal_add_argument(const String &in name, int type, const String &in argname, int index) {
			ptr.godot_icall(bindings::id_VisualScript_custom_signal_add_argument, name, type, argname, index);
		}
		
		void custom_signal_set_argument_type(const String &in name, int argidx, int type) {
			ptr.godot_icall(bindings::id_VisualScript_custom_signal_set_argument_type, name, argidx, type);
		}
		
		int custom_signal_get_argument_type(const String &in name, int argidx) const {
			return ptr.godot_icall(bindings::id_VisualScript_custom_signal_get_argument_type, name, argidx);
		}
		
		void custom_signal_set_argument_name(const String &in name, int argidx, const String &in argname) {
			ptr.godot_icall(bindings::id_VisualScript_custom_signal_set_argument_name, name, argidx, argname);
		}
		
		String custom_signal_get_argument_name(const String &in name, int argidx) const {
			return ptr.godot_icall(bindings::id_VisualScript_custom_signal_get_argument_name, name, argidx);
		}
		
		void custom_signal_remove_argument(const String &in name, int argidx) {
			ptr.godot_icall(bindings::id_VisualScript_custom_signal_remove_argument, name, argidx);
		}
		
		int custom_signal_get_argument_count(const String &in name) const {
			return ptr.godot_icall(bindings::id_VisualScript_custom_signal_get_argument_count, name);
		}
		
		void custom_signal_swap_argument(const String &in name, int argidx, int withidx) {
			ptr.godot_icall(bindings::id_VisualScript_custom_signal_swap_argument, name, argidx, withidx);
		}
		
		void remove_custom_signal(const String &in name) {
			ptr.godot_icall(bindings::id_VisualScript_remove_custom_signal, name);
		}
		
		void rename_custom_signal(const String &in name, const String &in new_name) {
			ptr.godot_icall(bindings::id_VisualScript_rename_custom_signal, name, new_name);
		}
		
		void set_instance_base_type(const String &in type) {
			ptr.godot_icall(bindings::id_VisualScript_set_instance_base_type, type);
		}
		
		protected void _set_data(const Dictionary &in data) {
			ptr.godot_icall(bindings::id_VisualScript__set_data, data);
		}
		
		protected Dictionary _get_data() const {
			return ptr.godot_icall(bindings::id_VisualScript__get_data);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScript)).ptr();
		}
		
	}
	
	class StyleBoxEmpty : StyleBox {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_StyleBoxEmpty)).ptr();
		}
		
	}
	
	class SpatialVelocityTracker : Reference {
		
		
		void set_track_physics_step(bool enable) {
			ptr.godot_icall(bindings::id_SpatialVelocityTracker_set_track_physics_step, enable);
		}
		
		bool is_tracking_physics_step() const {
			return ptr.godot_icall(bindings::id_SpatialVelocityTracker_is_tracking_physics_step);
		}
		
		void update_position(const Vector3 &in position) {
			ptr.godot_icall(bindings::id_SpatialVelocityTracker_update_position, position);
		}
		
		Vector3 get_tracked_linear_velocity() const {
			return ptr.godot_icall(bindings::id_SpatialVelocityTracker_get_tracked_linear_velocity);
		}
		
		void reset(const Vector3 &in position) {
			ptr.godot_icall(bindings::id_SpatialVelocityTracker_reset, position);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_SpatialVelocityTracker)).ptr();
		}
		
	}
	
	class AudioServer : Object {
		
		
		void set_bus_count(int amount) {
			ptr.godot_icall(bindings::id_AudioServer_set_bus_count, amount);
		}
		
		int get_bus_count() const {
			return ptr.godot_icall(bindings::id_AudioServer_get_bus_count);
		}
		
		void remove_bus(int index) {
			ptr.godot_icall(bindings::id_AudioServer_remove_bus, index);
		}
		
		void add_bus(int at_position) {
			ptr.godot_icall(bindings::id_AudioServer_add_bus, at_position);
		}
		
		void move_bus(int index, int to_index) {
			ptr.godot_icall(bindings::id_AudioServer_move_bus, index, to_index);
		}
		
		void set_bus_name(int bus_idx, const String &in name) {
			ptr.godot_icall(bindings::id_AudioServer_set_bus_name, bus_idx, name);
		}
		
		String get_bus_name(int bus_idx) const {
			return ptr.godot_icall(bindings::id_AudioServer_get_bus_name, bus_idx);
		}
		
		int get_bus_index(const String &in bus_name) const {
			return ptr.godot_icall(bindings::id_AudioServer_get_bus_index, bus_name);
		}
		
		void set_bus_volume_db(int bus_idx, float volume_db) {
			ptr.godot_icall(bindings::id_AudioServer_set_bus_volume_db, bus_idx, volume_db);
		}
		
		float get_bus_volume_db(int bus_idx) const {
			return ptr.godot_icall(bindings::id_AudioServer_get_bus_volume_db, bus_idx);
		}
		
		void set_bus_send(int bus_idx, const String &in send) {
			ptr.godot_icall(bindings::id_AudioServer_set_bus_send, bus_idx, send);
		}
		
		String get_bus_send(int bus_idx) const {
			return ptr.godot_icall(bindings::id_AudioServer_get_bus_send, bus_idx);
		}
		
		void set_bus_solo(int bus_idx, bool enable) {
			ptr.godot_icall(bindings::id_AudioServer_set_bus_solo, bus_idx, enable);
		}
		
		bool is_bus_solo(int bus_idx) const {
			return ptr.godot_icall(bindings::id_AudioServer_is_bus_solo, bus_idx);
		}
		
		void set_bus_mute(int bus_idx, bool enable) {
			ptr.godot_icall(bindings::id_AudioServer_set_bus_mute, bus_idx, enable);
		}
		
		bool is_bus_mute(int bus_idx) const {
			return ptr.godot_icall(bindings::id_AudioServer_is_bus_mute, bus_idx);
		}
		
		void set_bus_bypass_effects(int bus_idx, bool enable) {
			ptr.godot_icall(bindings::id_AudioServer_set_bus_bypass_effects, bus_idx, enable);
		}
		
		bool is_bus_bypassing_effects(int bus_idx) const {
			return ptr.godot_icall(bindings::id_AudioServer_is_bus_bypassing_effects, bus_idx);
		}
		
		void add_bus_effect(int bus_idx, AudioEffect@ effect, int at_position) {
			ptr.godot_icall(bindings::id_AudioServer_add_bus_effect, bus_idx, effect, at_position);
		}
		
		void remove_bus_effect(int bus_idx, int effect_idx) {
			ptr.godot_icall(bindings::id_AudioServer_remove_bus_effect, bus_idx, effect_idx);
		}
		
		int get_bus_effect_count(int bus_idx) {
			return ptr.godot_icall(bindings::id_AudioServer_get_bus_effect_count, bus_idx);
		}
		
		AudioEffect@ get_bus_effect(int bus_idx, int effect_idx) {
			AudioEffect ret = ptr.godot_icall(bindings::id_AudioServer_get_bus_effect, bus_idx, effect_idx);
			return  ret;
		}
		
		void swap_bus_effects(int bus_idx, int effect_idx, int by_effect_idx) {
			ptr.godot_icall(bindings::id_AudioServer_swap_bus_effects, bus_idx, effect_idx, by_effect_idx);
		}
		
		void set_bus_effect_enabled(int bus_idx, int effect_idx, bool enabled) {
			ptr.godot_icall(bindings::id_AudioServer_set_bus_effect_enabled, bus_idx, effect_idx, enabled);
		}
		
		bool is_bus_effect_enabled(int bus_idx, int effect_idx) const {
			return ptr.godot_icall(bindings::id_AudioServer_is_bus_effect_enabled, bus_idx, effect_idx);
		}
		
		float get_bus_peak_volume_left_db(int bus_idx, int channel) const {
			return ptr.godot_icall(bindings::id_AudioServer_get_bus_peak_volume_left_db, bus_idx, channel);
		}
		
		float get_bus_peak_volume_right_db(int bus_idx, int channel) const {
			return ptr.godot_icall(bindings::id_AudioServer_get_bus_peak_volume_right_db, bus_idx, channel);
		}
		
		void lock() {
			ptr.godot_icall(bindings::id_AudioServer_lock);
		}
		
		void unlock() {
			ptr.godot_icall(bindings::id_AudioServer_unlock);
		}
		
		int get_speaker_mode() const {
			return ptr.godot_icall(bindings::id_AudioServer_get_speaker_mode);
		}
		
		float get_mix_rate() const {
			return ptr.godot_icall(bindings::id_AudioServer_get_mix_rate);
		}
		
		void set_bus_layout(AudioBusLayout@ bus_layout) {
			ptr.godot_icall(bindings::id_AudioServer_set_bus_layout, bus_layout);
		}
		
		AudioBusLayout@ generate_bus_layout() const {
			AudioBusLayout ret = ptr.godot_icall(bindings::id_AudioServer_generate_bus_layout);
			return  ret;
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_AudioServer);
		}
		
	}
	
	class Camera : Spatial {
		
		
		Vector3 project_ray_normal(const Vector2 &in screen_point) const {
			return ptr.godot_icall(bindings::id_Camera_project_ray_normal, screen_point);
		}
		
		Vector3 project_local_ray_normal(const Vector2 &in screen_point) const {
			return ptr.godot_icall(bindings::id_Camera_project_local_ray_normal, screen_point);
		}
		
		Vector3 project_ray_origin(const Vector2 &in screen_point) const {
			return ptr.godot_icall(bindings::id_Camera_project_ray_origin, screen_point);
		}
		
		Vector2 unproject_position(const Vector3 &in world_point) const {
			return ptr.godot_icall(bindings::id_Camera_unproject_position, world_point);
		}
		
		bool is_position_behind(const Vector3 &in world_point) const {
			return ptr.godot_icall(bindings::id_Camera_is_position_behind, world_point);
		}
		
		Vector3 project_position(const Vector2 &in screen_point) const {
			return ptr.godot_icall(bindings::id_Camera_project_position, screen_point);
		}
		
		void set_perspective(float fov, float z_near, float z_far) {
			ptr.godot_icall(bindings::id_Camera_set_perspective, fov, z_near, z_far);
		}
		
		void set_orthogonal(float size, float z_near, float z_far) {
			ptr.godot_icall(bindings::id_Camera_set_orthogonal, size, z_near, z_far);
		}
		
		void make_current() {
			ptr.godot_icall(bindings::id_Camera_make_current);
		}
		
		void clear_current() {
			ptr.godot_icall(bindings::id_Camera_clear_current);
		}
		
		void set_current(bool arg0) {
			ptr.godot_icall(bindings::id_Camera_set_current, arg0);
		}
		
		bool is_current() const {
			return ptr.godot_icall(bindings::id_Camera_is_current);
		}
		
		Transform get_camera_transform() const {
			return ptr.godot_icall(bindings::id_Camera_get_camera_transform);
		}
		
		float get_fov() const {
			return ptr.godot_icall(bindings::id_Camera_get_fov);
		}
		
		float get_size() const {
			return ptr.godot_icall(bindings::id_Camera_get_size);
		}
		
		float get_zfar() const {
			return ptr.godot_icall(bindings::id_Camera_get_zfar);
		}
		
		float get_znear() const {
			return ptr.godot_icall(bindings::id_Camera_get_znear);
		}
		
		void set_fov(float arg0) {
			ptr.godot_icall(bindings::id_Camera_set_fov, arg0);
		}
		
		void set_size(float arg0) {
			ptr.godot_icall(bindings::id_Camera_set_size, arg0);
		}
		
		void set_zfar(float arg0) {
			ptr.godot_icall(bindings::id_Camera_set_zfar, arg0);
		}
		
		void set_znear(float arg0) {
			ptr.godot_icall(bindings::id_Camera_set_znear, arg0);
		}
		
		int get_projection() const {
			return ptr.godot_icall(bindings::id_Camera_get_projection);
		}
		
		void set_projection(int arg0) {
			ptr.godot_icall(bindings::id_Camera_set_projection, arg0);
		}
		
		void set_h_offset(float ofs) {
			ptr.godot_icall(bindings::id_Camera_set_h_offset, ofs);
		}
		
		float get_h_offset() const {
			return ptr.godot_icall(bindings::id_Camera_get_h_offset);
		}
		
		void set_v_offset(float ofs) {
			ptr.godot_icall(bindings::id_Camera_set_v_offset, ofs);
		}
		
		float get_v_offset() const {
			return ptr.godot_icall(bindings::id_Camera_get_v_offset);
		}
		
		void set_cull_mask(int mask) {
			ptr.godot_icall(bindings::id_Camera_set_cull_mask, mask);
		}
		
		int get_cull_mask() const {
			return ptr.godot_icall(bindings::id_Camera_get_cull_mask);
		}
		
		void set_environment(Environment@ env) {
			ptr.godot_icall(bindings::id_Camera_set_environment, env);
		}
		
		Environment@ get_environment() const {
			Environment ret = ptr.godot_icall(bindings::id_Camera_get_environment);
			return  ret;
		}
		
		void set_keep_aspect_mode(int mode) {
			ptr.godot_icall(bindings::id_Camera_set_keep_aspect_mode, mode);
		}
		
		int get_keep_aspect_mode() const {
			return ptr.godot_icall(bindings::id_Camera_get_keep_aspect_mode);
		}
		
		void set_doppler_tracking(int mode) {
			ptr.godot_icall(bindings::id_Camera_set_doppler_tracking, mode);
		}
		
		int get_doppler_tracking() const {
			return ptr.godot_icall(bindings::id_Camera_get_doppler_tracking);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Camera);
		}
		
	}
	
	class SpriteBase3D : GeometryInstance {
		
		
		void set_centered(bool centered) {
			ptr.godot_icall(bindings::id_SpriteBase3D_set_centered, centered);
		}
		
		bool is_centered() const {
			return ptr.godot_icall(bindings::id_SpriteBase3D_is_centered);
		}
		
		void set_offset(const Vector2 &in offset) {
			ptr.godot_icall(bindings::id_SpriteBase3D_set_offset, offset);
		}
		
		Vector2 get_offset() const {
			return ptr.godot_icall(bindings::id_SpriteBase3D_get_offset);
		}
		
		void set_flip_h(bool flip_h) {
			ptr.godot_icall(bindings::id_SpriteBase3D_set_flip_h, flip_h);
		}
		
		bool is_flipped_h() const {
			return ptr.godot_icall(bindings::id_SpriteBase3D_is_flipped_h);
		}
		
		void set_flip_v(bool flip_v) {
			ptr.godot_icall(bindings::id_SpriteBase3D_set_flip_v, flip_v);
		}
		
		bool is_flipped_v() const {
			return ptr.godot_icall(bindings::id_SpriteBase3D_is_flipped_v);
		}
		
		void set_modulate(const Color &in modulate) {
			ptr.godot_icall(bindings::id_SpriteBase3D_set_modulate, modulate);
		}
		
		Color get_modulate() const {
			return ptr.godot_icall(bindings::id_SpriteBase3D_get_modulate);
		}
		
		void set_opacity(float opacity) {
			ptr.godot_icall(bindings::id_SpriteBase3D_set_opacity, opacity);
		}
		
		float get_opacity() const {
			return ptr.godot_icall(bindings::id_SpriteBase3D_get_opacity);
		}
		
		void set_pixel_size(float pixel_size) {
			ptr.godot_icall(bindings::id_SpriteBase3D_set_pixel_size, pixel_size);
		}
		
		float get_pixel_size() const {
			return ptr.godot_icall(bindings::id_SpriteBase3D_get_pixel_size);
		}
		
		void set_axis(int axis) {
			ptr.godot_icall(bindings::id_SpriteBase3D_set_axis, axis);
		}
		
		int get_axis() const {
			return ptr.godot_icall(bindings::id_SpriteBase3D_get_axis);
		}
		
		void set_draw_flag(int flag, bool enabled) {
			ptr.godot_icall(bindings::id_SpriteBase3D_set_draw_flag, flag, enabled);
		}
		
		bool get_draw_flag(int flag) const {
			return ptr.godot_icall(bindings::id_SpriteBase3D_get_draw_flag, flag);
		}
		
		void set_alpha_cut_mode(int mode) {
			ptr.godot_icall(bindings::id_SpriteBase3D_set_alpha_cut_mode, mode);
		}
		
		int get_alpha_cut_mode() const {
			return ptr.godot_icall(bindings::id_SpriteBase3D_get_alpha_cut_mode);
		}
		
		Rect2 get_item_rect() const {
			return ptr.godot_icall(bindings::id_SpriteBase3D_get_item_rect);
		}
		
		protected void _queue_update() {
			ptr.godot_icall(bindings::id_SpriteBase3D__queue_update);
		}
		
		protected void _im_update() {
			ptr.godot_icall(bindings::id_SpriteBase3D__im_update);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_SpriteBase3D);
		}
		
	}
	
	class ShelfBinPack : RectangleBinPack {
		
		
		void set_choice_method(int p_methid) {
			ptr.godot_icall(bindings::id_ShelfBinPack_set_choice_method, p_methid);
		}
		
		int get_choice_method() const {
			return ptr.godot_icall(bindings::id_ShelfBinPack_get_choice_method);
		}
		
		void set_use_waste_map(bool p_merge) {
			ptr.godot_icall(bindings::id_ShelfBinPack_set_use_waste_map, p_merge);
		}
		
		bool is_use_waste_map() const {
			return ptr.godot_icall(bindings::id_ShelfBinPack_is_use_waste_map);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ShelfBinPack)).ptr();
		}
		
	}
	
	class CollisionPolygon2D : Node2D {
		
		
		void set_polygon(const PoolVector2Array &in polygon) {
			ptr.godot_icall(bindings::id_CollisionPolygon2D_set_polygon, polygon);
		}
		
		PoolVector2Array get_polygon() const {
			return ptr.godot_icall(bindings::id_CollisionPolygon2D_get_polygon);
		}
		
		void set_build_mode(int build_mode) {
			ptr.godot_icall(bindings::id_CollisionPolygon2D_set_build_mode, build_mode);
		}
		
		int get_build_mode() const {
			return ptr.godot_icall(bindings::id_CollisionPolygon2D_get_build_mode);
		}
		
		void set_disabled(bool disabled) {
			ptr.godot_icall(bindings::id_CollisionPolygon2D_set_disabled, disabled);
		}
		
		bool is_disabled() const {
			return ptr.godot_icall(bindings::id_CollisionPolygon2D_is_disabled);
		}
		
		void set_one_way_collision(bool enabled) {
			ptr.godot_icall(bindings::id_CollisionPolygon2D_set_one_way_collision, enabled);
		}
		
		bool is_one_way_collision_enabled() const {
			return ptr.godot_icall(bindings::id_CollisionPolygon2D_is_one_way_collision_enabled);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_CollisionPolygon2D);
		}
		
	}
	
	class StreamPeerSSL : StreamPeer {
		
		
		int accept_stream(StreamPeer@ stream) {
			return ptr.godot_icall(bindings::id_StreamPeerSSL_accept_stream, stream);
		}
		
		int connect_to_stream(StreamPeer@ stream, bool validate_certs, const String &in for_hostname) {
			return ptr.godot_icall(bindings::id_StreamPeerSSL_connect_to_stream, stream, validate_certs, for_hostname);
		}
		
		int get_status() const {
			return ptr.godot_icall(bindings::id_StreamPeerSSL_get_status);
		}
		
		void disconnect_from_stream() {
			ptr.godot_icall(bindings::id_StreamPeerSSL_disconnect_from_stream);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_StreamPeerSSL)).ptr();
		}
		
	}
	
	class ProgressBar : Range {
		
		
		void set_percent_visible(bool visible) {
			ptr.godot_icall(bindings::id_ProgressBar_set_percent_visible, visible);
		}
		
		bool is_percent_visible() const {
			return ptr.godot_icall(bindings::id_ProgressBar_is_percent_visible);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ProgressBar);
		}
		
	}
	
	class Tabs : Control {
		
		
		protected void _gui_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_Tabs__gui_input, arg0);
		}
		
		int get_tab_count() const {
			return ptr.godot_icall(bindings::id_Tabs_get_tab_count);
		}
		
		void set_current_tab(int tab_idx) {
			ptr.godot_icall(bindings::id_Tabs_set_current_tab, tab_idx);
		}
		
		int get_current_tab() const {
			return ptr.godot_icall(bindings::id_Tabs_get_current_tab);
		}
		
		void set_tab_title(int tab_idx, const String &in title) {
			ptr.godot_icall(bindings::id_Tabs_set_tab_title, tab_idx, title);
		}
		
		String get_tab_title(int tab_idx) const {
			return ptr.godot_icall(bindings::id_Tabs_get_tab_title, tab_idx);
		}
		
		void set_tab_icon(int tab_idx, Texture@ icon) {
			ptr.godot_icall(bindings::id_Tabs_set_tab_icon, tab_idx, icon);
		}
		
		Texture@ get_tab_icon(int tab_idx) const {
			Texture ret = ptr.godot_icall(bindings::id_Tabs_get_tab_icon, tab_idx);
			return  ret;
		}
		
		void set_tab_disabled(int tab_idx, bool disabled) {
			ptr.godot_icall(bindings::id_Tabs_set_tab_disabled, tab_idx, disabled);
		}
		
		bool get_tab_disabled(int tab_idx) const {
			return ptr.godot_icall(bindings::id_Tabs_get_tab_disabled, tab_idx);
		}
		
		void remove_tab(int tab_idx) {
			ptr.godot_icall(bindings::id_Tabs_remove_tab, tab_idx);
		}
		
		void add_tab(const String &in title, Texture@ icon) {
			ptr.godot_icall(bindings::id_Tabs_add_tab, title, icon);
		}
		
		void set_tab_align(int align) {
			ptr.godot_icall(bindings::id_Tabs_set_tab_align, align);
		}
		
		int get_tab_align() const {
			return ptr.godot_icall(bindings::id_Tabs_get_tab_align);
		}
		
		int get_tab_offset() const {
			return ptr.godot_icall(bindings::id_Tabs_get_tab_offset);
		}
		
		bool get_offset_buttons_visible() const {
			return ptr.godot_icall(bindings::id_Tabs_get_offset_buttons_visible);
		}
		
		void ensure_tab_visible(int idx) {
			ptr.godot_icall(bindings::id_Tabs_ensure_tab_visible, idx);
		}
		
		Rect2 get_tab_rect(int tab_idx) const {
			return ptr.godot_icall(bindings::id_Tabs_get_tab_rect, tab_idx);
		}
		
		void move_tab(int From, int to) {
			ptr.godot_icall(bindings::id_Tabs_move_tab, From, to);
		}
		
		void set_tab_close_display_policy(int policy) {
			ptr.godot_icall(bindings::id_Tabs_set_tab_close_display_policy, policy);
		}
		
		int get_tab_close_display_policy() const {
			return ptr.godot_icall(bindings::id_Tabs_get_tab_close_display_policy);
		}
		
		void set_scrolling_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_Tabs_set_scrolling_enabled, enabled);
		}
		
		bool get_scrolling_enabled() const {
			return ptr.godot_icall(bindings::id_Tabs_get_scrolling_enabled);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Tabs);
		}
		
	}
	
	class VisualScriptFunctionCall : VisualScriptNode {
		
		
		void set_base_type(const String &in base_type) {
			ptr.godot_icall(bindings::id_VisualScriptFunctionCall_set_base_type, base_type);
		}
		
		String get_base_type() const {
			return ptr.godot_icall(bindings::id_VisualScriptFunctionCall_get_base_type);
		}
		
		void set_base_script(const String &in base_script) {
			ptr.godot_icall(bindings::id_VisualScriptFunctionCall_set_base_script, base_script);
		}
		
		String get_base_script() const {
			return ptr.godot_icall(bindings::id_VisualScriptFunctionCall_get_base_script);
		}
		
		void set_basic_type(int basic_type) {
			ptr.godot_icall(bindings::id_VisualScriptFunctionCall_set_basic_type, basic_type);
		}
		
		int get_basic_type() const {
			return ptr.godot_icall(bindings::id_VisualScriptFunctionCall_get_basic_type);
		}
		
		void set_singleton(const String &in singleton) {
			ptr.godot_icall(bindings::id_VisualScriptFunctionCall_set_singleton, singleton);
		}
		
		String get_singleton() const {
			return ptr.godot_icall(bindings::id_VisualScriptFunctionCall_get_singleton);
		}
		
		void set_function(const String &in Function) {
			ptr.godot_icall(bindings::id_VisualScriptFunctionCall_set_function, Function);
		}
		
		String get_function() const {
			return ptr.godot_icall(bindings::id_VisualScriptFunctionCall_get_function);
		}
		
		void set_call_mode(int mode) {
			ptr.godot_icall(bindings::id_VisualScriptFunctionCall_set_call_mode, mode);
		}
		
		int get_call_mode() const {
			return ptr.godot_icall(bindings::id_VisualScriptFunctionCall_get_call_mode);
		}
		
		void set_base_path(const NodePath &in base_path) {
			ptr.godot_icall(bindings::id_VisualScriptFunctionCall_set_base_path, base_path);
		}
		
		NodePath get_base_path() const {
			return ptr.godot_icall(bindings::id_VisualScriptFunctionCall_get_base_path);
		}
		
		void set_use_default_args(int amount) {
			ptr.godot_icall(bindings::id_VisualScriptFunctionCall_set_use_default_args, amount);
		}
		
		int get_use_default_args() const {
			return ptr.godot_icall(bindings::id_VisualScriptFunctionCall_get_use_default_args);
		}
		
		protected void _set_argument_cache(const Dictionary &in argument_cache) {
			ptr.godot_icall(bindings::id_VisualScriptFunctionCall__set_argument_cache, argument_cache);
		}
		
		protected Dictionary _get_argument_cache() const {
			return ptr.godot_icall(bindings::id_VisualScriptFunctionCall__get_argument_cache);
		}
		
		void set_rpc_call_mode(int mode) {
			ptr.godot_icall(bindings::id_VisualScriptFunctionCall_set_rpc_call_mode, mode);
		}
		
		int get_rpc_call_mode() const {
			return ptr.godot_icall(bindings::id_VisualScriptFunctionCall_get_rpc_call_mode);
		}
		
		void set_validate(bool enable) {
			ptr.godot_icall(bindings::id_VisualScriptFunctionCall_set_validate, enable);
		}
		
		bool get_validate() const {
			return ptr.godot_icall(bindings::id_VisualScriptFunctionCall_get_validate);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptFunctionCall)).ptr();
		}
		
	}
	
	class Position2D : Node2D {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Position2D);
		}
		
	}
	
	class PhysicsDirectSpaceState : Object {
		
		
		Dictionary intersect_ray(const Vector3 &in From, const Vector3 &in to, const Array &in exclude, int collision_layer) {
			return ptr.godot_icall(bindings::id_PhysicsDirectSpaceState_intersect_ray, From, to, exclude, collision_layer);
		}
		
		Array intersect_shape(PhysicsShapeQueryParameters@ shape, int max_results) {
			return ptr.godot_icall(bindings::id_PhysicsDirectSpaceState_intersect_shape, shape, max_results);
		}
		
		Array cast_motion(PhysicsShapeQueryParameters@ shape, const Vector3 &in motion) {
			return ptr.godot_icall(bindings::id_PhysicsDirectSpaceState_cast_motion, shape, motion);
		}
		
		Array collide_shape(PhysicsShapeQueryParameters@ shape, int max_results) {
			return ptr.godot_icall(bindings::id_PhysicsDirectSpaceState_collide_shape, shape, max_results);
		}
		
		Dictionary get_rest_info(PhysicsShapeQueryParameters@ shape) {
			return ptr.godot_icall(bindings::id_PhysicsDirectSpaceState_get_rest_info, shape);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_PhysicsDirectSpaceState);
		}
		
	}
	
	class AudioEffectEQ6 : AudioEffectEQ {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectEQ6)).ptr();
		}
		
	}
	
	class ItemList : Control {
		
		
		void add_item(const String &in text, Texture@ icon, bool selectable) {
			ptr.godot_icall(bindings::id_ItemList_add_item, text, icon, selectable);
		}
		
		void add_icon_item(Texture@ icon, bool selectable) {
			ptr.godot_icall(bindings::id_ItemList_add_icon_item, icon, selectable);
		}
		
		void set_item_text(int idx, const String &in text) {
			ptr.godot_icall(bindings::id_ItemList_set_item_text, idx, text);
		}
		
		String get_item_text(int idx) const {
			return ptr.godot_icall(bindings::id_ItemList_get_item_text, idx);
		}
		
		void set_item_icon(int idx, Texture@ icon) {
			ptr.godot_icall(bindings::id_ItemList_set_item_icon, idx, icon);
		}
		
		Texture@ get_item_icon(int idx) const {
			Texture ret = ptr.godot_icall(bindings::id_ItemList_get_item_icon, idx);
			return  ret;
		}
		
		void set_item_icon_region(int idx, const Rect2 &in rect) {
			ptr.godot_icall(bindings::id_ItemList_set_item_icon_region, idx, rect);
		}
		
		Rect2 get_item_icon_region(int idx) const {
			return ptr.godot_icall(bindings::id_ItemList_get_item_icon_region, idx);
		}
		
		void set_item_selectable(int idx, bool selectable) {
			ptr.godot_icall(bindings::id_ItemList_set_item_selectable, idx, selectable);
		}
		
		bool is_item_selectable(int idx) const {
			return ptr.godot_icall(bindings::id_ItemList_is_item_selectable, idx);
		}
		
		void set_item_disabled(int idx, bool disabled) {
			ptr.godot_icall(bindings::id_ItemList_set_item_disabled, idx, disabled);
		}
		
		bool is_item_disabled(int idx) const {
			return ptr.godot_icall(bindings::id_ItemList_is_item_disabled, idx);
		}
		
		void set_item_metadata(int idx, const Variant &in metadata) {
			ptr.godot_icall(bindings::id_ItemList_set_item_metadata, idx, metadata);
		}
		
		Variant get_item_metadata(int idx) const {
			return ptr.godot_icall(bindings::id_ItemList_get_item_metadata, idx);
		}
		
		void set_item_custom_bg_color(int idx, const Color &in custom_bg_color) {
			ptr.godot_icall(bindings::id_ItemList_set_item_custom_bg_color, idx, custom_bg_color);
		}
		
		Color get_item_custom_bg_color(int idx) const {
			return ptr.godot_icall(bindings::id_ItemList_get_item_custom_bg_color, idx);
		}
		
		void set_item_tooltip_enabled(int idx, bool enable) {
			ptr.godot_icall(bindings::id_ItemList_set_item_tooltip_enabled, idx, enable);
		}
		
		bool is_item_tooltip_enabled(int idx) const {
			return ptr.godot_icall(bindings::id_ItemList_is_item_tooltip_enabled, idx);
		}
		
		void set_item_tooltip(int idx, const String &in tooltip) {
			ptr.godot_icall(bindings::id_ItemList_set_item_tooltip, idx, tooltip);
		}
		
		String get_item_tooltip(int idx) const {
			return ptr.godot_icall(bindings::id_ItemList_get_item_tooltip, idx);
		}
		
		void select(int idx, bool single) {
			ptr.godot_icall(bindings::id_ItemList_select, idx, single);
		}
		
		void unselect(int idx) {
			ptr.godot_icall(bindings::id_ItemList_unselect, idx);
		}
		
		bool is_selected(int idx) const {
			return ptr.godot_icall(bindings::id_ItemList_is_selected, idx);
		}
		
		PoolIntArray get_selected_items() {
			return ptr.godot_icall(bindings::id_ItemList_get_selected_items);
		}
		
		int get_item_count() const {
			return ptr.godot_icall(bindings::id_ItemList_get_item_count);
		}
		
		void remove_item(int idx) {
			ptr.godot_icall(bindings::id_ItemList_remove_item, idx);
		}
		
		void clear() {
			ptr.godot_icall(bindings::id_ItemList_clear);
		}
		
		void sort_items_by_text() {
			ptr.godot_icall(bindings::id_ItemList_sort_items_by_text);
		}
		
		void set_fixed_column_width(int width) {
			ptr.godot_icall(bindings::id_ItemList_set_fixed_column_width, width);
		}
		
		int get_fixed_column_width() const {
			return ptr.godot_icall(bindings::id_ItemList_get_fixed_column_width);
		}
		
		void set_same_column_width(bool enable) {
			ptr.godot_icall(bindings::id_ItemList_set_same_column_width, enable);
		}
		
		bool is_same_column_width() const {
			return ptr.godot_icall(bindings::id_ItemList_is_same_column_width);
		}
		
		void set_max_text_lines(int lines) {
			ptr.godot_icall(bindings::id_ItemList_set_max_text_lines, lines);
		}
		
		int get_max_text_lines() const {
			return ptr.godot_icall(bindings::id_ItemList_get_max_text_lines);
		}
		
		void set_max_columns(int amount) {
			ptr.godot_icall(bindings::id_ItemList_set_max_columns, amount);
		}
		
		int get_max_columns() const {
			return ptr.godot_icall(bindings::id_ItemList_get_max_columns);
		}
		
		void set_select_mode(int mode) {
			ptr.godot_icall(bindings::id_ItemList_set_select_mode, mode);
		}
		
		int get_select_mode() const {
			return ptr.godot_icall(bindings::id_ItemList_get_select_mode);
		}
		
		void set_icon_mode(int mode) {
			ptr.godot_icall(bindings::id_ItemList_set_icon_mode, mode);
		}
		
		int get_icon_mode() const {
			return ptr.godot_icall(bindings::id_ItemList_get_icon_mode);
		}
		
		void set_fixed_icon_size(const Vector2 &in size) {
			ptr.godot_icall(bindings::id_ItemList_set_fixed_icon_size, size);
		}
		
		Vector2 get_fixed_icon_size() const {
			return ptr.godot_icall(bindings::id_ItemList_get_fixed_icon_size);
		}
		
		void set_icon_scale(float scale) {
			ptr.godot_icall(bindings::id_ItemList_set_icon_scale, scale);
		}
		
		float get_icon_scale() const {
			return ptr.godot_icall(bindings::id_ItemList_get_icon_scale);
		}
		
		void set_allow_rmb_select(bool allow) {
			ptr.godot_icall(bindings::id_ItemList_set_allow_rmb_select, allow);
		}
		
		bool get_allow_rmb_select() const {
			return ptr.godot_icall(bindings::id_ItemList_get_allow_rmb_select);
		}
		
		void set_auto_height(bool enable) {
			ptr.godot_icall(bindings::id_ItemList_set_auto_height, enable);
		}
		
		bool has_auto_height() const {
			return ptr.godot_icall(bindings::id_ItemList_has_auto_height);
		}
		
		int get_item_at_position(const Vector2 &in position, bool exact) const {
			return ptr.godot_icall(bindings::id_ItemList_get_item_at_position, position, exact);
		}
		
		void ensure_current_is_visible() {
			ptr.godot_icall(bindings::id_ItemList_ensure_current_is_visible);
		}
		
		VScrollBar@ get_v_scroll() {
			VScrollBar ret = ptr.godot_icall(bindings::id_ItemList_get_v_scroll);
			return  ret;
		}
		
		protected void _scroll_changed(float arg0) {
			ptr.godot_icall(bindings::id_ItemList__scroll_changed, arg0);
		}
		
		protected void _gui_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_ItemList__gui_input, arg0);
		}
		
		protected void _set_items(const Array &in arg0) {
			ptr.godot_icall(bindings::id_ItemList__set_items, arg0);
		}
		
		protected Array _get_items() const {
			return ptr.godot_icall(bindings::id_ItemList__get_items);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ItemList);
		}
		
	}
	
	class OmniLight : Light {
		
		
		void set_shadow_mode(int mode) {
			ptr.godot_icall(bindings::id_OmniLight_set_shadow_mode, mode);
		}
		
		int get_shadow_mode() const {
			return ptr.godot_icall(bindings::id_OmniLight_get_shadow_mode);
		}
		
		void set_shadow_detail(int detail) {
			ptr.godot_icall(bindings::id_OmniLight_set_shadow_detail, detail);
		}
		
		int get_shadow_detail() const {
			return ptr.godot_icall(bindings::id_OmniLight_get_shadow_detail);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_OmniLight);
		}
		
	}
	
	class PinJoint : Joint {
		
		
		void set_param(int param, float value) {
			ptr.godot_icall(bindings::id_PinJoint_set_param, param, value);
		}
		
		float get_param(int param) const {
			return ptr.godot_icall(bindings::id_PinJoint_get_param, param);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_PinJoint);
		}
		
	}
	
	class ArrayMesh : Mesh {
		
		
		void add_blend_shape(const String &in name) {
			ptr.godot_icall(bindings::id_ArrayMesh_add_blend_shape, name);
		}
		
		int get_blend_shape_count() const {
			return ptr.godot_icall(bindings::id_ArrayMesh_get_blend_shape_count);
		}
		
		String get_blend_shape_name(int index) const {
			return ptr.godot_icall(bindings::id_ArrayMesh_get_blend_shape_name, index);
		}
		
		void clear_blend_shapes() {
			ptr.godot_icall(bindings::id_ArrayMesh_clear_blend_shapes);
		}
		
		void set_blend_shape_mode(int mode) {
			ptr.godot_icall(bindings::id_ArrayMesh_set_blend_shape_mode, mode);
		}
		
		int get_blend_shape_mode() const {
			return ptr.godot_icall(bindings::id_ArrayMesh_get_blend_shape_mode);
		}
		
		void add_surface_from_arrays(int primitive, const Array &in arrays, const Array &in blend_shapes, int compress_flags) {
			ptr.godot_icall(bindings::id_ArrayMesh_add_surface_from_arrays, primitive, arrays, blend_shapes, compress_flags);
		}
		
		int get_surface_count() const {
			return ptr.godot_icall(bindings::id_ArrayMesh_get_surface_count);
		}
		
		void surface_remove(int surf_idx) {
			ptr.godot_icall(bindings::id_ArrayMesh_surface_remove, surf_idx);
		}
		
		void surface_update_region(int surf_idx, int offset, const PoolByteArray &in data) {
			ptr.godot_icall(bindings::id_ArrayMesh_surface_update_region, surf_idx, offset, data);
		}
		
		int surface_get_array_len(int surf_idx) const {
			return ptr.godot_icall(bindings::id_ArrayMesh_surface_get_array_len, surf_idx);
		}
		
		int surface_get_array_index_len(int surf_idx) const {
			return ptr.godot_icall(bindings::id_ArrayMesh_surface_get_array_index_len, surf_idx);
		}
		
		int surface_get_format(int surf_idx) const {
			return ptr.godot_icall(bindings::id_ArrayMesh_surface_get_format, surf_idx);
		}
		
		int surface_get_primitive_type(int surf_idx) const {
			return ptr.godot_icall(bindings::id_ArrayMesh_surface_get_primitive_type, surf_idx);
		}
		
		void surface_set_material(int surf_idx, Material@ material) {
			ptr.godot_icall(bindings::id_ArrayMesh_surface_set_material, surf_idx, material);
		}
		
		Material@ surface_get_material(int surf_idx) const {
			Material ret = ptr.godot_icall(bindings::id_ArrayMesh_surface_get_material, surf_idx);
			return  ret;
		}
		
		void surface_set_name(int surf_idx, const String &in name) {
			ptr.godot_icall(bindings::id_ArrayMesh_surface_set_name, surf_idx, name);
		}
		
		String surface_get_name(int surf_idx) const {
			return ptr.godot_icall(bindings::id_ArrayMesh_surface_get_name, surf_idx);
		}
		
		Array surface_get_arrays(int surf_idx) const {
			return ptr.godot_icall(bindings::id_ArrayMesh_surface_get_arrays, surf_idx);
		}
		
		Array surface_get_blend_shape_arrays(int surf_idx) const {
			return ptr.godot_icall(bindings::id_ArrayMesh_surface_get_blend_shape_arrays, surf_idx);
		}
		
		void center_geometry() {
			ptr.godot_icall(bindings::id_ArrayMesh_center_geometry);
		}
		
		void regen_normalmaps() {
			ptr.godot_icall(bindings::id_ArrayMesh_regen_normalmaps);
		}
		
		void set_custom_aabb(const AABB &in aabb) {
			ptr.godot_icall(bindings::id_ArrayMesh_set_custom_aabb, aabb);
		}
		
		AABB get_custom_aabb() const {
			return ptr.godot_icall(bindings::id_ArrayMesh_get_custom_aabb);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ArrayMesh)).ptr();
		}
		
	}
	
	class StaticBody2D : PhysicsBody2D {
		
		
		void set_constant_linear_velocity(const Vector2 &in vel) {
			ptr.godot_icall(bindings::id_StaticBody2D_set_constant_linear_velocity, vel);
		}
		
		void set_constant_angular_velocity(float vel) {
			ptr.godot_icall(bindings::id_StaticBody2D_set_constant_angular_velocity, vel);
		}
		
		Vector2 get_constant_linear_velocity() const {
			return ptr.godot_icall(bindings::id_StaticBody2D_get_constant_linear_velocity);
		}
		
		float get_constant_angular_velocity() const {
			return ptr.godot_icall(bindings::id_StaticBody2D_get_constant_angular_velocity);
		}
		
		void set_friction(float friction) {
			ptr.godot_icall(bindings::id_StaticBody2D_set_friction, friction);
		}
		
		float get_friction() const {
			return ptr.godot_icall(bindings::id_StaticBody2D_get_friction);
		}
		
		void set_bounce(float bounce) {
			ptr.godot_icall(bindings::id_StaticBody2D_set_bounce, bounce);
		}
		
		float get_bounce() const {
			return ptr.godot_icall(bindings::id_StaticBody2D_get_bounce);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_StaticBody2D);
		}
		
	}
	
	class AudioEffectCompressor : AudioEffect {
		
		
		void set_threshold(float threshold) {
			ptr.godot_icall(bindings::id_AudioEffectCompressor_set_threshold, threshold);
		}
		
		float get_threshold() const {
			return ptr.godot_icall(bindings::id_AudioEffectCompressor_get_threshold);
		}
		
		void set_ratio(float ratio) {
			ptr.godot_icall(bindings::id_AudioEffectCompressor_set_ratio, ratio);
		}
		
		float get_ratio() const {
			return ptr.godot_icall(bindings::id_AudioEffectCompressor_get_ratio);
		}
		
		void set_gain(float gain) {
			ptr.godot_icall(bindings::id_AudioEffectCompressor_set_gain, gain);
		}
		
		float get_gain() const {
			return ptr.godot_icall(bindings::id_AudioEffectCompressor_get_gain);
		}
		
		void set_attack_us(float attack_us) {
			ptr.godot_icall(bindings::id_AudioEffectCompressor_set_attack_us, attack_us);
		}
		
		float get_attack_us() const {
			return ptr.godot_icall(bindings::id_AudioEffectCompressor_get_attack_us);
		}
		
		void set_release_ms(float release_ms) {
			ptr.godot_icall(bindings::id_AudioEffectCompressor_set_release_ms, release_ms);
		}
		
		float get_release_ms() const {
			return ptr.godot_icall(bindings::id_AudioEffectCompressor_get_release_ms);
		}
		
		void set_mix(float mix) {
			ptr.godot_icall(bindings::id_AudioEffectCompressor_set_mix, mix);
		}
		
		float get_mix() const {
			return ptr.godot_icall(bindings::id_AudioEffectCompressor_get_mix);
		}
		
		void set_sidechain(const String &in sidechain) {
			ptr.godot_icall(bindings::id_AudioEffectCompressor_set_sidechain, sidechain);
		}
		
		String get_sidechain() const {
			return ptr.godot_icall(bindings::id_AudioEffectCompressor_get_sidechain);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectCompressor)).ptr();
		}
		
	}
	
	class EditorSelection : Object {
		
		
		protected void _node_removed(Node@ arg0) {
			ptr.godot_icall(bindings::id_EditorSelection__node_removed, arg0);
		}
		
		void clear() {
			ptr.godot_icall(bindings::id_EditorSelection_clear);
		}
		
		void add_node(Node@ node) {
			ptr.godot_icall(bindings::id_EditorSelection_add_node, node);
		}
		
		void remove_node(Node@ node) {
			ptr.godot_icall(bindings::id_EditorSelection_remove_node, node);
		}
		
		Array get_selected_nodes() {
			return ptr.godot_icall(bindings::id_EditorSelection_get_selected_nodes);
		}
		
		Array get_transformable_selected_nodes() {
			return ptr.godot_icall(bindings::id_EditorSelection_get_transformable_selected_nodes);
		}
		
		protected void _emit_change() {
			ptr.godot_icall(bindings::id_EditorSelection__emit_change);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_EditorSelection);
		}
		
	}
	
	class Mesh : Resource {
		
		
		void set_lightmap_size_hint(const Vector2 &in size) {
			ptr.godot_icall(bindings::id_Mesh_set_lightmap_size_hint, size);
		}
		
		Vector2 get_lightmap_size_hint() const {
			return ptr.godot_icall(bindings::id_Mesh_get_lightmap_size_hint);
		}
		
		Shape@ create_trimesh_shape() const {
			Shape ret = ptr.godot_icall(bindings::id_Mesh_create_trimesh_shape);
			return  ret;
		}
		
		Shape@ create_convex_shape() const {
			Shape ret = ptr.godot_icall(bindings::id_Mesh_create_convex_shape);
			return  ret;
		}
		
		Mesh@ create_outline(float margin) const {
			Mesh ret = ptr.godot_icall(bindings::id_Mesh_create_outline, margin);
			return  ret;
		}
		
		PoolVector3Array get_faces() const {
			return ptr.godot_icall(bindings::id_Mesh_get_faces);
		}
		
		TriangleMesh@ generate_triangle_mesh() const {
			TriangleMesh ret = ptr.godot_icall(bindings::id_Mesh_generate_triangle_mesh);
			return  ret;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Mesh)).ptr();
		}
		
	}
	
	class Range : Control {
		
		
		float get_value() const {
			return ptr.godot_icall(bindings::id_Range_get_value);
		}
		
		float get_min() const {
			return ptr.godot_icall(bindings::id_Range_get_min);
		}
		
		float get_max() const {
			return ptr.godot_icall(bindings::id_Range_get_max);
		}
		
		float get_step() const {
			return ptr.godot_icall(bindings::id_Range_get_step);
		}
		
		float get_page() const {
			return ptr.godot_icall(bindings::id_Range_get_page);
		}
		
		float get_as_ratio() const {
			return ptr.godot_icall(bindings::id_Range_get_as_ratio);
		}
		
		void set_value(float value) {
			ptr.godot_icall(bindings::id_Range_set_value, value);
		}
		
		void set_min(float minimum) {
			ptr.godot_icall(bindings::id_Range_set_min, minimum);
		}
		
		void set_max(float maximum) {
			ptr.godot_icall(bindings::id_Range_set_max, maximum);
		}
		
		void set_step(float step) {
			ptr.godot_icall(bindings::id_Range_set_step, step);
		}
		
		void set_page(float pagesize) {
			ptr.godot_icall(bindings::id_Range_set_page, pagesize);
		}
		
		void set_as_ratio(float value) {
			ptr.godot_icall(bindings::id_Range_set_as_ratio, value);
		}
		
		void set_use_rounded_values(bool enabled) {
			ptr.godot_icall(bindings::id_Range_set_use_rounded_values, enabled);
		}
		
		bool is_using_rounded_values() const {
			return ptr.godot_icall(bindings::id_Range_is_using_rounded_values);
		}
		
		void set_exp_ratio(bool enabled) {
			ptr.godot_icall(bindings::id_Range_set_exp_ratio, enabled);
		}
		
		bool is_ratio_exp() const {
			return ptr.godot_icall(bindings::id_Range_is_ratio_exp);
		}
		
		void share(Node@ with) {
			ptr.godot_icall(bindings::id_Range_share, with);
		}
		
		void unshare() {
			ptr.godot_icall(bindings::id_Range_unshare);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Range);
		}
		
	}
	
	class PacketPeerUDP : PacketPeer {
		
		
		int listen(int port, const String &in bind_address, int recv_buf_size) {
			return ptr.godot_icall(bindings::id_PacketPeerUDP_listen, port, bind_address, recv_buf_size);
		}
		
		void close() {
			ptr.godot_icall(bindings::id_PacketPeerUDP_close);
		}
		
		int wait() {
			return ptr.godot_icall(bindings::id_PacketPeerUDP_wait);
		}
		
		bool is_listening() const {
			return ptr.godot_icall(bindings::id_PacketPeerUDP_is_listening);
		}
		
		String get_packet_ip() const {
			return ptr.godot_icall(bindings::id_PacketPeerUDP_get_packet_ip);
		}
		
		int get_packet_port() const {
			return ptr.godot_icall(bindings::id_PacketPeerUDP_get_packet_port);
		}
		
		int set_dest_address(const String &in host, int port) {
			return ptr.godot_icall(bindings::id_PacketPeerUDP_set_dest_address, host, port);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_PacketPeerUDP)).ptr();
		}
		
	}
	
	class ColorRect : Control {
		
		
		void set_frame_color(const Color &in color) {
			ptr.godot_icall(bindings::id_ColorRect_set_frame_color, color);
		}
		
		Color get_frame_color() const {
			return ptr.godot_icall(bindings::id_ColorRect_get_frame_color);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ColorRect);
		}
		
	}
	
	class TextureButton : BaseButton {
		
		
		void set_normal_texture(Texture@ texture) {
			ptr.godot_icall(bindings::id_TextureButton_set_normal_texture, texture);
		}
		
		void set_pressed_texture(Texture@ texture) {
			ptr.godot_icall(bindings::id_TextureButton_set_pressed_texture, texture);
		}
		
		void set_hover_texture(Texture@ texture) {
			ptr.godot_icall(bindings::id_TextureButton_set_hover_texture, texture);
		}
		
		void set_disabled_texture(Texture@ texture) {
			ptr.godot_icall(bindings::id_TextureButton_set_disabled_texture, texture);
		}
		
		void set_focused_texture(Texture@ texture) {
			ptr.godot_icall(bindings::id_TextureButton_set_focused_texture, texture);
		}
		
		void set_click_mask(BitMap@ mask) {
			ptr.godot_icall(bindings::id_TextureButton_set_click_mask, mask);
		}
		
		void set_expand(bool p_expand) {
			ptr.godot_icall(bindings::id_TextureButton_set_expand, p_expand);
		}
		
		void set_stretch_mode(int p_mode) {
			ptr.godot_icall(bindings::id_TextureButton_set_stretch_mode, p_mode);
		}
		
		Texture@ get_normal_texture() const {
			Texture ret = ptr.godot_icall(bindings::id_TextureButton_get_normal_texture);
			return  ret;
		}
		
		Texture@ get_pressed_texture() const {
			Texture ret = ptr.godot_icall(bindings::id_TextureButton_get_pressed_texture);
			return  ret;
		}
		
		Texture@ get_hover_texture() const {
			Texture ret = ptr.godot_icall(bindings::id_TextureButton_get_hover_texture);
			return  ret;
		}
		
		Texture@ get_disabled_texture() const {
			Texture ret = ptr.godot_icall(bindings::id_TextureButton_get_disabled_texture);
			return  ret;
		}
		
		Texture@ get_focused_texture() const {
			Texture ret = ptr.godot_icall(bindings::id_TextureButton_get_focused_texture);
			return  ret;
		}
		
		BitMap@ get_click_mask() const {
			BitMap ret = ptr.godot_icall(bindings::id_TextureButton_get_click_mask);
			return  ret;
		}
		
		bool get_expand() const {
			return ptr.godot_icall(bindings::id_TextureButton_get_expand);
		}
		
		int get_stretch_mode() const {
			return ptr.godot_icall(bindings::id_TextureButton_get_stretch_mode);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_TextureButton);
		}
		
	}
	
	class MultiMeshInstance : GeometryInstance {
		
		
		void set_multimesh(MultiMesh@ multimesh) {
			ptr.godot_icall(bindings::id_MultiMeshInstance_set_multimesh, multimesh);
		}
		
		MultiMesh@ get_multimesh() const {
			MultiMesh ret = ptr.godot_icall(bindings::id_MultiMeshInstance_get_multimesh);
			return  ret;
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_MultiMeshInstance);
		}
		
	}
	
	class Path : Spatial {
		
		
		void set_curve(Curve3D@ curve) {
			ptr.godot_icall(bindings::id_Path_set_curve, curve);
		}
		
		Curve3D@ get_curve() const {
			Curve3D ret = ptr.godot_icall(bindings::id_Path_get_curve);
			return  ret;
		}
		
		protected void _curve_changed() {
			ptr.godot_icall(bindings::id_Path__curve_changed);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Path);
		}
		
	}
	
	class VisualScriptPropertyGet : VisualScriptNode {
		
		
		void set_base_type(const String &in base_type) {
			ptr.godot_icall(bindings::id_VisualScriptPropertyGet_set_base_type, base_type);
		}
		
		String get_base_type() const {
			return ptr.godot_icall(bindings::id_VisualScriptPropertyGet_get_base_type);
		}
		
		void set_base_script(const String &in base_script) {
			ptr.godot_icall(bindings::id_VisualScriptPropertyGet_set_base_script, base_script);
		}
		
		String get_base_script() const {
			return ptr.godot_icall(bindings::id_VisualScriptPropertyGet_get_base_script);
		}
		
		void set_basic_type(int basic_type) {
			ptr.godot_icall(bindings::id_VisualScriptPropertyGet_set_basic_type, basic_type);
		}
		
		int get_basic_type() const {
			return ptr.godot_icall(bindings::id_VisualScriptPropertyGet_get_basic_type);
		}
		
		protected void _set_type_cache(int type_cache) {
			ptr.godot_icall(bindings::id_VisualScriptPropertyGet__set_type_cache, type_cache);
		}
		
		protected int _get_type_cache() const {
			return ptr.godot_icall(bindings::id_VisualScriptPropertyGet__get_type_cache);
		}
		
		void set_property(const String &in property) {
			ptr.godot_icall(bindings::id_VisualScriptPropertyGet_set_property, property);
		}
		
		String get_property() const {
			return ptr.godot_icall(bindings::id_VisualScriptPropertyGet_get_property);
		}
		
		void set_call_mode(int mode) {
			ptr.godot_icall(bindings::id_VisualScriptPropertyGet_set_call_mode, mode);
		}
		
		int get_call_mode() const {
			return ptr.godot_icall(bindings::id_VisualScriptPropertyGet_get_call_mode);
		}
		
		void set_base_path(const NodePath &in base_path) {
			ptr.godot_icall(bindings::id_VisualScriptPropertyGet_set_base_path, base_path);
		}
		
		NodePath get_base_path() const {
			return ptr.godot_icall(bindings::id_VisualScriptPropertyGet_get_base_path);
		}
		
		void set_index(const String &in index) {
			ptr.godot_icall(bindings::id_VisualScriptPropertyGet_set_index, index);
		}
		
		String get_index() const {
			return ptr.godot_icall(bindings::id_VisualScriptPropertyGet_get_index);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptPropertyGet)).ptr();
		}
		
	}
	
	class ConcavePolygonShape2D : Shape2D {
		
		
		void set_segments(const PoolVector2Array &in segments) {
			ptr.godot_icall(bindings::id_ConcavePolygonShape2D_set_segments, segments);
		}
		
		PoolVector2Array get_segments() const {
			return ptr.godot_icall(bindings::id_ConcavePolygonShape2D_get_segments);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ConcavePolygonShape2D)).ptr();
		}
		
	}
	
	class Gradient : Resource {
		
		
		void add_point(float offset, const Color &in color) {
			ptr.godot_icall(bindings::id_Gradient_add_point, offset, color);
		}
		
		void remove_point(int offset) {
			ptr.godot_icall(bindings::id_Gradient_remove_point, offset);
		}
		
		void set_offset(int point, float offset) {
			ptr.godot_icall(bindings::id_Gradient_set_offset, point, offset);
		}
		
		float get_offset(int point) const {
			return ptr.godot_icall(bindings::id_Gradient_get_offset, point);
		}
		
		void set_color(int point, const Color &in color) {
			ptr.godot_icall(bindings::id_Gradient_set_color, point, color);
		}
		
		Color get_color(int point) const {
			return ptr.godot_icall(bindings::id_Gradient_get_color, point);
		}
		
		Color interpolate(float offset) {
			return ptr.godot_icall(bindings::id_Gradient_interpolate, offset);
		}
		
		int get_point_count() const {
			return ptr.godot_icall(bindings::id_Gradient_get_point_count);
		}
		
		void set_offsets(const PoolRealArray &in offsets) {
			ptr.godot_icall(bindings::id_Gradient_set_offsets, offsets);
		}
		
		PoolRealArray get_offsets() const {
			return ptr.godot_icall(bindings::id_Gradient_get_offsets);
		}
		
		void set_colors(const PoolColorArray &in colors) {
			ptr.godot_icall(bindings::id_Gradient_set_colors, colors);
		}
		
		PoolColorArray get_colors() const {
			return ptr.godot_icall(bindings::id_Gradient_get_colors);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Gradient)).ptr();
		}
		
	}
	
	class Physics2DTestMotionResult : Reference {
		
		
		Vector2 get_motion() const {
			return ptr.godot_icall(bindings::id_Physics2DTestMotionResult_get_motion);
		}
		
		Vector2 get_motion_remainder() const {
			return ptr.godot_icall(bindings::id_Physics2DTestMotionResult_get_motion_remainder);
		}
		
		Vector2 get_collision_point() const {
			return ptr.godot_icall(bindings::id_Physics2DTestMotionResult_get_collision_point);
		}
		
		Vector2 get_collision_normal() const {
			return ptr.godot_icall(bindings::id_Physics2DTestMotionResult_get_collision_normal);
		}
		
		Vector2 get_collider_velocity() const {
			return ptr.godot_icall(bindings::id_Physics2DTestMotionResult_get_collider_velocity);
		}
		
		int get_collider_id() const {
			return ptr.godot_icall(bindings::id_Physics2DTestMotionResult_get_collider_id);
		}
		
		RID get_collider_rid() const {
			return ptr.godot_icall(bindings::id_Physics2DTestMotionResult_get_collider_rid);
		}
		
		Object@ get_collider() const {
			Object ret = ptr.godot_icall(bindings::id_Physics2DTestMotionResult_get_collider);
			return  ret;
		}
		
		int get_collider_shape() const {
			return ptr.godot_icall(bindings::id_Physics2DTestMotionResult_get_collider_shape);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Physics2DTestMotionResult)).ptr();
		}
		
	}
	
	class AudioEffectDelay : AudioEffect {
		
		
		void set_dry(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectDelay_set_dry, amount);
		}
		
		float get_dry() {
			return ptr.godot_icall(bindings::id_AudioEffectDelay_get_dry);
		}
		
		void set_tap1_active(bool amount) {
			ptr.godot_icall(bindings::id_AudioEffectDelay_set_tap1_active, amount);
		}
		
		bool is_tap1_active() const {
			return ptr.godot_icall(bindings::id_AudioEffectDelay_is_tap1_active);
		}
		
		void set_tap1_delay_ms(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectDelay_set_tap1_delay_ms, amount);
		}
		
		float get_tap1_delay_ms() const {
			return ptr.godot_icall(bindings::id_AudioEffectDelay_get_tap1_delay_ms);
		}
		
		void set_tap1_level_db(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectDelay_set_tap1_level_db, amount);
		}
		
		float get_tap1_level_db() const {
			return ptr.godot_icall(bindings::id_AudioEffectDelay_get_tap1_level_db);
		}
		
		void set_tap1_pan(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectDelay_set_tap1_pan, amount);
		}
		
		float get_tap1_pan() const {
			return ptr.godot_icall(bindings::id_AudioEffectDelay_get_tap1_pan);
		}
		
		void set_tap2_active(bool amount) {
			ptr.godot_icall(bindings::id_AudioEffectDelay_set_tap2_active, amount);
		}
		
		bool is_tap2_active() const {
			return ptr.godot_icall(bindings::id_AudioEffectDelay_is_tap2_active);
		}
		
		void set_tap2_delay_ms(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectDelay_set_tap2_delay_ms, amount);
		}
		
		float get_tap2_delay_ms() const {
			return ptr.godot_icall(bindings::id_AudioEffectDelay_get_tap2_delay_ms);
		}
		
		void set_tap2_level_db(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectDelay_set_tap2_level_db, amount);
		}
		
		float get_tap2_level_db() const {
			return ptr.godot_icall(bindings::id_AudioEffectDelay_get_tap2_level_db);
		}
		
		void set_tap2_pan(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectDelay_set_tap2_pan, amount);
		}
		
		float get_tap2_pan() const {
			return ptr.godot_icall(bindings::id_AudioEffectDelay_get_tap2_pan);
		}
		
		void set_feedback_active(bool amount) {
			ptr.godot_icall(bindings::id_AudioEffectDelay_set_feedback_active, amount);
		}
		
		bool is_feedback_active() const {
			return ptr.godot_icall(bindings::id_AudioEffectDelay_is_feedback_active);
		}
		
		void set_feedback_delay_ms(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectDelay_set_feedback_delay_ms, amount);
		}
		
		float get_feedback_delay_ms() const {
			return ptr.godot_icall(bindings::id_AudioEffectDelay_get_feedback_delay_ms);
		}
		
		void set_feedback_level_db(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectDelay_set_feedback_level_db, amount);
		}
		
		float get_feedback_level_db() const {
			return ptr.godot_icall(bindings::id_AudioEffectDelay_get_feedback_level_db);
		}
		
		void set_feedback_lowpass(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectDelay_set_feedback_lowpass, amount);
		}
		
		float get_feedback_lowpass() const {
			return ptr.godot_icall(bindings::id_AudioEffectDelay_get_feedback_lowpass);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectDelay)).ptr();
		}
		
	}
	
	class LineEdit : Control {
		
		
		protected void _toggle_draw_caret() {
			ptr.godot_icall(bindings::id_LineEdit__toggle_draw_caret);
		}
		
		protected void _editor_settings_changed() {
			ptr.godot_icall(bindings::id_LineEdit__editor_settings_changed);
		}
		
		void set_align(int align) {
			ptr.godot_icall(bindings::id_LineEdit_set_align, align);
		}
		
		int get_align() const {
			return ptr.godot_icall(bindings::id_LineEdit_get_align);
		}
		
		protected void _gui_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_LineEdit__gui_input, arg0);
		}
		
		void clear() {
			ptr.godot_icall(bindings::id_LineEdit_clear);
		}
		
		void select(int From, int to) {
			ptr.godot_icall(bindings::id_LineEdit_select, From, to);
		}
		
		void select_all() {
			ptr.godot_icall(bindings::id_LineEdit_select_all);
		}
		
		void deselect() {
			ptr.godot_icall(bindings::id_LineEdit_deselect);
		}
		
		void set_text(const String &in text) {
			ptr.godot_icall(bindings::id_LineEdit_set_text, text);
		}
		
		String get_text() const {
			return ptr.godot_icall(bindings::id_LineEdit_get_text);
		}
		
		void set_placeholder(const String &in text) {
			ptr.godot_icall(bindings::id_LineEdit_set_placeholder, text);
		}
		
		String get_placeholder() const {
			return ptr.godot_icall(bindings::id_LineEdit_get_placeholder);
		}
		
		void set_placeholder_alpha(float alpha) {
			ptr.godot_icall(bindings::id_LineEdit_set_placeholder_alpha, alpha);
		}
		
		float get_placeholder_alpha() const {
			return ptr.godot_icall(bindings::id_LineEdit_get_placeholder_alpha);
		}
		
		void set_cursor_position(int position) {
			ptr.godot_icall(bindings::id_LineEdit_set_cursor_position, position);
		}
		
		int get_cursor_position() const {
			return ptr.godot_icall(bindings::id_LineEdit_get_cursor_position);
		}
		
		void set_expand_to_text_length(bool enabled) {
			ptr.godot_icall(bindings::id_LineEdit_set_expand_to_text_length, enabled);
		}
		
		bool get_expand_to_text_length() const {
			return ptr.godot_icall(bindings::id_LineEdit_get_expand_to_text_length);
		}
		
		void cursor_set_blink_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_LineEdit_cursor_set_blink_enabled, enabled);
		}
		
		bool cursor_get_blink_enabled() const {
			return ptr.godot_icall(bindings::id_LineEdit_cursor_get_blink_enabled);
		}
		
		void cursor_set_blink_speed(float blink_speed) {
			ptr.godot_icall(bindings::id_LineEdit_cursor_set_blink_speed, blink_speed);
		}
		
		float cursor_get_blink_speed() const {
			return ptr.godot_icall(bindings::id_LineEdit_cursor_get_blink_speed);
		}
		
		void set_max_length(int chars) {
			ptr.godot_icall(bindings::id_LineEdit_set_max_length, chars);
		}
		
		int get_max_length() const {
			return ptr.godot_icall(bindings::id_LineEdit_get_max_length);
		}
		
		void append_at_cursor(const String &in text) {
			ptr.godot_icall(bindings::id_LineEdit_append_at_cursor, text);
		}
		
		void set_editable(bool enabled) {
			ptr.godot_icall(bindings::id_LineEdit_set_editable, enabled);
		}
		
		bool is_editable() const {
			return ptr.godot_icall(bindings::id_LineEdit_is_editable);
		}
		
		void set_secret(bool enabled) {
			ptr.godot_icall(bindings::id_LineEdit_set_secret, enabled);
		}
		
		bool is_secret() const {
			return ptr.godot_icall(bindings::id_LineEdit_is_secret);
		}
		
		void menu_option(int option) {
			ptr.godot_icall(bindings::id_LineEdit_menu_option, option);
		}
		
		PopupMenu@ get_menu() const {
			PopupMenu ret = ptr.godot_icall(bindings::id_LineEdit_get_menu);
			return  ret;
		}
		
		void set_context_menu_enabled(bool enable) {
			ptr.godot_icall(bindings::id_LineEdit_set_context_menu_enabled, enable);
		}
		
		bool is_context_menu_enabled() {
			return ptr.godot_icall(bindings::id_LineEdit_is_context_menu_enabled);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_LineEdit);
		}
		
	}
	
	class Spatial : Node {
		
		
		void set_transform(const Transform &in local) {
			ptr.godot_icall(bindings::id_Spatial_set_transform, local);
		}
		
		Transform get_transform() const {
			return ptr.godot_icall(bindings::id_Spatial_get_transform);
		}
		
		void set_translation(const Vector3 &in translation) {
			ptr.godot_icall(bindings::id_Spatial_set_translation, translation);
		}
		
		Vector3 get_translation() const {
			return ptr.godot_icall(bindings::id_Spatial_get_translation);
		}
		
		void set_rotation(const Vector3 &in euler) {
			ptr.godot_icall(bindings::id_Spatial_set_rotation, euler);
		}
		
		Vector3 get_rotation() const {
			return ptr.godot_icall(bindings::id_Spatial_get_rotation);
		}
		
		void set_rotation_degrees(const Vector3 &in euler_degrees) {
			ptr.godot_icall(bindings::id_Spatial_set_rotation_degrees, euler_degrees);
		}
		
		Vector3 get_rotation_degrees() const {
			return ptr.godot_icall(bindings::id_Spatial_get_rotation_degrees);
		}
		
		void set_scale(const Vector3 &in scale) {
			ptr.godot_icall(bindings::id_Spatial_set_scale, scale);
		}
		
		Vector3 get_scale() const {
			return ptr.godot_icall(bindings::id_Spatial_get_scale);
		}
		
		void set_global_transform(const Transform &in global) {
			ptr.godot_icall(bindings::id_Spatial_set_global_transform, global);
		}
		
		Transform get_global_transform() const {
			return ptr.godot_icall(bindings::id_Spatial_get_global_transform);
		}
		
		Spatial@ get_parent_spatial() const {
			Spatial ret = ptr.godot_icall(bindings::id_Spatial_get_parent_spatial);
			return  ret;
		}
		
		void set_ignore_transform_notification(bool enabled) {
			ptr.godot_icall(bindings::id_Spatial_set_ignore_transform_notification, enabled);
		}
		
		void set_as_toplevel(bool enable) {
			ptr.godot_icall(bindings::id_Spatial_set_as_toplevel, enable);
		}
		
		bool is_set_as_toplevel() const {
			return ptr.godot_icall(bindings::id_Spatial_is_set_as_toplevel);
		}
		
		World@ get_world() const {
			World ret = ptr.godot_icall(bindings::id_Spatial_get_world);
			return  ret;
		}
		
		protected void _update_gizmo() {
			ptr.godot_icall(bindings::id_Spatial__update_gizmo);
		}
		
		void update_gizmo() {
			ptr.godot_icall(bindings::id_Spatial_update_gizmo);
		}
		
		void set_gizmo(SpatialGizmo@ gizmo) {
			ptr.godot_icall(bindings::id_Spatial_set_gizmo, gizmo);
		}
		
		SpatialGizmo@ get_gizmo() const {
			SpatialGizmo ret = ptr.godot_icall(bindings::id_Spatial_get_gizmo);
			return  ret;
		}
		
		void set_visible(bool visible) {
			ptr.godot_icall(bindings::id_Spatial_set_visible, visible);
		}
		
		bool is_visible() const {
			return ptr.godot_icall(bindings::id_Spatial_is_visible);
		}
		
		bool is_visible_in_tree() const {
			return ptr.godot_icall(bindings::id_Spatial_is_visible_in_tree);
		}
		
		void show() {
			ptr.godot_icall(bindings::id_Spatial_show);
		}
		
		void hide() {
			ptr.godot_icall(bindings::id_Spatial_hide);
		}
		
		void set_notify_local_transform(bool enable) {
			ptr.godot_icall(bindings::id_Spatial_set_notify_local_transform, enable);
		}
		
		bool is_local_transform_notification_enabled() const {
			return ptr.godot_icall(bindings::id_Spatial_is_local_transform_notification_enabled);
		}
		
		void set_notify_transform(bool enable) {
			ptr.godot_icall(bindings::id_Spatial_set_notify_transform, enable);
		}
		
		bool is_transform_notification_enabled() const {
			return ptr.godot_icall(bindings::id_Spatial_is_transform_notification_enabled);
		}
		
		void rotate(const Vector3 &in axis, float angle) {
			ptr.godot_icall(bindings::id_Spatial_rotate, axis, angle);
		}
		
		void global_rotate(const Vector3 &in axis, float angle) {
			ptr.godot_icall(bindings::id_Spatial_global_rotate, axis, angle);
		}
		
		void global_scale(const Vector3 &in scale) {
			ptr.godot_icall(bindings::id_Spatial_global_scale, scale);
		}
		
		void global_translate(const Vector3 &in offset) {
			ptr.godot_icall(bindings::id_Spatial_global_translate, offset);
		}
		
		void rotate_object_local(const Vector3 &in axis, float angle) {
			ptr.godot_icall(bindings::id_Spatial_rotate_object_local, axis, angle);
		}
		
		void scale_object_local(const Vector3 &in scale) {
			ptr.godot_icall(bindings::id_Spatial_scale_object_local, scale);
		}
		
		void translate_object_local(const Vector3 &in offset) {
			ptr.godot_icall(bindings::id_Spatial_translate_object_local, offset);
		}
		
		void rotate_x(float angle) {
			ptr.godot_icall(bindings::id_Spatial_rotate_x, angle);
		}
		
		void rotate_y(float angle) {
			ptr.godot_icall(bindings::id_Spatial_rotate_y, angle);
		}
		
		void rotate_z(float angle) {
			ptr.godot_icall(bindings::id_Spatial_rotate_z, angle);
		}
		
		void translate(const Vector3 &in offset) {
			ptr.godot_icall(bindings::id_Spatial_translate, offset);
		}
		
		void orthonormalize() {
			ptr.godot_icall(bindings::id_Spatial_orthonormalize);
		}
		
		void set_identity() {
			ptr.godot_icall(bindings::id_Spatial_set_identity);
		}
		
		void look_at(const Vector3 &in target, const Vector3 &in up) {
			ptr.godot_icall(bindings::id_Spatial_look_at, target, up);
		}
		
		void look_at_from_position(const Vector3 &in position, const Vector3 &in target, const Vector3 &in up) {
			ptr.godot_icall(bindings::id_Spatial_look_at_from_position, position, target, up);
		}
		
		Vector3 to_local(const Vector3 &in global_point) const {
			return ptr.godot_icall(bindings::id_Spatial_to_local, global_point);
		}
		
		Vector3 to_global(const Vector3 &in local_point) const {
			return ptr.godot_icall(bindings::id_Spatial_to_global, local_point);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Spatial);
		}
		
	}
	
	class _VisualScriptEditor : Object {
		
		
		void add_custom_node(const String &in name, const String &in category, Script@ script) {
			ptr.godot_icall(bindings::id__VisualScriptEditor_add_custom_node, name, category, script);
		}
		
		void remove_custom_node(const String &in name, const String &in category) {
			ptr.godot_icall(bindings::id__VisualScriptEditor_remove_custom_node, name, category);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id__VisualScriptEditor);
		}
		
	}
	
	class VisualScriptVariableGet : VisualScriptNode {
		
		
		void set_variable(const String &in name) {
			ptr.godot_icall(bindings::id_VisualScriptVariableGet_set_variable, name);
		}
		
		String get_variable() const {
			return ptr.godot_icall(bindings::id_VisualScriptVariableGet_get_variable);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptVariableGet)).ptr();
		}
		
	}
	
	class VisualScriptNode : Resource {
		
		
		VisualScript@ get_visual_script() const {
			VisualScript ret = ptr.godot_icall(bindings::id_VisualScriptNode_get_visual_script);
			return  ret;
		}
		
		void set_default_input_value(int port_idx, const Variant &in value) {
			ptr.godot_icall(bindings::id_VisualScriptNode_set_default_input_value, port_idx, value);
		}
		
		Variant get_default_input_value(int port_idx) const {
			return ptr.godot_icall(bindings::id_VisualScriptNode_get_default_input_value, port_idx);
		}
		
		void ports_changed_notify() {
			ptr.godot_icall(bindings::id_VisualScriptNode_ports_changed_notify);
		}
		
		protected void _set_default_input_values(const Array &in values) {
			ptr.godot_icall(bindings::id_VisualScriptNode__set_default_input_values, values);
		}
		
		protected Array _get_default_input_values() const {
			return ptr.godot_icall(bindings::id_VisualScriptNode__get_default_input_values);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptNode)).ptr();
		}
		
	}
	
	class SceneState : Reference {
		
		
		int get_node_count() const {
			return ptr.godot_icall(bindings::id_SceneState_get_node_count);
		}
		
		String get_node_type(int idx) const {
			return ptr.godot_icall(bindings::id_SceneState_get_node_type, idx);
		}
		
		String get_node_name(int idx) const {
			return ptr.godot_icall(bindings::id_SceneState_get_node_name, idx);
		}
		
		NodePath get_node_path(int idx, bool for_parent) const {
			return ptr.godot_icall(bindings::id_SceneState_get_node_path, idx, for_parent);
		}
		
		NodePath get_node_owner_path(int idx) const {
			return ptr.godot_icall(bindings::id_SceneState_get_node_owner_path, idx);
		}
		
		bool is_node_instance_placeholder(int idx) const {
			return ptr.godot_icall(bindings::id_SceneState_is_node_instance_placeholder, idx);
		}
		
		String get_node_instance_placeholder(int idx) const {
			return ptr.godot_icall(bindings::id_SceneState_get_node_instance_placeholder, idx);
		}
		
		PackedScene@ get_node_instance(int idx) const {
			PackedScene ret = ptr.godot_icall(bindings::id_SceneState_get_node_instance, idx);
			return  ret;
		}
		
		PoolStringArray get_node_groups(int idx) const {
			return ptr.godot_icall(bindings::id_SceneState_get_node_groups, idx);
		}
		
		int get_node_index(int idx) const {
			return ptr.godot_icall(bindings::id_SceneState_get_node_index, idx);
		}
		
		int get_node_property_count(int idx) const {
			return ptr.godot_icall(bindings::id_SceneState_get_node_property_count, idx);
		}
		
		String get_node_property_name(int idx, int prop_idx) const {
			return ptr.godot_icall(bindings::id_SceneState_get_node_property_name, idx, prop_idx);
		}
		
		Variant get_node_property_value(int idx, int prop_idx) const {
			return ptr.godot_icall(bindings::id_SceneState_get_node_property_value, idx, prop_idx);
		}
		
		int get_connection_count() const {
			return ptr.godot_icall(bindings::id_SceneState_get_connection_count);
		}
		
		NodePath get_connection_source(int idx) const {
			return ptr.godot_icall(bindings::id_SceneState_get_connection_source, idx);
		}
		
		String get_connection_signal(int idx) const {
			return ptr.godot_icall(bindings::id_SceneState_get_connection_signal, idx);
		}
		
		NodePath get_connection_target(int idx) const {
			return ptr.godot_icall(bindings::id_SceneState_get_connection_target, idx);
		}
		
		String get_connection_method(int idx) const {
			return ptr.godot_icall(bindings::id_SceneState_get_connection_method, idx);
		}
		
		int get_connection_flags(int idx) const {
			return ptr.godot_icall(bindings::id_SceneState_get_connection_flags, idx);
		}
		
		Array get_connection_binds(int idx) const {
			return ptr.godot_icall(bindings::id_SceneState_get_connection_binds, idx);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_SceneState)).ptr();
		}
		
	}
	
	class LineShape2D : Shape2D {
		
		
		void set_normal(const Vector2 &in normal) {
			ptr.godot_icall(bindings::id_LineShape2D_set_normal, normal);
		}
		
		Vector2 get_normal() const {
			return ptr.godot_icall(bindings::id_LineShape2D_get_normal);
		}
		
		void set_d(float d) {
			ptr.godot_icall(bindings::id_LineShape2D_set_d, d);
		}
		
		float get_d() const {
			return ptr.godot_icall(bindings::id_LineShape2D_get_d);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_LineShape2D)).ptr();
		}
		
	}
	
	class InputEventJoypadMotion : InputEvent {
		
		
		void set_axis(int axis) {
			ptr.godot_icall(bindings::id_InputEventJoypadMotion_set_axis, axis);
		}
		
		int get_axis() const {
			return ptr.godot_icall(bindings::id_InputEventJoypadMotion_get_axis);
		}
		
		void set_axis_value(float axis_value) {
			ptr.godot_icall(bindings::id_InputEventJoypadMotion_set_axis_value, axis_value);
		}
		
		float get_axis_value() const {
			return ptr.godot_icall(bindings::id_InputEventJoypadMotion_get_axis_value);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_InputEventJoypadMotion)).ptr();
		}
		
	}
	
	class Translation : Resource {
		
		
		void set_locale(const String &in locale) {
			ptr.godot_icall(bindings::id_Translation_set_locale, locale);
		}
		
		String get_locale() const {
			return ptr.godot_icall(bindings::id_Translation_get_locale);
		}
		
		void add_message(const String &in src_message, const String &in xlated_message) {
			ptr.godot_icall(bindings::id_Translation_add_message, src_message, xlated_message);
		}
		
		String get_message(const String &in src_message) const {
			return ptr.godot_icall(bindings::id_Translation_get_message, src_message);
		}
		
		void erase_message(const String &in src_message) {
			ptr.godot_icall(bindings::id_Translation_erase_message, src_message);
		}
		
		PoolStringArray get_message_list() const {
			return ptr.godot_icall(bindings::id_Translation_get_message_list);
		}
		
		int get_message_count() const {
			return ptr.godot_icall(bindings::id_Translation_get_message_count);
		}
		
		protected void _set_messages(const PoolStringArray &in arg0) {
			ptr.godot_icall(bindings::id_Translation__set_messages, arg0);
		}
		
		protected PoolStringArray _get_messages() const {
			return ptr.godot_icall(bindings::id_Translation__get_messages);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Translation)).ptr();
		}
		
	}
	
	class Input : Object {
		
		
		bool is_key_pressed(int scancode) const {
			return ptr.godot_icall(bindings::id_Input_is_key_pressed, scancode);
		}
		
		bool is_mouse_button_pressed(int button) const {
			return ptr.godot_icall(bindings::id_Input_is_mouse_button_pressed, button);
		}
		
		bool is_joy_button_pressed(int device, int button) const {
			return ptr.godot_icall(bindings::id_Input_is_joy_button_pressed, device, button);
		}
		
		bool is_action_pressed(const String &in action) const {
			return ptr.godot_icall(bindings::id_Input_is_action_pressed, action);
		}
		
		bool is_action_just_pressed(const String &in action) const {
			return ptr.godot_icall(bindings::id_Input_is_action_just_pressed, action);
		}
		
		bool is_action_just_released(const String &in action) const {
			return ptr.godot_icall(bindings::id_Input_is_action_just_released, action);
		}
		
		void add_joy_mapping(const String &in mapping, bool update_existing) {
			ptr.godot_icall(bindings::id_Input_add_joy_mapping, mapping, update_existing);
		}
		
		void remove_joy_mapping(const String &in guid) {
			ptr.godot_icall(bindings::id_Input_remove_joy_mapping, guid);
		}
		
		void joy_connection_changed(int device, bool connected, const String &in name, const String &in guid) {
			ptr.godot_icall(bindings::id_Input_joy_connection_changed, device, connected, name, guid);
		}
		
		bool is_joy_known(int device) {
			return ptr.godot_icall(bindings::id_Input_is_joy_known, device);
		}
		
		float get_joy_axis(int device, int axis) const {
			return ptr.godot_icall(bindings::id_Input_get_joy_axis, device, axis);
		}
		
		String get_joy_name(int device) {
			return ptr.godot_icall(bindings::id_Input_get_joy_name, device);
		}
		
		String get_joy_guid(int device) const {
			return ptr.godot_icall(bindings::id_Input_get_joy_guid, device);
		}
		
		Array get_connected_joypads() {
			return ptr.godot_icall(bindings::id_Input_get_connected_joypads);
		}
		
		Vector2 get_joy_vibration_strength(int device) {
			return ptr.godot_icall(bindings::id_Input_get_joy_vibration_strength, device);
		}
		
		float get_joy_vibration_duration(int device) {
			return ptr.godot_icall(bindings::id_Input_get_joy_vibration_duration, device);
		}
		
		String get_joy_button_string(int button_index) {
			return ptr.godot_icall(bindings::id_Input_get_joy_button_string, button_index);
		}
		
		int get_joy_button_index_from_string(const String &in button) {
			return ptr.godot_icall(bindings::id_Input_get_joy_button_index_from_string, button);
		}
		
		String get_joy_axis_string(int axis_index) {
			return ptr.godot_icall(bindings::id_Input_get_joy_axis_string, axis_index);
		}
		
		int get_joy_axis_index_from_string(const String &in axis) {
			return ptr.godot_icall(bindings::id_Input_get_joy_axis_index_from_string, axis);
		}
		
		void start_joy_vibration(int device, float weak_magnitude, float strong_magnitude, float duration) {
			ptr.godot_icall(bindings::id_Input_start_joy_vibration, device, weak_magnitude, strong_magnitude, duration);
		}
		
		void stop_joy_vibration(int device) {
			ptr.godot_icall(bindings::id_Input_stop_joy_vibration, device);
		}
		
		Vector3 get_gravity() const {
			return ptr.godot_icall(bindings::id_Input_get_gravity);
		}
		
		Vector3 get_accelerometer() const {
			return ptr.godot_icall(bindings::id_Input_get_accelerometer);
		}
		
		Vector3 get_magnetometer() const {
			return ptr.godot_icall(bindings::id_Input_get_magnetometer);
		}
		
		Vector3 get_gyroscope() const {
			return ptr.godot_icall(bindings::id_Input_get_gyroscope);
		}
		
		Vector2 get_last_mouse_speed() const {
			return ptr.godot_icall(bindings::id_Input_get_last_mouse_speed);
		}
		
		int get_mouse_button_mask() const {
			return ptr.godot_icall(bindings::id_Input_get_mouse_button_mask);
		}
		
		void set_mouse_mode(int mode) {
			ptr.godot_icall(bindings::id_Input_set_mouse_mode, mode);
		}
		
		int get_mouse_mode() const {
			return ptr.godot_icall(bindings::id_Input_get_mouse_mode);
		}
		
		void warp_mouse_position(const Vector2 &in to) {
			ptr.godot_icall(bindings::id_Input_warp_mouse_position, to);
		}
		
		void action_press(const String &in action) {
			ptr.godot_icall(bindings::id_Input_action_press, action);
		}
		
		void action_release(const String &in action) {
			ptr.godot_icall(bindings::id_Input_action_release, action);
		}
		
		void set_custom_mouse_cursor(Resource@ image, int shape, const Vector2 &in hotspot) {
			ptr.godot_icall(bindings::id_Input_set_custom_mouse_cursor, image, shape, hotspot);
		}
		
		void parse_input_event(InputEvent@ event) {
			ptr.godot_icall(bindings::id_Input_parse_input_event, event);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Input);
		}
		
	}
	
	class InputEventWithModifiers : InputEvent {
		
		
		void set_alt(bool enable) {
			ptr.godot_icall(bindings::id_InputEventWithModifiers_set_alt, enable);
		}
		
		bool get_alt() const {
			return ptr.godot_icall(bindings::id_InputEventWithModifiers_get_alt);
		}
		
		void set_shift(bool enable) {
			ptr.godot_icall(bindings::id_InputEventWithModifiers_set_shift, enable);
		}
		
		bool get_shift() const {
			return ptr.godot_icall(bindings::id_InputEventWithModifiers_get_shift);
		}
		
		void set_control(bool enable) {
			ptr.godot_icall(bindings::id_InputEventWithModifiers_set_control, enable);
		}
		
		bool get_control() const {
			return ptr.godot_icall(bindings::id_InputEventWithModifiers_get_control);
		}
		
		void set_metakey(bool enable) {
			ptr.godot_icall(bindings::id_InputEventWithModifiers_set_metakey, enable);
		}
		
		bool get_metakey() const {
			return ptr.godot_icall(bindings::id_InputEventWithModifiers_get_metakey);
		}
		
		void set_command(bool enable) {
			ptr.godot_icall(bindings::id_InputEventWithModifiers_set_command, enable);
		}
		
		bool get_command() const {
			return ptr.godot_icall(bindings::id_InputEventWithModifiers_get_command);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_InputEventWithModifiers)).ptr();
		}
		
	}
	
	class InputEventAction : InputEvent {
		
		
		void set_action(const String &in action) {
			ptr.godot_icall(bindings::id_InputEventAction_set_action, action);
		}
		
		String get_action() const {
			return ptr.godot_icall(bindings::id_InputEventAction_get_action);
		}
		
		void set_pressed(bool pressed) {
			ptr.godot_icall(bindings::id_InputEventAction_set_pressed, pressed);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_InputEventAction)).ptr();
		}
		
	}
	
	class InputEventPanGesture : InputEventGesture {
		
		
		void set_delta(const Vector2 &in delta) {
			ptr.godot_icall(bindings::id_InputEventPanGesture_set_delta, delta);
		}
		
		Vector2 get_delta() const {
			return ptr.godot_icall(bindings::id_InputEventPanGesture_get_delta);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_InputEventPanGesture)).ptr();
		}
		
	}
	
	class Panel : Control {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Panel);
		}
		
	}
	
	class FileDialog : ConfirmationDialog {
		
		
		protected void _unhandled_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_FileDialog__unhandled_input, arg0);
		}
		
		protected void _tree_selected() {
			ptr.godot_icall(bindings::id_FileDialog__tree_selected);
		}
		
		protected void _tree_db_selected() {
			ptr.godot_icall(bindings::id_FileDialog__tree_db_selected);
		}
		
		protected void _dir_entered(const String &in arg0) {
			ptr.godot_icall(bindings::id_FileDialog__dir_entered, arg0);
		}
		
		protected void _file_entered(const String &in arg0) {
			ptr.godot_icall(bindings::id_FileDialog__file_entered, arg0);
		}
		
		protected void _action_pressed() {
			ptr.godot_icall(bindings::id_FileDialog__action_pressed);
		}
		
		protected void _cancel_pressed() {
			ptr.godot_icall(bindings::id_FileDialog__cancel_pressed);
		}
		
		protected void _filter_selected(int arg0) {
			ptr.godot_icall(bindings::id_FileDialog__filter_selected, arg0);
		}
		
		protected void _save_confirm_pressed() {
			ptr.godot_icall(bindings::id_FileDialog__save_confirm_pressed);
		}
		
		void clear_filters() {
			ptr.godot_icall(bindings::id_FileDialog_clear_filters);
		}
		
		void add_filter(const String &in filter) {
			ptr.godot_icall(bindings::id_FileDialog_add_filter, filter);
		}
		
		void set_filters(const PoolStringArray &in filters) {
			ptr.godot_icall(bindings::id_FileDialog_set_filters, filters);
		}
		
		PoolStringArray get_filters() const {
			return ptr.godot_icall(bindings::id_FileDialog_get_filters);
		}
		
		String get_current_dir() const {
			return ptr.godot_icall(bindings::id_FileDialog_get_current_dir);
		}
		
		String get_current_file() const {
			return ptr.godot_icall(bindings::id_FileDialog_get_current_file);
		}
		
		String get_current_path() const {
			return ptr.godot_icall(bindings::id_FileDialog_get_current_path);
		}
		
		void set_current_dir(const String &in dir) {
			ptr.godot_icall(bindings::id_FileDialog_set_current_dir, dir);
		}
		
		void set_current_file(const String &in file) {
			ptr.godot_icall(bindings::id_FileDialog_set_current_file, file);
		}
		
		void set_current_path(const String &in path) {
			ptr.godot_icall(bindings::id_FileDialog_set_current_path, path);
		}
		
		void set_mode_overrides_title(bool Override) {
			ptr.godot_icall(bindings::id_FileDialog_set_mode_overrides_title, Override);
		}
		
		bool is_mode_overriding_title() const {
			return ptr.godot_icall(bindings::id_FileDialog_is_mode_overriding_title);
		}
		
		void set_mode(int mode) {
			ptr.godot_icall(bindings::id_FileDialog_set_mode, mode);
		}
		
		int get_mode() const {
			return ptr.godot_icall(bindings::id_FileDialog_get_mode);
		}
		
		VBoxContainer@ get_vbox() {
			VBoxContainer ret = ptr.godot_icall(bindings::id_FileDialog_get_vbox);
			return  ret;
		}
		
		void set_access(int access) {
			ptr.godot_icall(bindings::id_FileDialog_set_access, access);
		}
		
		int get_access() const {
			return ptr.godot_icall(bindings::id_FileDialog_get_access);
		}
		
		void set_show_hidden_files(bool show) {
			ptr.godot_icall(bindings::id_FileDialog_set_show_hidden_files, show);
		}
		
		bool is_showing_hidden_files() const {
			return ptr.godot_icall(bindings::id_FileDialog_is_showing_hidden_files);
		}
		
		protected void _select_drive(int arg0) {
			ptr.godot_icall(bindings::id_FileDialog__select_drive, arg0);
		}
		
		protected void _make_dir() {
			ptr.godot_icall(bindings::id_FileDialog__make_dir);
		}
		
		protected void _make_dir_confirm() {
			ptr.godot_icall(bindings::id_FileDialog__make_dir_confirm);
		}
		
		protected void _update_file_list() {
			ptr.godot_icall(bindings::id_FileDialog__update_file_list);
		}
		
		protected void _update_dir() {
			ptr.godot_icall(bindings::id_FileDialog__update_dir);
		}
		
		protected void _go_up() {
			ptr.godot_icall(bindings::id_FileDialog__go_up);
		}
		
		void deselect_items() {
			ptr.godot_icall(bindings::id_FileDialog_deselect_items);
		}
		
		void invalidate() {
			ptr.godot_icall(bindings::id_FileDialog_invalidate);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_FileDialog);
		}
		
	}
	
	class Navigation : Spatial {
		
		
		int navmesh_add(NavigationMesh@ mesh, const Transform &in xform, Object@ owner) {
			return ptr.godot_icall(bindings::id_Navigation_navmesh_add, mesh, xform, owner);
		}
		
		void navmesh_set_transform(int id, const Transform &in xform) {
			ptr.godot_icall(bindings::id_Navigation_navmesh_set_transform, id, xform);
		}
		
		void navmesh_remove(int id) {
			ptr.godot_icall(bindings::id_Navigation_navmesh_remove, id);
		}
		
		PoolVector3Array get_simple_path(const Vector3 &in start, const Vector3 &in end, bool optimize) {
			return ptr.godot_icall(bindings::id_Navigation_get_simple_path, start, end, optimize);
		}
		
		Vector3 get_closest_point_to_segment(const Vector3 &in start, const Vector3 &in end, bool use_collision) {
			return ptr.godot_icall(bindings::id_Navigation_get_closest_point_to_segment, start, end, use_collision);
		}
		
		Vector3 get_closest_point(const Vector3 &in to_point) {
			return ptr.godot_icall(bindings::id_Navigation_get_closest_point, to_point);
		}
		
		Vector3 get_closest_point_normal(const Vector3 &in to_point) {
			return ptr.godot_icall(bindings::id_Navigation_get_closest_point_normal, to_point);
		}
		
		Object@ get_closest_point_owner(const Vector3 &in to_point) {
			Object ret = ptr.godot_icall(bindings::id_Navigation_get_closest_point_owner, to_point);
			return  ret;
		}
		
		void set_up_vector(const Vector3 &in up) {
			ptr.godot_icall(bindings::id_Navigation_set_up_vector, up);
		}
		
		Vector3 get_up_vector() const {
			return ptr.godot_icall(bindings::id_Navigation_get_up_vector);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Navigation);
		}
		
	}
	
	class MobileVRInterface : ARVRInterface {
		
		
		void set_iod(float iod) {
			ptr.godot_icall(bindings::id_MobileVRInterface_set_iod, iod);
		}
		
		float get_iod() const {
			return ptr.godot_icall(bindings::id_MobileVRInterface_get_iod);
		}
		
		void set_display_width(float display_width) {
			ptr.godot_icall(bindings::id_MobileVRInterface_set_display_width, display_width);
		}
		
		float get_display_width() const {
			return ptr.godot_icall(bindings::id_MobileVRInterface_get_display_width);
		}
		
		void set_display_to_lens(float display_to_lens) {
			ptr.godot_icall(bindings::id_MobileVRInterface_set_display_to_lens, display_to_lens);
		}
		
		float get_display_to_lens() const {
			return ptr.godot_icall(bindings::id_MobileVRInterface_get_display_to_lens);
		}
		
		void set_oversample(float oversample) {
			ptr.godot_icall(bindings::id_MobileVRInterface_set_oversample, oversample);
		}
		
		float get_oversample() const {
			return ptr.godot_icall(bindings::id_MobileVRInterface_get_oversample);
		}
		
		void set_k1(float k) {
			ptr.godot_icall(bindings::id_MobileVRInterface_set_k1, k);
		}
		
		float get_k1() const {
			return ptr.godot_icall(bindings::id_MobileVRInterface_get_k1);
		}
		
		void set_k2(float k) {
			ptr.godot_icall(bindings::id_MobileVRInterface_set_k2, k);
		}
		
		float get_k2() const {
			return ptr.godot_icall(bindings::id_MobileVRInterface_get_k2);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_MobileVRInterface)).ptr();
		}
		
	}
	
	class EditorImportPlugin : Reference {
		
		
		String get_importer_name() {
			return String();
		}
		
		String get_visible_name() {
			return String();
		}
		
		int get_preset_count() {
			return 0;
		}
		
		String get_preset_name(int preset) {
			return String();
		}
		
		Array get_recognized_extensions() {
			return Array();
		}
		
		Array get_import_options(int preset) {
			return Array();
		}
		
		String get_save_extension() {
			return String();
		}
		
		String get_resource_type() {
			return String();
		}
		
		bool get_option_visibility(const String &in option, const Dictionary &in options) {
			return false;
		}
		
		int Import(const String &in source_file, const String &in save_path, const Dictionary &in options, const Array &in r_platform_variants, const Array &in r_gen_files) {
			return 0;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_EditorImportPlugin)).ptr();
		}
		
	}
	
	class Shape : Resource {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Shape)).ptr();
		}
		
	}
	
	class AudioEffectBandPassFilter : AudioEffectFilter {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectBandPassFilter)).ptr();
		}
		
	}
	
	class AudioEffectAmplify : AudioEffect {
		
		
		void set_volume_db(float volume) {
			ptr.godot_icall(bindings::id_AudioEffectAmplify_set_volume_db, volume);
		}
		
		float get_volume_db() const {
			return ptr.godot_icall(bindings::id_AudioEffectAmplify_get_volume_db);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectAmplify)).ptr();
		}
		
	}
	
	class InputEventMouseMotion : InputEventMouse {
		
		
		void set_relative(const Vector2 &in relative) {
			ptr.godot_icall(bindings::id_InputEventMouseMotion_set_relative, relative);
		}
		
		Vector2 get_relative() const {
			return ptr.godot_icall(bindings::id_InputEventMouseMotion_get_relative);
		}
		
		void set_speed(const Vector2 &in speed) {
			ptr.godot_icall(bindings::id_InputEventMouseMotion_set_speed, speed);
		}
		
		Vector2 get_speed() const {
			return ptr.godot_icall(bindings::id_InputEventMouseMotion_get_speed);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_InputEventMouseMotion)).ptr();
		}
		
	}
	
	class InputEventGesture : InputEventWithModifiers {
		
		
		void set_position(const Vector2 &in position) {
			ptr.godot_icall(bindings::id_InputEventGesture_set_position, position);
		}
		
		Vector2 get_position() const {
			return ptr.godot_icall(bindings::id_InputEventGesture_get_position);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_InputEventGesture)).ptr();
		}
		
	}
	
	class MenuButton : Button {
		
		
		PopupMenu@ get_popup() const {
			PopupMenu ret = ptr.godot_icall(bindings::id_MenuButton_get_popup);
			return  ret;
		}
		
		protected void _unhandled_key_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_MenuButton__unhandled_key_input, arg0);
		}
		
		protected void _set_items(const Array &in arg0) {
			ptr.godot_icall(bindings::id_MenuButton__set_items, arg0);
		}
		
		protected Array _get_items() const {
			return ptr.godot_icall(bindings::id_MenuButton__get_items);
		}
		
		void set_disable_shortcuts(bool disabled) {
			ptr.godot_icall(bindings::id_MenuButton_set_disable_shortcuts, disabled);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_MenuButton);
		}
		
	}
	
	class Separator : Control {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Separator);
		}
		
	}
	
	class AnimatedSprite3D : SpriteBase3D {
		
		
		void set_sprite_frames(SpriteFrames@ sprite_frames) {
			ptr.godot_icall(bindings::id_AnimatedSprite3D_set_sprite_frames, sprite_frames);
		}
		
		SpriteFrames@ get_sprite_frames() const {
			SpriteFrames ret = ptr.godot_icall(bindings::id_AnimatedSprite3D_get_sprite_frames);
			return  ret;
		}
		
		void set_animation(const String &in animation) {
			ptr.godot_icall(bindings::id_AnimatedSprite3D_set_animation, animation);
		}
		
		String get_animation() const {
			return ptr.godot_icall(bindings::id_AnimatedSprite3D_get_animation);
		}
		
		protected void _set_playing(bool playing) {
			ptr.godot_icall(bindings::id_AnimatedSprite3D__set_playing, playing);
		}
		
		protected bool _is_playing() const {
			return ptr.godot_icall(bindings::id_AnimatedSprite3D__is_playing);
		}
		
		void play(const String &in anim) {
			ptr.godot_icall(bindings::id_AnimatedSprite3D_play, anim);
		}
		
		void stop() {
			ptr.godot_icall(bindings::id_AnimatedSprite3D_stop);
		}
		
		bool is_playing() const {
			return ptr.godot_icall(bindings::id_AnimatedSprite3D_is_playing);
		}
		
		void set_frame(int frame) {
			ptr.godot_icall(bindings::id_AnimatedSprite3D_set_frame, frame);
		}
		
		int get_frame() const {
			return ptr.godot_icall(bindings::id_AnimatedSprite3D_get_frame);
		}
		
		protected void _res_changed() {
			ptr.godot_icall(bindings::id_AnimatedSprite3D__res_changed);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_AnimatedSprite3D);
		}
		
	}
	
	class PhysicsBody : CollisionObject {
		
		
		void set_collision_layer(int layer) {
			ptr.godot_icall(bindings::id_PhysicsBody_set_collision_layer, layer);
		}
		
		int get_collision_layer() const {
			return ptr.godot_icall(bindings::id_PhysicsBody_get_collision_layer);
		}
		
		void set_collision_mask(int mask) {
			ptr.godot_icall(bindings::id_PhysicsBody_set_collision_mask, mask);
		}
		
		int get_collision_mask() const {
			return ptr.godot_icall(bindings::id_PhysicsBody_get_collision_mask);
		}
		
		void set_collision_mask_bit(int bit, bool value) {
			ptr.godot_icall(bindings::id_PhysicsBody_set_collision_mask_bit, bit, value);
		}
		
		bool get_collision_mask_bit(int bit) const {
			return ptr.godot_icall(bindings::id_PhysicsBody_get_collision_mask_bit, bit);
		}
		
		void set_collision_layer_bit(int bit, bool value) {
			ptr.godot_icall(bindings::id_PhysicsBody_set_collision_layer_bit, bit, value);
		}
		
		bool get_collision_layer_bit(int bit) const {
			return ptr.godot_icall(bindings::id_PhysicsBody_get_collision_layer_bit, bit);
		}
		
		protected void _set_layers(int mask) {
			ptr.godot_icall(bindings::id_PhysicsBody__set_layers, mask);
		}
		
		protected int _get_layers() const {
			return ptr.godot_icall(bindings::id_PhysicsBody__get_layers);
		}
		
		void add_collision_exception_with(Node@ body) {
			ptr.godot_icall(bindings::id_PhysicsBody_add_collision_exception_with, body);
		}
		
		void remove_collision_exception_with(Node@ body) {
			ptr.godot_icall(bindings::id_PhysicsBody_remove_collision_exception_with, body);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_PhysicsBody);
		}
		
	}
	
	class VisualScriptEngineSingleton : VisualScriptNode {
		
		
		void set_singleton(const String &in name) {
			ptr.godot_icall(bindings::id_VisualScriptEngineSingleton_set_singleton, name);
		}
		
		String get_singleton() {
			return ptr.godot_icall(bindings::id_VisualScriptEngineSingleton_get_singleton);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptEngineSingleton)).ptr();
		}
		
	}
	
	class GDNative : Reference {
		
		
		void set_library(GDNativeLibrary@ library) {
			ptr.godot_icall(bindings::id_GDNative_set_library, library);
		}
		
		GDNativeLibrary@ get_library() {
			GDNativeLibrary ret = ptr.godot_icall(bindings::id_GDNative_get_library);
			return  ret;
		}
		
		bool initialize() {
			return ptr.godot_icall(bindings::id_GDNative_initialize);
		}
		
		bool terminate() {
			return ptr.godot_icall(bindings::id_GDNative_terminate);
		}
		
		Variant call_native(const String &in calling_type, const String &in procedure_name, const Array &in arguments) {
			return ptr.godot_icall(bindings::id_GDNative_call_native, calling_type, procedure_name, arguments);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_GDNative)).ptr();
		}
		
	}
	
	class ParallaxLayer : Node2D {
		
		
		void set_motion_scale(const Vector2 &in scale) {
			ptr.godot_icall(bindings::id_ParallaxLayer_set_motion_scale, scale);
		}
		
		Vector2 get_motion_scale() const {
			return ptr.godot_icall(bindings::id_ParallaxLayer_get_motion_scale);
		}
		
		void set_motion_offset(const Vector2 &in offset) {
			ptr.godot_icall(bindings::id_ParallaxLayer_set_motion_offset, offset);
		}
		
		Vector2 get_motion_offset() const {
			return ptr.godot_icall(bindings::id_ParallaxLayer_get_motion_offset);
		}
		
		void set_mirroring(const Vector2 &in mirror) {
			ptr.godot_icall(bindings::id_ParallaxLayer_set_mirroring, mirror);
		}
		
		Vector2 get_mirroring() const {
			return ptr.godot_icall(bindings::id_ParallaxLayer_get_mirroring);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ParallaxLayer);
		}
		
	}
	
	class ARVRServer : Object {
		
		
		float get_world_scale() const {
			return ptr.godot_icall(bindings::id_ARVRServer_get_world_scale);
		}
		
		void set_world_scale(float arg0) {
			ptr.godot_icall(bindings::id_ARVRServer_set_world_scale, arg0);
		}
		
		Transform get_reference_frame() const {
			return ptr.godot_icall(bindings::id_ARVRServer_get_reference_frame);
		}
		
		void center_on_hmd(int rotation_mode, bool keep_height) {
			ptr.godot_icall(bindings::id_ARVRServer_center_on_hmd, rotation_mode, keep_height);
		}
		
		int get_interface_count() const {
			return ptr.godot_icall(bindings::id_ARVRServer_get_interface_count);
		}
		
		ARVRInterface@ get_interface(int idx) const {
			ARVRInterface ret = ptr.godot_icall(bindings::id_ARVRServer_get_interface, idx);
			return  ret;
		}
		
		Array get_interfaces() const {
			return ptr.godot_icall(bindings::id_ARVRServer_get_interfaces);
		}
		
		ARVRInterface@ find_interface(const String &in name) const {
			ARVRInterface ret = ptr.godot_icall(bindings::id_ARVRServer_find_interface, name);
			return  ret;
		}
		
		int get_tracker_count() const {
			return ptr.godot_icall(bindings::id_ARVRServer_get_tracker_count);
		}
		
		ARVRPositionalTracker@ get_tracker(int idx) const {
			ARVRPositionalTracker ret = ptr.godot_icall(bindings::id_ARVRServer_get_tracker, idx);
			return  ret;
		}
		
		void set_primary_interface(ARVRInterface@ Interface) {
			ptr.godot_icall(bindings::id_ARVRServer_set_primary_interface, Interface);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ARVRServer);
		}
		
	}
	
	class StreamPeerBuffer : StreamPeer {
		
		
		void seek(int position) {
			ptr.godot_icall(bindings::id_StreamPeerBuffer_seek, position);
		}
		
		int get_size() const {
			return ptr.godot_icall(bindings::id_StreamPeerBuffer_get_size);
		}
		
		int get_position() const {
			return ptr.godot_icall(bindings::id_StreamPeerBuffer_get_position);
		}
		
		void resize(int size) {
			ptr.godot_icall(bindings::id_StreamPeerBuffer_resize, size);
		}
		
		void set_data_array(const PoolByteArray &in data) {
			ptr.godot_icall(bindings::id_StreamPeerBuffer_set_data_array, data);
		}
		
		PoolByteArray get_data_array() const {
			return ptr.godot_icall(bindings::id_StreamPeerBuffer_get_data_array);
		}
		
		void clear() {
			ptr.godot_icall(bindings::id_StreamPeerBuffer_clear);
		}
		
		StreamPeerBuffer@ duplicate() const {
			StreamPeerBuffer ret = ptr.godot_icall(bindings::id_StreamPeerBuffer_duplicate);
			return  ret;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_StreamPeerBuffer)).ptr();
		}
		
	}
	
	class _Mutex : Reference {
		
		
		void lock() {
			ptr.godot_icall(bindings::id__Mutex_lock);
		}
		
		int try_lock() {
			return ptr.godot_icall(bindings::id__Mutex_try_lock);
		}
		
		void unlock() {
			ptr.godot_icall(bindings::id__Mutex_unlock);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id__Mutex)).ptr();
		}
		
	}
	
	class ScrollContainer : Container {
		
		
		protected void _scroll_moved(float arg0) {
			ptr.godot_icall(bindings::id_ScrollContainer__scroll_moved, arg0);
		}
		
		protected void _gui_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_ScrollContainer__gui_input, arg0);
		}
		
		void set_enable_h_scroll(bool enable) {
			ptr.godot_icall(bindings::id_ScrollContainer_set_enable_h_scroll, enable);
		}
		
		bool is_h_scroll_enabled() const {
			return ptr.godot_icall(bindings::id_ScrollContainer_is_h_scroll_enabled);
		}
		
		void set_enable_v_scroll(bool enable) {
			ptr.godot_icall(bindings::id_ScrollContainer_set_enable_v_scroll, enable);
		}
		
		bool is_v_scroll_enabled() const {
			return ptr.godot_icall(bindings::id_ScrollContainer_is_v_scroll_enabled);
		}
		
		protected void _update_scrollbar_position() {
			ptr.godot_icall(bindings::id_ScrollContainer__update_scrollbar_position);
		}
		
		void set_h_scroll(int value) {
			ptr.godot_icall(bindings::id_ScrollContainer_set_h_scroll, value);
		}
		
		int get_h_scroll() const {
			return ptr.godot_icall(bindings::id_ScrollContainer_get_h_scroll);
		}
		
		void set_v_scroll(int value) {
			ptr.godot_icall(bindings::id_ScrollContainer_set_v_scroll, value);
		}
		
		int get_v_scroll() const {
			return ptr.godot_icall(bindings::id_ScrollContainer_get_v_scroll);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ScrollContainer);
		}
		
	}
	
	class NavigationMeshInstance : Spatial {
		
		
		void set_navigation_mesh(NavigationMesh@ navmesh) {
			ptr.godot_icall(bindings::id_NavigationMeshInstance_set_navigation_mesh, navmesh);
		}
		
		NavigationMesh@ get_navigation_mesh() const {
			NavigationMesh ret = ptr.godot_icall(bindings::id_NavigationMeshInstance_get_navigation_mesh);
			return  ret;
		}
		
		void set_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_NavigationMeshInstance_set_enabled, enabled);
		}
		
		bool is_enabled() const {
			return ptr.godot_icall(bindings::id_NavigationMeshInstance_is_enabled);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_NavigationMeshInstance);
		}
		
	}
	
	class VisualScriptIterator : VisualScriptNode {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptIterator)).ptr();
		}
		
	}
	
	class RigidBody2D : PhysicsBody2D {
		
		
		protected void _integrate_forces(Physics2DDirectBodyState@ state) {
			
		}
		
		void set_mode(int mode) {
			ptr.godot_icall(bindings::id_RigidBody2D_set_mode, mode);
		}
		
		int get_mode() const {
			return ptr.godot_icall(bindings::id_RigidBody2D_get_mode);
		}
		
		void set_mass(float mass) {
			ptr.godot_icall(bindings::id_RigidBody2D_set_mass, mass);
		}
		
		float get_mass() const {
			return ptr.godot_icall(bindings::id_RigidBody2D_get_mass);
		}
		
		float get_inertia() const {
			return ptr.godot_icall(bindings::id_RigidBody2D_get_inertia);
		}
		
		void set_inertia(float inertia) {
			ptr.godot_icall(bindings::id_RigidBody2D_set_inertia, inertia);
		}
		
		void set_weight(float weight) {
			ptr.godot_icall(bindings::id_RigidBody2D_set_weight, weight);
		}
		
		float get_weight() const {
			return ptr.godot_icall(bindings::id_RigidBody2D_get_weight);
		}
		
		void set_friction(float friction) {
			ptr.godot_icall(bindings::id_RigidBody2D_set_friction, friction);
		}
		
		float get_friction() const {
			return ptr.godot_icall(bindings::id_RigidBody2D_get_friction);
		}
		
		void set_bounce(float bounce) {
			ptr.godot_icall(bindings::id_RigidBody2D_set_bounce, bounce);
		}
		
		float get_bounce() const {
			return ptr.godot_icall(bindings::id_RigidBody2D_get_bounce);
		}
		
		void set_gravity_scale(float gravity_scale) {
			ptr.godot_icall(bindings::id_RigidBody2D_set_gravity_scale, gravity_scale);
		}
		
		float get_gravity_scale() const {
			return ptr.godot_icall(bindings::id_RigidBody2D_get_gravity_scale);
		}
		
		void set_linear_damp(float linear_damp) {
			ptr.godot_icall(bindings::id_RigidBody2D_set_linear_damp, linear_damp);
		}
		
		float get_linear_damp() const {
			return ptr.godot_icall(bindings::id_RigidBody2D_get_linear_damp);
		}
		
		void set_angular_damp(float angular_damp) {
			ptr.godot_icall(bindings::id_RigidBody2D_set_angular_damp, angular_damp);
		}
		
		float get_angular_damp() const {
			return ptr.godot_icall(bindings::id_RigidBody2D_get_angular_damp);
		}
		
		void set_linear_velocity(const Vector2 &in linear_velocity) {
			ptr.godot_icall(bindings::id_RigidBody2D_set_linear_velocity, linear_velocity);
		}
		
		Vector2 get_linear_velocity() const {
			return ptr.godot_icall(bindings::id_RigidBody2D_get_linear_velocity);
		}
		
		void set_angular_velocity(float angular_velocity) {
			ptr.godot_icall(bindings::id_RigidBody2D_set_angular_velocity, angular_velocity);
		}
		
		float get_angular_velocity() const {
			return ptr.godot_icall(bindings::id_RigidBody2D_get_angular_velocity);
		}
		
		void set_max_contacts_reported(int amount) {
			ptr.godot_icall(bindings::id_RigidBody2D_set_max_contacts_reported, amount);
		}
		
		int get_max_contacts_reported() const {
			return ptr.godot_icall(bindings::id_RigidBody2D_get_max_contacts_reported);
		}
		
		void set_use_custom_integrator(bool enable) {
			ptr.godot_icall(bindings::id_RigidBody2D_set_use_custom_integrator, enable);
		}
		
		bool is_using_custom_integrator() {
			return ptr.godot_icall(bindings::id_RigidBody2D_is_using_custom_integrator);
		}
		
		void set_contact_monitor(bool enabled) {
			ptr.godot_icall(bindings::id_RigidBody2D_set_contact_monitor, enabled);
		}
		
		bool is_contact_monitor_enabled() const {
			return ptr.godot_icall(bindings::id_RigidBody2D_is_contact_monitor_enabled);
		}
		
		void set_continuous_collision_detection_mode(int mode) {
			ptr.godot_icall(bindings::id_RigidBody2D_set_continuous_collision_detection_mode, mode);
		}
		
		int get_continuous_collision_detection_mode() const {
			return ptr.godot_icall(bindings::id_RigidBody2D_get_continuous_collision_detection_mode);
		}
		
		void set_axis_velocity(const Vector2 &in axis_velocity) {
			ptr.godot_icall(bindings::id_RigidBody2D_set_axis_velocity, axis_velocity);
		}
		
		void apply_impulse(const Vector2 &in offset, const Vector2 &in impulse) {
			ptr.godot_icall(bindings::id_RigidBody2D_apply_impulse, offset, impulse);
		}
		
		void set_applied_force(const Vector2 &in force) {
			ptr.godot_icall(bindings::id_RigidBody2D_set_applied_force, force);
		}
		
		Vector2 get_applied_force() const {
			return ptr.godot_icall(bindings::id_RigidBody2D_get_applied_force);
		}
		
		void set_applied_torque(float torque) {
			ptr.godot_icall(bindings::id_RigidBody2D_set_applied_torque, torque);
		}
		
		float get_applied_torque() const {
			return ptr.godot_icall(bindings::id_RigidBody2D_get_applied_torque);
		}
		
		void add_force(const Vector2 &in offset, const Vector2 &in force) {
			ptr.godot_icall(bindings::id_RigidBody2D_add_force, offset, force);
		}
		
		void set_sleeping(bool sleeping) {
			ptr.godot_icall(bindings::id_RigidBody2D_set_sleeping, sleeping);
		}
		
		bool is_sleeping() const {
			return ptr.godot_icall(bindings::id_RigidBody2D_is_sleeping);
		}
		
		void set_can_sleep(bool able_to_sleep) {
			ptr.godot_icall(bindings::id_RigidBody2D_set_can_sleep, able_to_sleep);
		}
		
		bool is_able_to_sleep() const {
			return ptr.godot_icall(bindings::id_RigidBody2D_is_able_to_sleep);
		}
		
		bool test_motion(const Vector2 &in motion, float margin, Physics2DTestMotionResult@ result) {
			return ptr.godot_icall(bindings::id_RigidBody2D_test_motion, motion, margin, result);
		}
		
		protected void _direct_state_changed(Object@ arg0) {
			ptr.godot_icall(bindings::id_RigidBody2D__direct_state_changed, arg0);
		}
		
		protected void _body_enter_tree(int arg0) {
			ptr.godot_icall(bindings::id_RigidBody2D__body_enter_tree, arg0);
		}
		
		protected void _body_exit_tree(int arg0) {
			ptr.godot_icall(bindings::id_RigidBody2D__body_exit_tree, arg0);
		}
		
		Array get_colliding_bodies() const {
			return ptr.godot_icall(bindings::id_RigidBody2D_get_colliding_bodies);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_RigidBody2D);
		}
		
	}
	
	class GuillotineBinPack : RectangleBinPack {
		
		
		void set_choice_method(int p_methid) {
			ptr.godot_icall(bindings::id_GuillotineBinPack_set_choice_method, p_methid);
		}
		
		int get_choice_method() const {
			return ptr.godot_icall(bindings::id_GuillotineBinPack_get_choice_method);
		}
		
		void set_split_method(int p_methid) {
			ptr.godot_icall(bindings::id_GuillotineBinPack_set_split_method, p_methid);
		}
		
		int get_split_method() const {
			return ptr.godot_icall(bindings::id_GuillotineBinPack_get_split_method);
		}
		
		void set_merge(bool p_merge) {
			ptr.godot_icall(bindings::id_GuillotineBinPack_set_merge, p_merge);
		}
		
		bool is_merge() const {
			return ptr.godot_icall(bindings::id_GuillotineBinPack_is_merge);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_GuillotineBinPack)).ptr();
		}
		
	}
	
	class CapsuleShape2D : Shape2D {
		
		
		void set_radius(float radius) {
			ptr.godot_icall(bindings::id_CapsuleShape2D_set_radius, radius);
		}
		
		float get_radius() const {
			return ptr.godot_icall(bindings::id_CapsuleShape2D_get_radius);
		}
		
		void set_height(float height) {
			ptr.godot_icall(bindings::id_CapsuleShape2D_set_height, height);
		}
		
		float get_height() const {
			return ptr.godot_icall(bindings::id_CapsuleShape2D_get_height);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_CapsuleShape2D)).ptr();
		}
		
	}
	
	class BitmapFont : Font {
		
		
		int create_from_fnt(const String &in path) {
			return ptr.godot_icall(bindings::id_BitmapFont_create_from_fnt, path);
		}
		
		void set_height(float px) {
			ptr.godot_icall(bindings::id_BitmapFont_set_height, px);
		}
		
		void set_ascent(float px) {
			ptr.godot_icall(bindings::id_BitmapFont_set_ascent, px);
		}
		
		void add_kerning_pair(int char_a, int char_b, int kerning) {
			ptr.godot_icall(bindings::id_BitmapFont_add_kerning_pair, char_a, char_b, kerning);
		}
		
		int get_kerning_pair(int char_a, int char_b) const {
			return ptr.godot_icall(bindings::id_BitmapFont_get_kerning_pair, char_a, char_b);
		}
		
		void add_texture(Texture@ texture) {
			ptr.godot_icall(bindings::id_BitmapFont_add_texture, texture);
		}
		
		void add_char(int character, int texture, const Rect2 &in rect, const Vector2 &in align, float advance) {
			ptr.godot_icall(bindings::id_BitmapFont_add_char, character, texture, rect, align, advance);
		}
		
		int get_texture_count() const {
			return ptr.godot_icall(bindings::id_BitmapFont_get_texture_count);
		}
		
		Texture@ get_texture(int idx) const {
			Texture ret = ptr.godot_icall(bindings::id_BitmapFont_get_texture, idx);
			return  ret;
		}
		
		Vector2 get_char_size(int char, int next) const {
			return ptr.godot_icall(bindings::id_BitmapFont_get_char_size, char, next);
		}
		
		void set_distance_field_hint(bool enable) {
			ptr.godot_icall(bindings::id_BitmapFont_set_distance_field_hint, enable);
		}
		
		void clear() {
			ptr.godot_icall(bindings::id_BitmapFont_clear);
		}
		
		protected void _set_chars(const PoolIntArray &in arg0) {
			ptr.godot_icall(bindings::id_BitmapFont__set_chars, arg0);
		}
		
		protected PoolIntArray _get_chars() const {
			return ptr.godot_icall(bindings::id_BitmapFont__get_chars);
		}
		
		protected void _set_kernings(const PoolIntArray &in arg0) {
			ptr.godot_icall(bindings::id_BitmapFont__set_kernings, arg0);
		}
		
		protected PoolIntArray _get_kernings() const {
			return ptr.godot_icall(bindings::id_BitmapFont__get_kernings);
		}
		
		protected void _set_textures(const Array &in arg0) {
			ptr.godot_icall(bindings::id_BitmapFont__set_textures, arg0);
		}
		
		protected Array _get_textures() const {
			return ptr.godot_icall(bindings::id_BitmapFont__get_textures);
		}
		
		void set_fallback(BitmapFont@ fallback) {
			ptr.godot_icall(bindings::id_BitmapFont_set_fallback, fallback);
		}
		
		BitmapFont@ get_fallback() const {
			BitmapFont ret = ptr.godot_icall(bindings::id_BitmapFont_get_fallback);
			return  ret;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_BitmapFont)).ptr();
		}
		
	}
	
	class ImageTexture : Texture {
		
		
		void create(int width, int height, int format, int flags) {
			ptr.godot_icall(bindings::id_ImageTexture_create, width, height, format, flags);
		}
		
		void create_from_image(Image@ image, int flags) {
			ptr.godot_icall(bindings::id_ImageTexture_create_from_image, image, flags);
		}
		
		int get_format() const {
			return ptr.godot_icall(bindings::id_ImageTexture_get_format);
		}
		
		void load(const String &in path) {
			ptr.godot_icall(bindings::id_ImageTexture_load, path);
		}
		
		void set_data(Image@ image) {
			ptr.godot_icall(bindings::id_ImageTexture_set_data, image);
		}
		
		void set_storage(int mode) {
			ptr.godot_icall(bindings::id_ImageTexture_set_storage, mode);
		}
		
		int get_storage() const {
			return ptr.godot_icall(bindings::id_ImageTexture_get_storage);
		}
		
		void set_lossy_storage_quality(float quality) {
			ptr.godot_icall(bindings::id_ImageTexture_set_lossy_storage_quality, quality);
		}
		
		float get_lossy_storage_quality() const {
			return ptr.godot_icall(bindings::id_ImageTexture_get_lossy_storage_quality);
		}
		
		void set_size_override(const Vector2 &in size) {
			ptr.godot_icall(bindings::id_ImageTexture_set_size_override, size);
		}
		
		protected void _reload_hook(const RID &in rid) {
			ptr.godot_icall(bindings::id_ImageTexture__reload_hook, rid);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ImageTexture)).ptr();
		}
		
	}
	
	class SphereMesh : PrimitiveMesh {
		
		
		void set_radius(float radius) {
			ptr.godot_icall(bindings::id_SphereMesh_set_radius, radius);
		}
		
		float get_radius() const {
			return ptr.godot_icall(bindings::id_SphereMesh_get_radius);
		}
		
		void set_height(float height) {
			ptr.godot_icall(bindings::id_SphereMesh_set_height, height);
		}
		
		float get_height() const {
			return ptr.godot_icall(bindings::id_SphereMesh_get_height);
		}
		
		void set_radial_segments(int radial_segments) {
			ptr.godot_icall(bindings::id_SphereMesh_set_radial_segments, radial_segments);
		}
		
		int get_radial_segments() const {
			return ptr.godot_icall(bindings::id_SphereMesh_get_radial_segments);
		}
		
		void set_rings(int rings) {
			ptr.godot_icall(bindings::id_SphereMesh_set_rings, rings);
		}
		
		int get_rings() const {
			return ptr.godot_icall(bindings::id_SphereMesh_get_rings);
		}
		
		void set_is_hemisphere(bool is_hemisphere) {
			ptr.godot_icall(bindings::id_SphereMesh_set_is_hemisphere, is_hemisphere);
		}
		
		bool get_is_hemisphere() const {
			return ptr.godot_icall(bindings::id_SphereMesh_get_is_hemisphere);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_SphereMesh)).ptr();
		}
		
	}
	
	class JSONParseResult : Reference {
		
		
		int get_error() const {
			return ptr.godot_icall(bindings::id_JSONParseResult_get_error);
		}
		
		String get_error_string() const {
			return ptr.godot_icall(bindings::id_JSONParseResult_get_error_string);
		}
		
		int get_error_line() const {
			return ptr.godot_icall(bindings::id_JSONParseResult_get_error_line);
		}
		
		Variant get_result() const {
			return ptr.godot_icall(bindings::id_JSONParseResult_get_result);
		}
		
		void set_error(int error) {
			ptr.godot_icall(bindings::id_JSONParseResult_set_error, error);
		}
		
		void set_error_string(const String &in error_string) {
			ptr.godot_icall(bindings::id_JSONParseResult_set_error_string, error_string);
		}
		
		void set_error_line(int error_line) {
			ptr.godot_icall(bindings::id_JSONParseResult_set_error_line, error_line);
		}
		
		void set_result(const Variant &in result) {
			ptr.godot_icall(bindings::id_JSONParseResult_set_result, result);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_JSONParseResult)).ptr();
		}
		
	}
	
	class HBoxContainer : BoxContainer {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_HBoxContainer);
		}
		
	}
	
	class CollisionPolygon : Spatial {
		
		
		void set_depth(float depth) {
			ptr.godot_icall(bindings::id_CollisionPolygon_set_depth, depth);
		}
		
		float get_depth() const {
			return ptr.godot_icall(bindings::id_CollisionPolygon_get_depth);
		}
		
		void set_polygon(const PoolVector2Array &in polygon) {
			ptr.godot_icall(bindings::id_CollisionPolygon_set_polygon, polygon);
		}
		
		PoolVector2Array get_polygon() const {
			return ptr.godot_icall(bindings::id_CollisionPolygon_get_polygon);
		}
		
		void set_disabled(bool disabled) {
			ptr.godot_icall(bindings::id_CollisionPolygon_set_disabled, disabled);
		}
		
		bool is_disabled() const {
			return ptr.godot_icall(bindings::id_CollisionPolygon_is_disabled);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_CollisionPolygon);
		}
		
	}
	
	class VisualScriptOperator : VisualScriptNode {
		
		
		void set_operator(int op) {
			ptr.godot_icall(bindings::id_VisualScriptOperator_set_operator, op);
		}
		
		int get_operator() const {
			return ptr.godot_icall(bindings::id_VisualScriptOperator_get_operator);
		}
		
		void set_typed(int type) {
			ptr.godot_icall(bindings::id_VisualScriptOperator_set_typed, type);
		}
		
		int get_typed() const {
			return ptr.godot_icall(bindings::id_VisualScriptOperator_get_typed);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptOperator)).ptr();
		}
		
	}
	
	class Environment : Resource {
		
		
		void set_background(int mode) {
			ptr.godot_icall(bindings::id_Environment_set_background, mode);
		}
		
		void set_sky(Sky@ sky) {
			ptr.godot_icall(bindings::id_Environment_set_sky, sky);
		}
		
		void set_sky_custom_fov(float scale) {
			ptr.godot_icall(bindings::id_Environment_set_sky_custom_fov, scale);
		}
		
		void set_bg_color(const Color &in color) {
			ptr.godot_icall(bindings::id_Environment_set_bg_color, color);
		}
		
		void set_bg_energy(float energy) {
			ptr.godot_icall(bindings::id_Environment_set_bg_energy, energy);
		}
		
		void set_canvas_max_layer(int layer) {
			ptr.godot_icall(bindings::id_Environment_set_canvas_max_layer, layer);
		}
		
		void set_ambient_light_color(const Color &in color) {
			ptr.godot_icall(bindings::id_Environment_set_ambient_light_color, color);
		}
		
		void set_ambient_light_energy(float energy) {
			ptr.godot_icall(bindings::id_Environment_set_ambient_light_energy, energy);
		}
		
		void set_ambient_light_sky_contribution(float energy) {
			ptr.godot_icall(bindings::id_Environment_set_ambient_light_sky_contribution, energy);
		}
		
		int get_background() const {
			return ptr.godot_icall(bindings::id_Environment_get_background);
		}
		
		Sky@ get_sky() const {
			Sky ret = ptr.godot_icall(bindings::id_Environment_get_sky);
			return  ret;
		}
		
		float get_sky_custom_fov() const {
			return ptr.godot_icall(bindings::id_Environment_get_sky_custom_fov);
		}
		
		Color get_bg_color() const {
			return ptr.godot_icall(bindings::id_Environment_get_bg_color);
		}
		
		float get_bg_energy() const {
			return ptr.godot_icall(bindings::id_Environment_get_bg_energy);
		}
		
		int get_canvas_max_layer() const {
			return ptr.godot_icall(bindings::id_Environment_get_canvas_max_layer);
		}
		
		Color get_ambient_light_color() const {
			return ptr.godot_icall(bindings::id_Environment_get_ambient_light_color);
		}
		
		float get_ambient_light_energy() const {
			return ptr.godot_icall(bindings::id_Environment_get_ambient_light_energy);
		}
		
		float get_ambient_light_sky_contribution() const {
			return ptr.godot_icall(bindings::id_Environment_get_ambient_light_sky_contribution);
		}
		
		void set_fog_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_Environment_set_fog_enabled, enabled);
		}
		
		bool is_fog_enabled() const {
			return ptr.godot_icall(bindings::id_Environment_is_fog_enabled);
		}
		
		void set_fog_color(const Color &in color) {
			ptr.godot_icall(bindings::id_Environment_set_fog_color, color);
		}
		
		Color get_fog_color() const {
			return ptr.godot_icall(bindings::id_Environment_get_fog_color);
		}
		
		void set_fog_sun_color(const Color &in color) {
			ptr.godot_icall(bindings::id_Environment_set_fog_sun_color, color);
		}
		
		Color get_fog_sun_color() const {
			return ptr.godot_icall(bindings::id_Environment_get_fog_sun_color);
		}
		
		void set_fog_sun_amount(float amount) {
			ptr.godot_icall(bindings::id_Environment_set_fog_sun_amount, amount);
		}
		
		float get_fog_sun_amount() const {
			return ptr.godot_icall(bindings::id_Environment_get_fog_sun_amount);
		}
		
		void set_fog_depth_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_Environment_set_fog_depth_enabled, enabled);
		}
		
		bool is_fog_depth_enabled() const {
			return ptr.godot_icall(bindings::id_Environment_is_fog_depth_enabled);
		}
		
		void set_fog_depth_begin(float distance) {
			ptr.godot_icall(bindings::id_Environment_set_fog_depth_begin, distance);
		}
		
		float get_fog_depth_begin() const {
			return ptr.godot_icall(bindings::id_Environment_get_fog_depth_begin);
		}
		
		void set_fog_depth_curve(float curve) {
			ptr.godot_icall(bindings::id_Environment_set_fog_depth_curve, curve);
		}
		
		float get_fog_depth_curve() const {
			return ptr.godot_icall(bindings::id_Environment_get_fog_depth_curve);
		}
		
		void set_fog_transmit_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_Environment_set_fog_transmit_enabled, enabled);
		}
		
		bool is_fog_transmit_enabled() const {
			return ptr.godot_icall(bindings::id_Environment_is_fog_transmit_enabled);
		}
		
		void set_fog_transmit_curve(float curve) {
			ptr.godot_icall(bindings::id_Environment_set_fog_transmit_curve, curve);
		}
		
		float get_fog_transmit_curve() const {
			return ptr.godot_icall(bindings::id_Environment_get_fog_transmit_curve);
		}
		
		void set_fog_height_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_Environment_set_fog_height_enabled, enabled);
		}
		
		bool is_fog_height_enabled() const {
			return ptr.godot_icall(bindings::id_Environment_is_fog_height_enabled);
		}
		
		void set_fog_height_min(float height) {
			ptr.godot_icall(bindings::id_Environment_set_fog_height_min, height);
		}
		
		float get_fog_height_min() const {
			return ptr.godot_icall(bindings::id_Environment_get_fog_height_min);
		}
		
		void set_fog_height_max(float height) {
			ptr.godot_icall(bindings::id_Environment_set_fog_height_max, height);
		}
		
		float get_fog_height_max() const {
			return ptr.godot_icall(bindings::id_Environment_get_fog_height_max);
		}
		
		void set_fog_height_curve(float curve) {
			ptr.godot_icall(bindings::id_Environment_set_fog_height_curve, curve);
		}
		
		float get_fog_height_curve() const {
			return ptr.godot_icall(bindings::id_Environment_get_fog_height_curve);
		}
		
		void set_tonemapper(int mode) {
			ptr.godot_icall(bindings::id_Environment_set_tonemapper, mode);
		}
		
		int get_tonemapper() const {
			return ptr.godot_icall(bindings::id_Environment_get_tonemapper);
		}
		
		void set_tonemap_exposure(float exposure) {
			ptr.godot_icall(bindings::id_Environment_set_tonemap_exposure, exposure);
		}
		
		float get_tonemap_exposure() const {
			return ptr.godot_icall(bindings::id_Environment_get_tonemap_exposure);
		}
		
		void set_tonemap_white(float white) {
			ptr.godot_icall(bindings::id_Environment_set_tonemap_white, white);
		}
		
		float get_tonemap_white() const {
			return ptr.godot_icall(bindings::id_Environment_get_tonemap_white);
		}
		
		void set_tonemap_auto_exposure(bool auto_exposure) {
			ptr.godot_icall(bindings::id_Environment_set_tonemap_auto_exposure, auto_exposure);
		}
		
		bool get_tonemap_auto_exposure() const {
			return ptr.godot_icall(bindings::id_Environment_get_tonemap_auto_exposure);
		}
		
		void set_tonemap_auto_exposure_max(float exposure_max) {
			ptr.godot_icall(bindings::id_Environment_set_tonemap_auto_exposure_max, exposure_max);
		}
		
		float get_tonemap_auto_exposure_max() const {
			return ptr.godot_icall(bindings::id_Environment_get_tonemap_auto_exposure_max);
		}
		
		void set_tonemap_auto_exposure_min(float exposure_min) {
			ptr.godot_icall(bindings::id_Environment_set_tonemap_auto_exposure_min, exposure_min);
		}
		
		float get_tonemap_auto_exposure_min() const {
			return ptr.godot_icall(bindings::id_Environment_get_tonemap_auto_exposure_min);
		}
		
		void set_tonemap_auto_exposure_speed(float exposure_speed) {
			ptr.godot_icall(bindings::id_Environment_set_tonemap_auto_exposure_speed, exposure_speed);
		}
		
		float get_tonemap_auto_exposure_speed() const {
			return ptr.godot_icall(bindings::id_Environment_get_tonemap_auto_exposure_speed);
		}
		
		void set_tonemap_auto_exposure_grey(float exposure_grey) {
			ptr.godot_icall(bindings::id_Environment_set_tonemap_auto_exposure_grey, exposure_grey);
		}
		
		float get_tonemap_auto_exposure_grey() const {
			return ptr.godot_icall(bindings::id_Environment_get_tonemap_auto_exposure_grey);
		}
		
		void set_ssr_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_Environment_set_ssr_enabled, enabled);
		}
		
		bool is_ssr_enabled() const {
			return ptr.godot_icall(bindings::id_Environment_is_ssr_enabled);
		}
		
		void set_ssr_max_steps(int max_steps) {
			ptr.godot_icall(bindings::id_Environment_set_ssr_max_steps, max_steps);
		}
		
		int get_ssr_max_steps() const {
			return ptr.godot_icall(bindings::id_Environment_get_ssr_max_steps);
		}
		
		void set_ssr_fade_in(float fade_in) {
			ptr.godot_icall(bindings::id_Environment_set_ssr_fade_in, fade_in);
		}
		
		float get_ssr_fade_in() const {
			return ptr.godot_icall(bindings::id_Environment_get_ssr_fade_in);
		}
		
		void set_ssr_fade_out(float fade_out) {
			ptr.godot_icall(bindings::id_Environment_set_ssr_fade_out, fade_out);
		}
		
		float get_ssr_fade_out() const {
			return ptr.godot_icall(bindings::id_Environment_get_ssr_fade_out);
		}
		
		void set_ssr_depth_tolerance(float depth_tolerance) {
			ptr.godot_icall(bindings::id_Environment_set_ssr_depth_tolerance, depth_tolerance);
		}
		
		float get_ssr_depth_tolerance() const {
			return ptr.godot_icall(bindings::id_Environment_get_ssr_depth_tolerance);
		}
		
		void set_ssr_rough(bool rough) {
			ptr.godot_icall(bindings::id_Environment_set_ssr_rough, rough);
		}
		
		bool is_ssr_rough() const {
			return ptr.godot_icall(bindings::id_Environment_is_ssr_rough);
		}
		
		void set_ssao_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_Environment_set_ssao_enabled, enabled);
		}
		
		bool is_ssao_enabled() const {
			return ptr.godot_icall(bindings::id_Environment_is_ssao_enabled);
		}
		
		void set_ssao_radius(float radius) {
			ptr.godot_icall(bindings::id_Environment_set_ssao_radius, radius);
		}
		
		float get_ssao_radius() const {
			return ptr.godot_icall(bindings::id_Environment_get_ssao_radius);
		}
		
		void set_ssao_intensity(float intensity) {
			ptr.godot_icall(bindings::id_Environment_set_ssao_intensity, intensity);
		}
		
		float get_ssao_intensity() const {
			return ptr.godot_icall(bindings::id_Environment_get_ssao_intensity);
		}
		
		void set_ssao_radius2(float radius) {
			ptr.godot_icall(bindings::id_Environment_set_ssao_radius2, radius);
		}
		
		float get_ssao_radius2() const {
			return ptr.godot_icall(bindings::id_Environment_get_ssao_radius2);
		}
		
		void set_ssao_intensity2(float intensity) {
			ptr.godot_icall(bindings::id_Environment_set_ssao_intensity2, intensity);
		}
		
		float get_ssao_intensity2() const {
			return ptr.godot_icall(bindings::id_Environment_get_ssao_intensity2);
		}
		
		void set_ssao_bias(float bias) {
			ptr.godot_icall(bindings::id_Environment_set_ssao_bias, bias);
		}
		
		float get_ssao_bias() const {
			return ptr.godot_icall(bindings::id_Environment_get_ssao_bias);
		}
		
		void set_ssao_direct_light_affect(float amount) {
			ptr.godot_icall(bindings::id_Environment_set_ssao_direct_light_affect, amount);
		}
		
		float get_ssao_direct_light_affect() const {
			return ptr.godot_icall(bindings::id_Environment_get_ssao_direct_light_affect);
		}
		
		void set_ssao_color(const Color &in color) {
			ptr.godot_icall(bindings::id_Environment_set_ssao_color, color);
		}
		
		Color get_ssao_color() const {
			return ptr.godot_icall(bindings::id_Environment_get_ssao_color);
		}
		
		void set_ssao_blur(int mode) {
			ptr.godot_icall(bindings::id_Environment_set_ssao_blur, mode);
		}
		
		int get_ssao_blur() const {
			return ptr.godot_icall(bindings::id_Environment_get_ssao_blur);
		}
		
		void set_ssao_quality(int quality) {
			ptr.godot_icall(bindings::id_Environment_set_ssao_quality, quality);
		}
		
		int get_ssao_quality() const {
			return ptr.godot_icall(bindings::id_Environment_get_ssao_quality);
		}
		
		void set_ssao_edge_sharpness(float edge_sharpness) {
			ptr.godot_icall(bindings::id_Environment_set_ssao_edge_sharpness, edge_sharpness);
		}
		
		float get_ssao_edge_sharpness() const {
			return ptr.godot_icall(bindings::id_Environment_get_ssao_edge_sharpness);
		}
		
		void set_dof_blur_far_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_Environment_set_dof_blur_far_enabled, enabled);
		}
		
		bool is_dof_blur_far_enabled() const {
			return ptr.godot_icall(bindings::id_Environment_is_dof_blur_far_enabled);
		}
		
		void set_dof_blur_far_distance(float intensity) {
			ptr.godot_icall(bindings::id_Environment_set_dof_blur_far_distance, intensity);
		}
		
		float get_dof_blur_far_distance() const {
			return ptr.godot_icall(bindings::id_Environment_get_dof_blur_far_distance);
		}
		
		void set_dof_blur_far_transition(float intensity) {
			ptr.godot_icall(bindings::id_Environment_set_dof_blur_far_transition, intensity);
		}
		
		float get_dof_blur_far_transition() const {
			return ptr.godot_icall(bindings::id_Environment_get_dof_blur_far_transition);
		}
		
		void set_dof_blur_far_amount(float intensity) {
			ptr.godot_icall(bindings::id_Environment_set_dof_blur_far_amount, intensity);
		}
		
		float get_dof_blur_far_amount() const {
			return ptr.godot_icall(bindings::id_Environment_get_dof_blur_far_amount);
		}
		
		void set_dof_blur_far_quality(int intensity) {
			ptr.godot_icall(bindings::id_Environment_set_dof_blur_far_quality, intensity);
		}
		
		int get_dof_blur_far_quality() const {
			return ptr.godot_icall(bindings::id_Environment_get_dof_blur_far_quality);
		}
		
		void set_dof_blur_near_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_Environment_set_dof_blur_near_enabled, enabled);
		}
		
		bool is_dof_blur_near_enabled() const {
			return ptr.godot_icall(bindings::id_Environment_is_dof_blur_near_enabled);
		}
		
		void set_dof_blur_near_distance(float intensity) {
			ptr.godot_icall(bindings::id_Environment_set_dof_blur_near_distance, intensity);
		}
		
		float get_dof_blur_near_distance() const {
			return ptr.godot_icall(bindings::id_Environment_get_dof_blur_near_distance);
		}
		
		void set_dof_blur_near_transition(float intensity) {
			ptr.godot_icall(bindings::id_Environment_set_dof_blur_near_transition, intensity);
		}
		
		float get_dof_blur_near_transition() const {
			return ptr.godot_icall(bindings::id_Environment_get_dof_blur_near_transition);
		}
		
		void set_dof_blur_near_amount(float intensity) {
			ptr.godot_icall(bindings::id_Environment_set_dof_blur_near_amount, intensity);
		}
		
		float get_dof_blur_near_amount() const {
			return ptr.godot_icall(bindings::id_Environment_get_dof_blur_near_amount);
		}
		
		void set_dof_blur_near_quality(int level) {
			ptr.godot_icall(bindings::id_Environment_set_dof_blur_near_quality, level);
		}
		
		int get_dof_blur_near_quality() const {
			return ptr.godot_icall(bindings::id_Environment_get_dof_blur_near_quality);
		}
		
		void set_glow_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_Environment_set_glow_enabled, enabled);
		}
		
		bool is_glow_enabled() const {
			return ptr.godot_icall(bindings::id_Environment_is_glow_enabled);
		}
		
		void set_glow_level(int idx, bool enabled) {
			ptr.godot_icall(bindings::id_Environment_set_glow_level, idx, enabled);
		}
		
		bool is_glow_level_enabled(int idx) const {
			return ptr.godot_icall(bindings::id_Environment_is_glow_level_enabled, idx);
		}
		
		void set_glow_intensity(float intensity) {
			ptr.godot_icall(bindings::id_Environment_set_glow_intensity, intensity);
		}
		
		float get_glow_intensity() const {
			return ptr.godot_icall(bindings::id_Environment_get_glow_intensity);
		}
		
		void set_glow_strength(float strength) {
			ptr.godot_icall(bindings::id_Environment_set_glow_strength, strength);
		}
		
		float get_glow_strength() const {
			return ptr.godot_icall(bindings::id_Environment_get_glow_strength);
		}
		
		void set_glow_bloom(float amount) {
			ptr.godot_icall(bindings::id_Environment_set_glow_bloom, amount);
		}
		
		float get_glow_bloom() const {
			return ptr.godot_icall(bindings::id_Environment_get_glow_bloom);
		}
		
		void set_glow_blend_mode(int mode) {
			ptr.godot_icall(bindings::id_Environment_set_glow_blend_mode, mode);
		}
		
		int get_glow_blend_mode() const {
			return ptr.godot_icall(bindings::id_Environment_get_glow_blend_mode);
		}
		
		void set_glow_hdr_bleed_threshold(float threshold) {
			ptr.godot_icall(bindings::id_Environment_set_glow_hdr_bleed_threshold, threshold);
		}
		
		float get_glow_hdr_bleed_threshold() const {
			return ptr.godot_icall(bindings::id_Environment_get_glow_hdr_bleed_threshold);
		}
		
		void set_glow_hdr_bleed_scale(float scale) {
			ptr.godot_icall(bindings::id_Environment_set_glow_hdr_bleed_scale, scale);
		}
		
		float get_glow_hdr_bleed_scale() const {
			return ptr.godot_icall(bindings::id_Environment_get_glow_hdr_bleed_scale);
		}
		
		void set_glow_bicubic_upscale(bool enabled) {
			ptr.godot_icall(bindings::id_Environment_set_glow_bicubic_upscale, enabled);
		}
		
		bool is_glow_bicubic_upscale_enabled() const {
			return ptr.godot_icall(bindings::id_Environment_is_glow_bicubic_upscale_enabled);
		}
		
		void set_adjustment_enable(bool enabled) {
			ptr.godot_icall(bindings::id_Environment_set_adjustment_enable, enabled);
		}
		
		bool is_adjustment_enabled() const {
			return ptr.godot_icall(bindings::id_Environment_is_adjustment_enabled);
		}
		
		void set_adjustment_brightness(float brightness) {
			ptr.godot_icall(bindings::id_Environment_set_adjustment_brightness, brightness);
		}
		
		float get_adjustment_brightness() const {
			return ptr.godot_icall(bindings::id_Environment_get_adjustment_brightness);
		}
		
		void set_adjustment_contrast(float contrast) {
			ptr.godot_icall(bindings::id_Environment_set_adjustment_contrast, contrast);
		}
		
		float get_adjustment_contrast() const {
			return ptr.godot_icall(bindings::id_Environment_get_adjustment_contrast);
		}
		
		void set_adjustment_saturation(float saturation) {
			ptr.godot_icall(bindings::id_Environment_set_adjustment_saturation, saturation);
		}
		
		float get_adjustment_saturation() const {
			return ptr.godot_icall(bindings::id_Environment_get_adjustment_saturation);
		}
		
		void set_adjustment_color_correction(Texture@ color_correction) {
			ptr.godot_icall(bindings::id_Environment_set_adjustment_color_correction, color_correction);
		}
		
		Texture@ get_adjustment_color_correction() const {
			Texture ret = ptr.godot_icall(bindings::id_Environment_get_adjustment_color_correction);
			return  ret;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Environment)).ptr();
		}
		
	}
	
	class AudioEffectPitchShift : AudioEffect {
		
		
		void set_pitch_scale(float rate) {
			ptr.godot_icall(bindings::id_AudioEffectPitchShift_set_pitch_scale, rate);
		}
		
		float get_pitch_scale() const {
			return ptr.godot_icall(bindings::id_AudioEffectPitchShift_get_pitch_scale);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectPitchShift)).ptr();
		}
		
	}
	
	class AudioEffectLimiter : AudioEffect {
		
		
		void set_ceiling_db(float ceiling) {
			ptr.godot_icall(bindings::id_AudioEffectLimiter_set_ceiling_db, ceiling);
		}
		
		float get_ceiling_db() const {
			return ptr.godot_icall(bindings::id_AudioEffectLimiter_get_ceiling_db);
		}
		
		void set_threshold_db(float threshold) {
			ptr.godot_icall(bindings::id_AudioEffectLimiter_set_threshold_db, threshold);
		}
		
		float get_threshold_db() const {
			return ptr.godot_icall(bindings::id_AudioEffectLimiter_get_threshold_db);
		}
		
		void set_soft_clip_db(float soft_clip) {
			ptr.godot_icall(bindings::id_AudioEffectLimiter_set_soft_clip_db, soft_clip);
		}
		
		float get_soft_clip_db() const {
			return ptr.godot_icall(bindings::id_AudioEffectLimiter_get_soft_clip_db);
		}
		
		void set_soft_clip_ratio(float soft_clip) {
			ptr.godot_icall(bindings::id_AudioEffectLimiter_set_soft_clip_ratio, soft_clip);
		}
		
		float get_soft_clip_ratio() const {
			return ptr.godot_icall(bindings::id_AudioEffectLimiter_get_soft_clip_ratio);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectLimiter)).ptr();
		}
		
	}
	
	class AudioEffectEQ : AudioEffect {
		
		
		void set_band_gain_db(int band_idx, float volume_db) {
			ptr.godot_icall(bindings::id_AudioEffectEQ_set_band_gain_db, band_idx, volume_db);
		}
		
		float get_band_gain_db(int band_idx) const {
			return ptr.godot_icall(bindings::id_AudioEffectEQ_get_band_gain_db, band_idx);
		}
		
		int get_band_count() const {
			return ptr.godot_icall(bindings::id_AudioEffectEQ_get_band_count);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectEQ)).ptr();
		}
		
	}
	
	class Script : Resource {
		
		
		bool can_instance() const {
			return ptr.godot_icall(bindings::id_Script_can_instance);
		}
		
		bool instance_has(Object@ base_object) const {
			return ptr.godot_icall(bindings::id_Script_instance_has, base_object);
		}
		
		bool has_source_code() const {
			return ptr.godot_icall(bindings::id_Script_has_source_code);
		}
		
		String get_source_code() const {
			return ptr.godot_icall(bindings::id_Script_get_source_code);
		}
		
		void set_source_code(const String &in source) {
			ptr.godot_icall(bindings::id_Script_set_source_code, source);
		}
		
		int reload(bool keep_state) {
			return ptr.godot_icall(bindings::id_Script_reload, keep_state);
		}
		
		Script@ get_base_script() const {
			Script ret = ptr.godot_icall(bindings::id_Script_get_base_script);
			return  ret;
		}
		
		String get_instance_base_type() const {
			return ptr.godot_icall(bindings::id_Script_get_instance_base_type);
		}
		
		bool has_script_signal(const String &in signal_name) const {
			return ptr.godot_icall(bindings::id_Script_has_script_signal, signal_name);
		}
		
		bool is_tool() const {
			return ptr.godot_icall(bindings::id_Script_is_tool);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Script)).ptr();
		}
		
	}
	
	class _Engine : Object {
		
		
		void set_iterations_per_second(int iterations_per_second) {
			ptr.godot_icall(bindings::id__Engine_set_iterations_per_second, iterations_per_second);
		}
		
		int get_iterations_per_second() const {
			return ptr.godot_icall(bindings::id__Engine_get_iterations_per_second);
		}
		
		void set_target_fps(int target_fps) {
			ptr.godot_icall(bindings::id__Engine_set_target_fps, target_fps);
		}
		
		int get_target_fps() const {
			return ptr.godot_icall(bindings::id__Engine_get_target_fps);
		}
		
		void set_time_scale(float time_scale) {
			ptr.godot_icall(bindings::id__Engine_set_time_scale, time_scale);
		}
		
		float get_time_scale() {
			return ptr.godot_icall(bindings::id__Engine_get_time_scale);
		}
		
		int get_frames_drawn() {
			return ptr.godot_icall(bindings::id__Engine_get_frames_drawn);
		}
		
		float get_frames_per_second() const {
			return ptr.godot_icall(bindings::id__Engine_get_frames_per_second);
		}
		
		MainLoop@ get_main_loop() const {
			MainLoop ret = ptr.godot_icall(bindings::id__Engine_get_main_loop);
			return  ret;
		}
		
		Dictionary get_version_info() const {
			return ptr.godot_icall(bindings::id__Engine_get_version_info);
		}
		
		bool is_in_physics_frame() const {
			return ptr.godot_icall(bindings::id__Engine_is_in_physics_frame);
		}
		
		bool has_singleton(const String &in name) const {
			return ptr.godot_icall(bindings::id__Engine_has_singleton, name);
		}
		
		Object@ get_singleton(const String &in name) const {
			Object ret = ptr.godot_icall(bindings::id__Engine_get_singleton, name);
			return  ret;
		}
		
		void set_editor_hint(bool enabled) {
			ptr.godot_icall(bindings::id__Engine_set_editor_hint, enabled);
		}
		
		bool is_editor_hint() const {
			return ptr.godot_icall(bindings::id__Engine_is_editor_hint);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id__Engine);
		}
		
	}
	
	class OptionButton : Button {
		
		
		protected void _selected(int arg0) {
			ptr.godot_icall(bindings::id_OptionButton__selected, arg0);
		}
		
		void add_item(const String &in label, int id) {
			ptr.godot_icall(bindings::id_OptionButton_add_item, label, id);
		}
		
		void add_icon_item(Texture@ texture, const String &in label, int id) {
			ptr.godot_icall(bindings::id_OptionButton_add_icon_item, texture, label, id);
		}
		
		void set_item_text(int idx, const String &in text) {
			ptr.godot_icall(bindings::id_OptionButton_set_item_text, idx, text);
		}
		
		void set_item_icon(int idx, Texture@ texture) {
			ptr.godot_icall(bindings::id_OptionButton_set_item_icon, idx, texture);
		}
		
		void set_item_disabled(int idx, bool disabled) {
			ptr.godot_icall(bindings::id_OptionButton_set_item_disabled, idx, disabled);
		}
		
		void set_item_id(int idx, int id) {
			ptr.godot_icall(bindings::id_OptionButton_set_item_id, idx, id);
		}
		
		void set_item_metadata(int idx, const Variant &in metadata) {
			ptr.godot_icall(bindings::id_OptionButton_set_item_metadata, idx, metadata);
		}
		
		String get_item_text(int idx) const {
			return ptr.godot_icall(bindings::id_OptionButton_get_item_text, idx);
		}
		
		Texture@ get_item_icon(int idx) const {
			Texture ret = ptr.godot_icall(bindings::id_OptionButton_get_item_icon, idx);
			return  ret;
		}
		
		int get_item_id(int idx) const {
			return ptr.godot_icall(bindings::id_OptionButton_get_item_id, idx);
		}
		
		Variant get_item_metadata(int idx) const {
			return ptr.godot_icall(bindings::id_OptionButton_get_item_metadata, idx);
		}
		
		bool is_item_disabled(int idx) const {
			return ptr.godot_icall(bindings::id_OptionButton_is_item_disabled, idx);
		}
		
		int get_item_count() const {
			return ptr.godot_icall(bindings::id_OptionButton_get_item_count);
		}
		
		void add_separator() {
			ptr.godot_icall(bindings::id_OptionButton_add_separator);
		}
		
		void clear() {
			ptr.godot_icall(bindings::id_OptionButton_clear);
		}
		
		void select(int idx) {
			ptr.godot_icall(bindings::id_OptionButton_select, idx);
		}
		
		int get_selected() const {
			return ptr.godot_icall(bindings::id_OptionButton_get_selected);
		}
		
		int get_selected_id() const {
			return ptr.godot_icall(bindings::id_OptionButton_get_selected_id);
		}
		
		Variant get_selected_metadata() const {
			return ptr.godot_icall(bindings::id_OptionButton_get_selected_metadata);
		}
		
		void remove_item(int idx) {
			ptr.godot_icall(bindings::id_OptionButton_remove_item, idx);
		}
		
		protected void _select_int(int arg0) {
			ptr.godot_icall(bindings::id_OptionButton__select_int, arg0);
		}
		
		PopupMenu@ get_popup() const {
			PopupMenu ret = ptr.godot_icall(bindings::id_OptionButton_get_popup);
			return  ret;
		}
		
		protected void _set_items(const Array &in arg0) {
			ptr.godot_icall(bindings::id_OptionButton__set_items, arg0);
		}
		
		protected Array _get_items() const {
			return ptr.godot_icall(bindings::id_OptionButton__get_items);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_OptionButton);
		}
		
	}
	
	class VehicleWheel : Spatial {
		
		
		void set_radius(float length) {
			ptr.godot_icall(bindings::id_VehicleWheel_set_radius, length);
		}
		
		float get_radius() const {
			return ptr.godot_icall(bindings::id_VehicleWheel_get_radius);
		}
		
		void set_suspension_rest_length(float length) {
			ptr.godot_icall(bindings::id_VehicleWheel_set_suspension_rest_length, length);
		}
		
		float get_suspension_rest_length() const {
			return ptr.godot_icall(bindings::id_VehicleWheel_get_suspension_rest_length);
		}
		
		void set_suspension_travel(float length) {
			ptr.godot_icall(bindings::id_VehicleWheel_set_suspension_travel, length);
		}
		
		float get_suspension_travel() const {
			return ptr.godot_icall(bindings::id_VehicleWheel_get_suspension_travel);
		}
		
		void set_suspension_stiffness(float length) {
			ptr.godot_icall(bindings::id_VehicleWheel_set_suspension_stiffness, length);
		}
		
		float get_suspension_stiffness() const {
			return ptr.godot_icall(bindings::id_VehicleWheel_get_suspension_stiffness);
		}
		
		void set_suspension_max_force(float length) {
			ptr.godot_icall(bindings::id_VehicleWheel_set_suspension_max_force, length);
		}
		
		float get_suspension_max_force() const {
			return ptr.godot_icall(bindings::id_VehicleWheel_get_suspension_max_force);
		}
		
		void set_damping_compression(float length) {
			ptr.godot_icall(bindings::id_VehicleWheel_set_damping_compression, length);
		}
		
		float get_damping_compression() const {
			return ptr.godot_icall(bindings::id_VehicleWheel_get_damping_compression);
		}
		
		void set_damping_relaxation(float length) {
			ptr.godot_icall(bindings::id_VehicleWheel_set_damping_relaxation, length);
		}
		
		float get_damping_relaxation() const {
			return ptr.godot_icall(bindings::id_VehicleWheel_get_damping_relaxation);
		}
		
		void set_use_as_traction(bool enable) {
			ptr.godot_icall(bindings::id_VehicleWheel_set_use_as_traction, enable);
		}
		
		bool is_used_as_traction() const {
			return ptr.godot_icall(bindings::id_VehicleWheel_is_used_as_traction);
		}
		
		void set_use_as_steering(bool enable) {
			ptr.godot_icall(bindings::id_VehicleWheel_set_use_as_steering, enable);
		}
		
		bool is_used_as_steering() const {
			return ptr.godot_icall(bindings::id_VehicleWheel_is_used_as_steering);
		}
		
		void set_friction_slip(float length) {
			ptr.godot_icall(bindings::id_VehicleWheel_set_friction_slip, length);
		}
		
		float get_friction_slip() const {
			return ptr.godot_icall(bindings::id_VehicleWheel_get_friction_slip);
		}
		
		bool is_in_contact() const {
			return ptr.godot_icall(bindings::id_VehicleWheel_is_in_contact);
		}
		
		void set_roll_influence(float roll_influence) {
			ptr.godot_icall(bindings::id_VehicleWheel_set_roll_influence, roll_influence);
		}
		
		float get_roll_influence() const {
			return ptr.godot_icall(bindings::id_VehicleWheel_get_roll_influence);
		}
		
		float get_skidinfo() const {
			return ptr.godot_icall(bindings::id_VehicleWheel_get_skidinfo);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_VehicleWheel);
		}
		
	}
	
	class VisualScriptEmitSignal : VisualScriptNode {
		
		
		void set_signal(const String &in name) {
			ptr.godot_icall(bindings::id_VisualScriptEmitSignal_set_signal, name);
		}
		
		String get_signal() const {
			return ptr.godot_icall(bindings::id_VisualScriptEmitSignal_get_signal);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptEmitSignal)).ptr();
		}
		
	}
	
	class AngelScriptRunner : Reference {
		
		
		void run(const String &in p_path) {
			ptr.godot_icall(bindings::id_AngelScriptRunner_run, p_path);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AngelScriptRunner)).ptr();
		}
		
	}
	
	class PathFollow2D : Node2D {
		
		
		void set_offset(float offset) {
			ptr.godot_icall(bindings::id_PathFollow2D_set_offset, offset);
		}
		
		float get_offset() const {
			return ptr.godot_icall(bindings::id_PathFollow2D_get_offset);
		}
		
		void set_h_offset(float h_offset) {
			ptr.godot_icall(bindings::id_PathFollow2D_set_h_offset, h_offset);
		}
		
		float get_h_offset() const {
			return ptr.godot_icall(bindings::id_PathFollow2D_get_h_offset);
		}
		
		void set_v_offset(float v_offset) {
			ptr.godot_icall(bindings::id_PathFollow2D_set_v_offset, v_offset);
		}
		
		float get_v_offset() const {
			return ptr.godot_icall(bindings::id_PathFollow2D_get_v_offset);
		}
		
		void set_unit_offset(float unit_offset) {
			ptr.godot_icall(bindings::id_PathFollow2D_set_unit_offset, unit_offset);
		}
		
		float get_unit_offset() const {
			return ptr.godot_icall(bindings::id_PathFollow2D_get_unit_offset);
		}
		
		void set_rotate(bool enable) {
			ptr.godot_icall(bindings::id_PathFollow2D_set_rotate, enable);
		}
		
		bool is_rotating() const {
			return ptr.godot_icall(bindings::id_PathFollow2D_is_rotating);
		}
		
		void set_cubic_interpolation(bool enable) {
			ptr.godot_icall(bindings::id_PathFollow2D_set_cubic_interpolation, enable);
		}
		
		bool get_cubic_interpolation() const {
			return ptr.godot_icall(bindings::id_PathFollow2D_get_cubic_interpolation);
		}
		
		void set_loop(bool loop) {
			ptr.godot_icall(bindings::id_PathFollow2D_set_loop, loop);
		}
		
		bool has_loop() const {
			return ptr.godot_icall(bindings::id_PathFollow2D_has_loop);
		}
		
		void set_lookahead(float lookahead) {
			ptr.godot_icall(bindings::id_PathFollow2D_set_lookahead, lookahead);
		}
		
		float get_lookahead() const {
			return ptr.godot_icall(bindings::id_PathFollow2D_get_lookahead);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_PathFollow2D);
		}
		
	}
	
	class DynamicFontData : Resource {
		
		
		void set_font_path(const String &in path) {
			ptr.godot_icall(bindings::id_DynamicFontData_set_font_path, path);
		}
		
		String get_font_path() const {
			return ptr.godot_icall(bindings::id_DynamicFontData_get_font_path);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_DynamicFontData)).ptr();
		}
		
	}
	
	class CurveTexture : Texture {
		
		
		void set_width(int width) {
			ptr.godot_icall(bindings::id_CurveTexture_set_width, width);
		}
		
		void set_curve(Curve@ curve) {
			ptr.godot_icall(bindings::id_CurveTexture_set_curve, curve);
		}
		
		Curve@ get_curve() const {
			Curve ret = ptr.godot_icall(bindings::id_CurveTexture_get_curve);
			return  ret;
		}
		
		protected void _update() {
			ptr.godot_icall(bindings::id_CurveTexture__update);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_CurveTexture)).ptr();
		}
		
	}
	
	class ParticlesMaterial : Material {
		
		
		void set_spread(float degrees) {
			ptr.godot_icall(bindings::id_ParticlesMaterial_set_spread, degrees);
		}
		
		float get_spread() const {
			return ptr.godot_icall(bindings::id_ParticlesMaterial_get_spread);
		}
		
		void set_flatness(float amount) {
			ptr.godot_icall(bindings::id_ParticlesMaterial_set_flatness, amount);
		}
		
		float get_flatness() const {
			return ptr.godot_icall(bindings::id_ParticlesMaterial_get_flatness);
		}
		
		void set_param(int param, float value) {
			ptr.godot_icall(bindings::id_ParticlesMaterial_set_param, param, value);
		}
		
		float get_param(int param) const {
			return ptr.godot_icall(bindings::id_ParticlesMaterial_get_param, param);
		}
		
		void set_param_randomness(int param, float randomness) {
			ptr.godot_icall(bindings::id_ParticlesMaterial_set_param_randomness, param, randomness);
		}
		
		float get_param_randomness(int param) const {
			return ptr.godot_icall(bindings::id_ParticlesMaterial_get_param_randomness, param);
		}
		
		void set_param_texture(int param, Texture@ texture) {
			ptr.godot_icall(bindings::id_ParticlesMaterial_set_param_texture, param, texture);
		}
		
		Texture@ get_param_texture(int param) const {
			Texture ret = ptr.godot_icall(bindings::id_ParticlesMaterial_get_param_texture, param);
			return  ret;
		}
		
		void set_color(const Color &in color) {
			ptr.godot_icall(bindings::id_ParticlesMaterial_set_color, color);
		}
		
		Color get_color() const {
			return ptr.godot_icall(bindings::id_ParticlesMaterial_get_color);
		}
		
		void set_color_ramp(Texture@ ramp) {
			ptr.godot_icall(bindings::id_ParticlesMaterial_set_color_ramp, ramp);
		}
		
		Texture@ get_color_ramp() const {
			Texture ret = ptr.godot_icall(bindings::id_ParticlesMaterial_get_color_ramp);
			return  ret;
		}
		
		void set_flag(int flag, bool enable) {
			ptr.godot_icall(bindings::id_ParticlesMaterial_set_flag, flag, enable);
		}
		
		bool get_flag(int flag) const {
			return ptr.godot_icall(bindings::id_ParticlesMaterial_get_flag, flag);
		}
		
		void set_emission_shape(int shape) {
			ptr.godot_icall(bindings::id_ParticlesMaterial_set_emission_shape, shape);
		}
		
		int get_emission_shape() const {
			return ptr.godot_icall(bindings::id_ParticlesMaterial_get_emission_shape);
		}
		
		void set_emission_sphere_radius(float radius) {
			ptr.godot_icall(bindings::id_ParticlesMaterial_set_emission_sphere_radius, radius);
		}
		
		float get_emission_sphere_radius() const {
			return ptr.godot_icall(bindings::id_ParticlesMaterial_get_emission_sphere_radius);
		}
		
		void set_emission_box_extents(const Vector3 &in extents) {
			ptr.godot_icall(bindings::id_ParticlesMaterial_set_emission_box_extents, extents);
		}
		
		Vector3 get_emission_box_extents() const {
			return ptr.godot_icall(bindings::id_ParticlesMaterial_get_emission_box_extents);
		}
		
		void set_emission_point_texture(Texture@ texture) {
			ptr.godot_icall(bindings::id_ParticlesMaterial_set_emission_point_texture, texture);
		}
		
		Texture@ get_emission_point_texture() const {
			Texture ret = ptr.godot_icall(bindings::id_ParticlesMaterial_get_emission_point_texture);
			return  ret;
		}
		
		void set_emission_normal_texture(Texture@ texture) {
			ptr.godot_icall(bindings::id_ParticlesMaterial_set_emission_normal_texture, texture);
		}
		
		Texture@ get_emission_normal_texture() const {
			Texture ret = ptr.godot_icall(bindings::id_ParticlesMaterial_get_emission_normal_texture);
			return  ret;
		}
		
		void set_emission_color_texture(Texture@ texture) {
			ptr.godot_icall(bindings::id_ParticlesMaterial_set_emission_color_texture, texture);
		}
		
		Texture@ get_emission_color_texture() const {
			Texture ret = ptr.godot_icall(bindings::id_ParticlesMaterial_get_emission_color_texture);
			return  ret;
		}
		
		void set_emission_point_count(int point_count) {
			ptr.godot_icall(bindings::id_ParticlesMaterial_set_emission_point_count, point_count);
		}
		
		int get_emission_point_count() const {
			return ptr.godot_icall(bindings::id_ParticlesMaterial_get_emission_point_count);
		}
		
		void set_trail_divisor(int divisor) {
			ptr.godot_icall(bindings::id_ParticlesMaterial_set_trail_divisor, divisor);
		}
		
		int get_trail_divisor() const {
			return ptr.godot_icall(bindings::id_ParticlesMaterial_get_trail_divisor);
		}
		
		void set_trail_size_modifier(CurveTexture@ texture) {
			ptr.godot_icall(bindings::id_ParticlesMaterial_set_trail_size_modifier, texture);
		}
		
		CurveTexture@ get_trail_size_modifier() const {
			CurveTexture ret = ptr.godot_icall(bindings::id_ParticlesMaterial_get_trail_size_modifier);
			return  ret;
		}
		
		void set_trail_color_modifier(GradientTexture@ texture) {
			ptr.godot_icall(bindings::id_ParticlesMaterial_set_trail_color_modifier, texture);
		}
		
		GradientTexture@ get_trail_color_modifier() const {
			GradientTexture ret = ptr.godot_icall(bindings::id_ParticlesMaterial_get_trail_color_modifier);
			return  ret;
		}
		
		Vector3 get_gravity() const {
			return ptr.godot_icall(bindings::id_ParticlesMaterial_get_gravity);
		}
		
		void set_gravity(const Vector3 &in accel_vec) {
			ptr.godot_icall(bindings::id_ParticlesMaterial_set_gravity, accel_vec);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ParticlesMaterial)).ptr();
		}
		
	}
	
	class AudioEffectEQ10 : AudioEffectEQ {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectEQ10)).ptr();
		}
		
	}
	
	class ConfigFile : Reference {
		
		
		void set_value(const String &in section, const String &in key, const Variant &in value) {
			ptr.godot_icall(bindings::id_ConfigFile_set_value, section, key, value);
		}
		
		Variant get_value(const String &in section, const String &in key, const Variant &in Default) const {
			return ptr.godot_icall(bindings::id_ConfigFile_get_value, section, key, Default);
		}
		
		bool has_section(const String &in section) const {
			return ptr.godot_icall(bindings::id_ConfigFile_has_section, section);
		}
		
		bool has_section_key(const String &in section, const String &in key) const {
			return ptr.godot_icall(bindings::id_ConfigFile_has_section_key, section, key);
		}
		
		PoolStringArray get_sections() const {
			return ptr.godot_icall(bindings::id_ConfigFile_get_sections);
		}
		
		PoolStringArray get_section_keys(const String &in section) const {
			return ptr.godot_icall(bindings::id_ConfigFile_get_section_keys, section);
		}
		
		void erase_section(const String &in section) {
			ptr.godot_icall(bindings::id_ConfigFile_erase_section, section);
		}
		
		int load(const String &in path) {
			return ptr.godot_icall(bindings::id_ConfigFile_load, path);
		}
		
		int save(const String &in path) {
			return ptr.godot_icall(bindings::id_ConfigFile_save, path);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ConfigFile)).ptr();
		}
		
	}
	
	class ARVRAnchor : Spatial {
		
		
		void set_anchor_id(int anchor_id) {
			ptr.godot_icall(bindings::id_ARVRAnchor_set_anchor_id, anchor_id);
		}
		
		int get_anchor_id() const {
			return ptr.godot_icall(bindings::id_ARVRAnchor_get_anchor_id);
		}
		
		String get_anchor_name() const {
			return ptr.godot_icall(bindings::id_ARVRAnchor_get_anchor_name);
		}
		
		bool get_is_active() const {
			return ptr.godot_icall(bindings::id_ARVRAnchor_get_is_active);
		}
		
		Vector3 get_size() const {
			return ptr.godot_icall(bindings::id_ARVRAnchor_get_size);
		}
		
		Plane get_plane() const {
			return ptr.godot_icall(bindings::id_ARVRAnchor_get_plane);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ARVRAnchor);
		}
		
	}
	
	class StaticBody : PhysicsBody {
		
		
		void set_constant_linear_velocity(const Vector3 &in vel) {
			ptr.godot_icall(bindings::id_StaticBody_set_constant_linear_velocity, vel);
		}
		
		void set_constant_angular_velocity(const Vector3 &in vel) {
			ptr.godot_icall(bindings::id_StaticBody_set_constant_angular_velocity, vel);
		}
		
		Vector3 get_constant_linear_velocity() const {
			return ptr.godot_icall(bindings::id_StaticBody_get_constant_linear_velocity);
		}
		
		Vector3 get_constant_angular_velocity() const {
			return ptr.godot_icall(bindings::id_StaticBody_get_constant_angular_velocity);
		}
		
		void set_friction(float friction) {
			ptr.godot_icall(bindings::id_StaticBody_set_friction, friction);
		}
		
		float get_friction() const {
			return ptr.godot_icall(bindings::id_StaticBody_get_friction);
		}
		
		void set_bounce(float bounce) {
			ptr.godot_icall(bindings::id_StaticBody_set_bounce, bounce);
		}
		
		float get_bounce() const {
			return ptr.godot_icall(bindings::id_StaticBody_get_bounce);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_StaticBody);
		}
		
	}
	
	class VisualScriptDeconstruct : VisualScriptNode {
		
		
		void set_deconstruct_type(int type) {
			ptr.godot_icall(bindings::id_VisualScriptDeconstruct_set_deconstruct_type, type);
		}
		
		int get_deconstruct_type() const {
			return ptr.godot_icall(bindings::id_VisualScriptDeconstruct_get_deconstruct_type);
		}
		
		protected void _set_elem_cache(const Array &in _cache) {
			ptr.godot_icall(bindings::id_VisualScriptDeconstruct__set_elem_cache, _cache);
		}
		
		protected Array _get_elem_cache() const {
			return ptr.godot_icall(bindings::id_VisualScriptDeconstruct__get_elem_cache);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptDeconstruct)).ptr();
		}
		
	}
	
	class VisualScriptInputAction : VisualScriptNode {
		
		
		void set_action_name(const String &in name) {
			ptr.godot_icall(bindings::id_VisualScriptInputAction_set_action_name, name);
		}
		
		String get_action_name() const {
			return ptr.godot_icall(bindings::id_VisualScriptInputAction_get_action_name);
		}
		
		void set_action_mode(int mode) {
			ptr.godot_icall(bindings::id_VisualScriptInputAction_set_action_mode, mode);
		}
		
		int get_action_mode() const {
			return ptr.godot_icall(bindings::id_VisualScriptInputAction_get_action_mode);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptInputAction)).ptr();
		}
		
	}
	
	class NetworkedMultiplayerENet : NetworkedMultiplayerPeer {
		
		
		int create_server(int port, int max_clients, int in_bandwidth, int out_bandwidth) {
			return ptr.godot_icall(bindings::id_NetworkedMultiplayerENet_create_server, port, max_clients, in_bandwidth, out_bandwidth);
		}
		
		int create_client(const String &in ip, int port, int in_bandwidth, int out_bandwidth) {
			return ptr.godot_icall(bindings::id_NetworkedMultiplayerENet_create_client, ip, port, in_bandwidth, out_bandwidth);
		}
		
		void close_connection() {
			ptr.godot_icall(bindings::id_NetworkedMultiplayerENet_close_connection);
		}
		
		void set_compression_mode(int mode) {
			ptr.godot_icall(bindings::id_NetworkedMultiplayerENet_set_compression_mode, mode);
		}
		
		int get_compression_mode() const {
			return ptr.godot_icall(bindings::id_NetworkedMultiplayerENet_get_compression_mode);
		}
		
		void set_bind_ip(const String &in ip) {
			ptr.godot_icall(bindings::id_NetworkedMultiplayerENet_set_bind_ip, ip);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_NetworkedMultiplayerENet)).ptr();
		}
		
	}
	
	class JavaScript : Object {
		
		
		Variant eval(const String &in code, bool use_global_execution_context) {
			return ptr.godot_icall(bindings::id_JavaScript_eval, code, use_global_execution_context);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_JavaScript);
		}
		
	}
	
	class EditorFileDialog : ConfirmationDialog {
		
		
		protected void _unhandled_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_EditorFileDialog__unhandled_input, arg0);
		}
		
		protected void _item_selected(int arg0) {
			ptr.godot_icall(bindings::id_EditorFileDialog__item_selected, arg0);
		}
		
		protected void _items_clear_selection() {
			ptr.godot_icall(bindings::id_EditorFileDialog__items_clear_selection);
		}
		
		protected void _item_list_item_rmb_selected(int arg0, const Vector2 &in arg1) {
			ptr.godot_icall(bindings::id_EditorFileDialog__item_list_item_rmb_selected, arg0, arg1);
		}
		
		protected void _item_list_rmb_clicked(const Vector2 &in arg0) {
			ptr.godot_icall(bindings::id_EditorFileDialog__item_list_rmb_clicked, arg0);
		}
		
		protected void _item_menu_id_pressed(int arg0) {
			ptr.godot_icall(bindings::id_EditorFileDialog__item_menu_id_pressed, arg0);
		}
		
		protected void _item_db_selected(int arg0) {
			ptr.godot_icall(bindings::id_EditorFileDialog__item_db_selected, arg0);
		}
		
		protected void _dir_entered(const String &in arg0) {
			ptr.godot_icall(bindings::id_EditorFileDialog__dir_entered, arg0);
		}
		
		protected void _file_entered(const String &in arg0) {
			ptr.godot_icall(bindings::id_EditorFileDialog__file_entered, arg0);
		}
		
		protected void _action_pressed() {
			ptr.godot_icall(bindings::id_EditorFileDialog__action_pressed);
		}
		
		protected void _cancel_pressed() {
			ptr.godot_icall(bindings::id_EditorFileDialog__cancel_pressed);
		}
		
		protected void _filter_selected(int arg0) {
			ptr.godot_icall(bindings::id_EditorFileDialog__filter_selected, arg0);
		}
		
		protected void _save_confirm_pressed() {
			ptr.godot_icall(bindings::id_EditorFileDialog__save_confirm_pressed);
		}
		
		void clear_filters() {
			ptr.godot_icall(bindings::id_EditorFileDialog_clear_filters);
		}
		
		void add_filter(const String &in filter) {
			ptr.godot_icall(bindings::id_EditorFileDialog_add_filter, filter);
		}
		
		String get_current_dir() const {
			return ptr.godot_icall(bindings::id_EditorFileDialog_get_current_dir);
		}
		
		String get_current_file() const {
			return ptr.godot_icall(bindings::id_EditorFileDialog_get_current_file);
		}
		
		String get_current_path() const {
			return ptr.godot_icall(bindings::id_EditorFileDialog_get_current_path);
		}
		
		void set_current_dir(const String &in dir) {
			ptr.godot_icall(bindings::id_EditorFileDialog_set_current_dir, dir);
		}
		
		void set_current_file(const String &in file) {
			ptr.godot_icall(bindings::id_EditorFileDialog_set_current_file, file);
		}
		
		void set_current_path(const String &in path) {
			ptr.godot_icall(bindings::id_EditorFileDialog_set_current_path, path);
		}
		
		void set_mode(int mode) {
			ptr.godot_icall(bindings::id_EditorFileDialog_set_mode, mode);
		}
		
		int get_mode() const {
			return ptr.godot_icall(bindings::id_EditorFileDialog_get_mode);
		}
		
		VBoxContainer@ get_vbox() {
			VBoxContainer ret = ptr.godot_icall(bindings::id_EditorFileDialog_get_vbox);
			return  ret;
		}
		
		void set_access(int access) {
			ptr.godot_icall(bindings::id_EditorFileDialog_set_access, access);
		}
		
		int get_access() const {
			return ptr.godot_icall(bindings::id_EditorFileDialog_get_access);
		}
		
		void set_show_hidden_files(bool show) {
			ptr.godot_icall(bindings::id_EditorFileDialog_set_show_hidden_files, show);
		}
		
		bool is_showing_hidden_files() const {
			return ptr.godot_icall(bindings::id_EditorFileDialog_is_showing_hidden_files);
		}
		
		protected void _select_drive(int arg0) {
			ptr.godot_icall(bindings::id_EditorFileDialog__select_drive, arg0);
		}
		
		protected void _make_dir() {
			ptr.godot_icall(bindings::id_EditorFileDialog__make_dir);
		}
		
		protected void _make_dir_confirm() {
			ptr.godot_icall(bindings::id_EditorFileDialog__make_dir_confirm);
		}
		
		protected void _update_file_list() {
			ptr.godot_icall(bindings::id_EditorFileDialog__update_file_list);
		}
		
		protected void _update_dir() {
			ptr.godot_icall(bindings::id_EditorFileDialog__update_dir);
		}
		
		protected void _thumbnail_done(const String &in arg0, Texture@ arg1, const Variant &in arg2) {
			ptr.godot_icall(bindings::id_EditorFileDialog__thumbnail_done, arg0, arg1, arg2);
		}
		
		void set_display_mode(int mode) {
			ptr.godot_icall(bindings::id_EditorFileDialog_set_display_mode, mode);
		}
		
		int get_display_mode() const {
			return ptr.godot_icall(bindings::id_EditorFileDialog_get_display_mode);
		}
		
		protected void _thumbnail_result(const String &in arg0, Texture@ arg1, const Variant &in arg2) {
			ptr.godot_icall(bindings::id_EditorFileDialog__thumbnail_result, arg0, arg1, arg2);
		}
		
		void set_disable_overwrite_warning(bool disable) {
			ptr.godot_icall(bindings::id_EditorFileDialog_set_disable_overwrite_warning, disable);
		}
		
		bool is_overwrite_warning_disabled() const {
			return ptr.godot_icall(bindings::id_EditorFileDialog_is_overwrite_warning_disabled);
		}
		
		protected void _recent_selected(int arg0) {
			ptr.godot_icall(bindings::id_EditorFileDialog__recent_selected, arg0);
		}
		
		protected void _go_back() {
			ptr.godot_icall(bindings::id_EditorFileDialog__go_back);
		}
		
		protected void _go_forward() {
			ptr.godot_icall(bindings::id_EditorFileDialog__go_forward);
		}
		
		protected void _go_up() {
			ptr.godot_icall(bindings::id_EditorFileDialog__go_up);
		}
		
		protected void _favorite_toggled(bool arg0) {
			ptr.godot_icall(bindings::id_EditorFileDialog__favorite_toggled, arg0);
		}
		
		protected void _favorite_selected(int arg0) {
			ptr.godot_icall(bindings::id_EditorFileDialog__favorite_selected, arg0);
		}
		
		protected void _favorite_move_up() {
			ptr.godot_icall(bindings::id_EditorFileDialog__favorite_move_up);
		}
		
		protected void _favorite_move_down() {
			ptr.godot_icall(bindings::id_EditorFileDialog__favorite_move_down);
		}
		
		void invalidate() {
			ptr.godot_icall(bindings::id_EditorFileDialog_invalidate);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_EditorFileDialog);
		}
		
	}
	
	class Font : Resource {
		
		
		void draw(const RID &in canvas_item, const Vector2 &in position, const String &in string, const Color &in modulate, int clip_w) const {
			ptr.godot_icall(bindings::id_Font_draw, canvas_item, position, string, modulate, clip_w);
		}
		
		float get_ascent() const {
			return ptr.godot_icall(bindings::id_Font_get_ascent);
		}
		
		float get_descent() const {
			return ptr.godot_icall(bindings::id_Font_get_descent);
		}
		
		float get_height() const {
			return ptr.godot_icall(bindings::id_Font_get_height);
		}
		
		bool is_distance_field_hint() const {
			return ptr.godot_icall(bindings::id_Font_is_distance_field_hint);
		}
		
		Vector2 get_string_size(const String &in string) const {
			return ptr.godot_icall(bindings::id_Font_get_string_size, string);
		}
		
		float draw_char(const RID &in canvas_item, const Vector2 &in position, int char, int next, const Color &in modulate) const {
			return ptr.godot_icall(bindings::id_Font_draw_char, canvas_item, position, char, next, modulate);
		}
		
		void update_changes() {
			ptr.godot_icall(bindings::id_Font_update_changes);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Font)).ptr();
		}
		
	}
	
	class Object {
		
		
		protected void _notification(int what) {
			
		}
		
		protected bool _set(const String &in property, const Variant &in value) {
			return false;
		}
		
		protected void _get(const String &in property) {
			
		}
		
		protected Array _get_property_list() {
			return Array();
		}
		
		protected void _init() {
			
		}
		
		String get_class() const {
			return ptr.godot_icall(bindings::id_Object_get_class);
		}
		
		bool is_class(const String &in type) const {
			return ptr.godot_icall(bindings::id_Object_is_class, type);
		}
		
		void Set(const String &in property, const Variant &in value) {
			ptr.godot_icall(bindings::id_Object_set, property, value);
		}
		
		Variant Get(const String &in property) const {
			return ptr.godot_icall(bindings::id_Object_get, property);
		}
		
		void set_indexed(const NodePath &in property, const Variant &in value) {
			ptr.godot_icall(bindings::id_Object_set_indexed, property, value);
		}
		
		Variant get_indexed(const NodePath &in property) const {
			return ptr.godot_icall(bindings::id_Object_get_indexed, property);
		}
		
		Array get_property_list() const {
			return ptr.godot_icall(bindings::id_Object_get_property_list);
		}
		
		Array get_method_list() const {
			return ptr.godot_icall(bindings::id_Object_get_method_list);
		}
		
		void notification(int what, bool reversed) {
			ptr.godot_icall(bindings::id_Object_notification, what, reversed);
		}
		
		int get_instance_id() const {
			return ptr.godot_icall(bindings::id_Object_get_instance_id);
		}
		
		void set_script(Reference@ script) {
			ptr.godot_icall(bindings::id_Object_set_script, script);
		}
		
		Reference@ get_script() const {
			Reference ret = ptr.godot_icall(bindings::id_Object_get_script);
			return  ret;
		}
		
		void set_meta(const String &in name, const Variant &in value) {
			ptr.godot_icall(bindings::id_Object_set_meta, name, value);
		}
		
		Variant get_meta(const String &in name) const {
			return ptr.godot_icall(bindings::id_Object_get_meta, name);
		}
		
		bool has_meta(const String &in name) const {
			return ptr.godot_icall(bindings::id_Object_has_meta, name);
		}
		
		PoolStringArray get_meta_list() const {
			return ptr.godot_icall(bindings::id_Object_get_meta_list);
		}
		
		void add_user_signal(const String &in signal, const Array &in arguments) {
			ptr.godot_icall(bindings::id_Object_add_user_signal, signal, arguments);
		}
		
		bool has_user_signal(const String &in signal) const {
			return ptr.godot_icall(bindings::id_Object_has_user_signal, signal);
		}
		
		Variant emit_signal(const String &in signal) {
			return ptr.godot_icall(bindings::id_Object_emit_signal, signal);
		}
		
		Variant call(const String &in method) {
			return ptr.godot_icall(bindings::id_Object_call, method);
		}
		
		Variant call_deferred(const String &in method) {
			return ptr.godot_icall(bindings::id_Object_call_deferred, method);
		}
		
		Variant callv(const String &in method, const Array &in arg_array) {
			return ptr.godot_icall(bindings::id_Object_callv, method, arg_array);
		}
		
		bool has_method(const String &in method) const {
			return ptr.godot_icall(bindings::id_Object_has_method, method);
		}
		
		Array get_signal_list() const {
			return ptr.godot_icall(bindings::id_Object_get_signal_list);
		}
		
		Array get_signal_connection_list(const String &in signal) const {
			return ptr.godot_icall(bindings::id_Object_get_signal_connection_list, signal);
		}
		
		Array get_incoming_connections() const {
			return ptr.godot_icall(bindings::id_Object_get_incoming_connections);
		}
		
		int connect(const String &in signal, Object@ target, const String &in method, const Array &in binds, int flags) {
			return ptr.godot_icall(bindings::id_Object_connect, signal, target, method, binds, flags);
		}
		
		void disconnect(const String &in signal, Object@ target, const String &in method) {
			ptr.godot_icall(bindings::id_Object_disconnect, signal, target, method);
		}
		
		bool is_connected(const String &in signal, Object@ target, const String &in method) const {
			return ptr.godot_icall(bindings::id_Object_is_connected, signal, target, method);
		}
		
		void set_block_signals(bool enable) {
			ptr.godot_icall(bindings::id_Object_set_block_signals, enable);
		}
		
		bool is_blocking_signals() const {
			return ptr.godot_icall(bindings::id_Object_is_blocking_signals);
		}
		
		void property_list_changed_notify() {
			ptr.godot_icall(bindings::id_Object_property_list_changed_notify);
		}
		
		void set_message_translation(bool enable) {
			ptr.godot_icall(bindings::id_Object_set_message_translation, enable);
		}
		
		bool can_translate_messages() const {
			return ptr.godot_icall(bindings::id_Object_can_translate_messages);
		}
		
		String tr(const String &in message) const {
			return ptr.godot_icall(bindings::id_Object_tr, message);
		}
		
		bool is_queued_for_deletion() const {
			return ptr.godot_icall(bindings::id_Object_is_queued_for_deletion);
		}

		protected void _make_instance() {
			@ptr = bindings::Object();;
		}
		
		void free() {
			ptr.free();
		}

		Variant opImplConv() const {
			return @ptr;
		}

		void opAssign(const Variant &in ptr) {
			@this.ptr = ptr;
		}

		void opAssign(bindings::Object@ nptr) {
			@this.ptr = nptr;
		}

		Object() {
			_make_instance();
		}

		protected bindings::Object@ ptr;
	
	}
	
	class NetworkedMultiplayerPeer : PacketPeer {
		
		
		void set_transfer_mode(int mode) {
			ptr.godot_icall(bindings::id_NetworkedMultiplayerPeer_set_transfer_mode, mode);
		}
		
		int get_transfer_mode() const {
			return ptr.godot_icall(bindings::id_NetworkedMultiplayerPeer_get_transfer_mode);
		}
		
		void set_target_peer(int id) {
			ptr.godot_icall(bindings::id_NetworkedMultiplayerPeer_set_target_peer, id);
		}
		
		int get_packet_peer() const {
			return ptr.godot_icall(bindings::id_NetworkedMultiplayerPeer_get_packet_peer);
		}
		
		void poll() {
			ptr.godot_icall(bindings::id_NetworkedMultiplayerPeer_poll);
		}
		
		int get_connection_status() const {
			return ptr.godot_icall(bindings::id_NetworkedMultiplayerPeer_get_connection_status);
		}
		
		int get_unique_id() const {
			return ptr.godot_icall(bindings::id_NetworkedMultiplayerPeer_get_unique_id);
		}
		
		void set_refuse_new_connections(bool enable) {
			ptr.godot_icall(bindings::id_NetworkedMultiplayerPeer_set_refuse_new_connections, enable);
		}
		
		bool is_refusing_new_connections() const {
			return ptr.godot_icall(bindings::id_NetworkedMultiplayerPeer_is_refusing_new_connections);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_NetworkedMultiplayerPeer)).ptr();
		}
		
	}
	
	class HSplitContainer : SplitContainer {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_HSplitContainer);
		}
		
	}
	
	class Sprite : Node2D {
		
		
		void set_texture(Texture@ texture) {
			ptr.godot_icall(bindings::id_Sprite_set_texture, texture);
		}
		
		Texture@ get_texture() const {
			Texture ret = ptr.godot_icall(bindings::id_Sprite_get_texture);
			return  ret;
		}
		
		void set_normal_map(Texture@ normal_map) {
			ptr.godot_icall(bindings::id_Sprite_set_normal_map, normal_map);
		}
		
		Texture@ get_normal_map() const {
			Texture ret = ptr.godot_icall(bindings::id_Sprite_get_normal_map);
			return  ret;
		}
		
		void set_centered(bool centered) {
			ptr.godot_icall(bindings::id_Sprite_set_centered, centered);
		}
		
		bool is_centered() const {
			return ptr.godot_icall(bindings::id_Sprite_is_centered);
		}
		
		void set_offset(const Vector2 &in offset) {
			ptr.godot_icall(bindings::id_Sprite_set_offset, offset);
		}
		
		Vector2 get_offset() const {
			return ptr.godot_icall(bindings::id_Sprite_get_offset);
		}
		
		void set_flip_h(bool flip_h) {
			ptr.godot_icall(bindings::id_Sprite_set_flip_h, flip_h);
		}
		
		bool is_flipped_h() const {
			return ptr.godot_icall(bindings::id_Sprite_is_flipped_h);
		}
		
		void set_flip_v(bool flip_v) {
			ptr.godot_icall(bindings::id_Sprite_set_flip_v, flip_v);
		}
		
		bool is_flipped_v() const {
			return ptr.godot_icall(bindings::id_Sprite_is_flipped_v);
		}
		
		void set_region(bool enabled) {
			ptr.godot_icall(bindings::id_Sprite_set_region, enabled);
		}
		
		bool is_region() const {
			return ptr.godot_icall(bindings::id_Sprite_is_region);
		}
		
		void set_region_rect(const Rect2 &in rect) {
			ptr.godot_icall(bindings::id_Sprite_set_region_rect, rect);
		}
		
		Rect2 get_region_rect() const {
			return ptr.godot_icall(bindings::id_Sprite_get_region_rect);
		}
		
		void set_region_filter_clip(bool enabled) {
			ptr.godot_icall(bindings::id_Sprite_set_region_filter_clip, enabled);
		}
		
		bool is_region_filter_clip_enabled() const {
			return ptr.godot_icall(bindings::id_Sprite_is_region_filter_clip_enabled);
		}
		
		void set_frame(int frame) {
			ptr.godot_icall(bindings::id_Sprite_set_frame, frame);
		}
		
		int get_frame() const {
			return ptr.godot_icall(bindings::id_Sprite_get_frame);
		}
		
		void set_vframes(int vframes) {
			ptr.godot_icall(bindings::id_Sprite_set_vframes, vframes);
		}
		
		int get_vframes() const {
			return ptr.godot_icall(bindings::id_Sprite_get_vframes);
		}
		
		void set_hframes(int hframes) {
			ptr.godot_icall(bindings::id_Sprite_set_hframes, hframes);
		}
		
		int get_hframes() const {
			return ptr.godot_icall(bindings::id_Sprite_get_hframes);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Sprite);
		}
		
	}
	
	class EditorExportPlugin : Reference {
		
		
		protected void _export_file(const String &in path, const String &in type, const PoolStringArray &in features) {
			
		}
		
		protected void _export_begin(const PoolStringArray &in features, bool is_debug, const String &in path, int flags) {
			
		}
		
		void add_shared_object(const String &in path, const PoolStringArray &in tags) {
			ptr.godot_icall(bindings::id_EditorExportPlugin_add_shared_object, path, tags);
		}
		
		void add_file(const String &in path, const PoolByteArray &in file, bool remap) {
			ptr.godot_icall(bindings::id_EditorExportPlugin_add_file, path, file, remap);
		}
		
		void add_ios_framework(const String &in path) {
			ptr.godot_icall(bindings::id_EditorExportPlugin_add_ios_framework, path);
		}
		
		void add_ios_plist_content(const String &in plist_content) {
			ptr.godot_icall(bindings::id_EditorExportPlugin_add_ios_plist_content, plist_content);
		}
		
		void add_ios_linker_flags(const String &in flags) {
			ptr.godot_icall(bindings::id_EditorExportPlugin_add_ios_linker_flags, flags);
		}
		
		void add_ios_bundle_file(const String &in path) {
			ptr.godot_icall(bindings::id_EditorExportPlugin_add_ios_bundle_file, path);
		}
		
		void add_ios_cpp_code(const String &in code) {
			ptr.godot_icall(bindings::id_EditorExportPlugin_add_ios_cpp_code, code);
		}
		
		void skip() {
			ptr.godot_icall(bindings::id_EditorExportPlugin_skip);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_EditorExportPlugin)).ptr();
		}
		
	}
	
	class EditorInterface : Node {
		
		
		void inspect_object(Object@ object, const String &in for_property) {
			ptr.godot_icall(bindings::id_EditorInterface_inspect_object, object, for_property);
		}
		
		EditorSelection@ get_selection() {
			EditorSelection ret = ptr.godot_icall(bindings::id_EditorInterface_get_selection);
			return  ret;
		}
		
		EditorSettings@ get_editor_settings() {
			EditorSettings ret = ptr.godot_icall(bindings::id_EditorInterface_get_editor_settings);
			return  ret;
		}
		
		ScriptEditor@ get_script_editor() {
			ScriptEditor ret = ptr.godot_icall(bindings::id_EditorInterface_get_script_editor);
			return  ret;
		}
		
		Control@ get_base_control() {
			Control ret = ptr.godot_icall(bindings::id_EditorInterface_get_base_control);
			return  ret;
		}
		
		void edit_resource(Resource@ resource) {
			ptr.godot_icall(bindings::id_EditorInterface_edit_resource, resource);
		}
		
		void open_scene_from_path(const String &in scene_filepath) {
			ptr.godot_icall(bindings::id_EditorInterface_open_scene_from_path, scene_filepath);
		}
		
		void reload_scene_from_path(const String &in scene_filepath) {
			ptr.godot_icall(bindings::id_EditorInterface_reload_scene_from_path, scene_filepath);
		}
		
		Array get_open_scenes() const {
			return ptr.godot_icall(bindings::id_EditorInterface_get_open_scenes);
		}
		
		Node@ get_edited_scene_root() {
			Node ret = ptr.godot_icall(bindings::id_EditorInterface_get_edited_scene_root);
			return  ret;
		}
		
		EditorResourcePreview@ get_resource_previewer() {
			EditorResourcePreview ret = ptr.godot_icall(bindings::id_EditorInterface_get_resource_previewer);
			return  ret;
		}
		
		EditorFileSystem@ get_resource_filesystem() {
			EditorFileSystem ret = ptr.godot_icall(bindings::id_EditorInterface_get_resource_filesystem);
			return  ret;
		}
		
		Control@ get_editor_viewport() {
			Control ret = ptr.godot_icall(bindings::id_EditorInterface_get_editor_viewport);
			return  ret;
		}
		
		Array make_mesh_previews(const Array &in meshes, int preview_size) {
			return ptr.godot_icall(bindings::id_EditorInterface_make_mesh_previews, meshes, preview_size);
		}
		
		void select_file(const String &in p_file) {
			ptr.godot_icall(bindings::id_EditorInterface_select_file, p_file);
		}
		
		String get_selected_path() const {
			return ptr.godot_icall(bindings::id_EditorInterface_get_selected_path);
		}
		
		int save_scene() {
			return ptr.godot_icall(bindings::id_EditorInterface_save_scene);
		}
		
		void save_scene_as(const String &in path, bool with_preview) {
			ptr.godot_icall(bindings::id_EditorInterface_save_scene_as, path, with_preview);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_EditorInterface);
		}
		
	}
	
	class EditorResourcePreviewGenerator : Reference {
		
		
		bool handles(const String &in type) {
			return false;
		}
		
		Texture@ generate(Resource@ From) {
			return null;
		}
		
		Texture@ generate_from_path(const String &in path) {
			return null;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_EditorResourcePreviewGenerator)).ptr();
		}
		
	}
	
	class ConcavePolygonShape : Shape {
		
		
		void set_faces(const PoolVector3Array &in faces) {
			ptr.godot_icall(bindings::id_ConcavePolygonShape_set_faces, faces);
		}
		
		PoolVector3Array get_faces() const {
			return ptr.godot_icall(bindings::id_ConcavePolygonShape_get_faces);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ConcavePolygonShape)).ptr();
		}
		
	}
	
	class MultiMesh : Resource {
		
		
		void set_mesh(Mesh@ mesh) {
			ptr.godot_icall(bindings::id_MultiMesh_set_mesh, mesh);
		}
		
		Mesh@ get_mesh() const {
			Mesh ret = ptr.godot_icall(bindings::id_MultiMesh_get_mesh);
			return  ret;
		}
		
		void set_color_format(int format) {
			ptr.godot_icall(bindings::id_MultiMesh_set_color_format, format);
		}
		
		int get_color_format() const {
			return ptr.godot_icall(bindings::id_MultiMesh_get_color_format);
		}
		
		void set_transform_format(int format) {
			ptr.godot_icall(bindings::id_MultiMesh_set_transform_format, format);
		}
		
		int get_transform_format() const {
			return ptr.godot_icall(bindings::id_MultiMesh_get_transform_format);
		}
		
		void set_instance_count(int count) {
			ptr.godot_icall(bindings::id_MultiMesh_set_instance_count, count);
		}
		
		int get_instance_count() const {
			return ptr.godot_icall(bindings::id_MultiMesh_get_instance_count);
		}
		
		void set_instance_transform(int instance, const Transform &in transform) {
			ptr.godot_icall(bindings::id_MultiMesh_set_instance_transform, instance, transform);
		}
		
		Transform get_instance_transform(int instance) const {
			return ptr.godot_icall(bindings::id_MultiMesh_get_instance_transform, instance);
		}
		
		void set_instance_color(int instance, const Color &in color) {
			ptr.godot_icall(bindings::id_MultiMesh_set_instance_color, instance, color);
		}
		
		Color get_instance_color(int instance) const {
			return ptr.godot_icall(bindings::id_MultiMesh_get_instance_color, instance);
		}
		
		AABB get_aabb() const {
			return ptr.godot_icall(bindings::id_MultiMesh_get_aabb);
		}
		
		protected void _set_transform_array(const PoolVector3Array &in arg0) {
			ptr.godot_icall(bindings::id_MultiMesh__set_transform_array, arg0);
		}
		
		protected PoolVector3Array _get_transform_array() const {
			return ptr.godot_icall(bindings::id_MultiMesh__get_transform_array);
		}
		
		protected void _set_color_array(const PoolColorArray &in arg0) {
			ptr.godot_icall(bindings::id_MultiMesh__set_color_array, arg0);
		}
		
		protected PoolColorArray _get_color_array() const {
			return ptr.godot_icall(bindings::id_MultiMesh__get_color_array);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_MultiMesh)).ptr();
		}
		
	}
	
	class QuadMesh : PrimitiveMesh {
		
		
		void set_size(const Vector2 &in size) {
			ptr.godot_icall(bindings::id_QuadMesh_set_size, size);
		}
		
		Vector2 get_size() const {
			return ptr.godot_icall(bindings::id_QuadMesh_get_size);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_QuadMesh)).ptr();
		}
		
	}
	
	class PrismMesh : PrimitiveMesh {
		
		
		void set_left_to_right(float left_to_right) {
			ptr.godot_icall(bindings::id_PrismMesh_set_left_to_right, left_to_right);
		}
		
		float get_left_to_right() const {
			return ptr.godot_icall(bindings::id_PrismMesh_get_left_to_right);
		}
		
		void set_size(const Vector3 &in size) {
			ptr.godot_icall(bindings::id_PrismMesh_set_size, size);
		}
		
		Vector3 get_size() const {
			return ptr.godot_icall(bindings::id_PrismMesh_get_size);
		}
		
		void set_subdivide_width(int segments) {
			ptr.godot_icall(bindings::id_PrismMesh_set_subdivide_width, segments);
		}
		
		int get_subdivide_width() const {
			return ptr.godot_icall(bindings::id_PrismMesh_get_subdivide_width);
		}
		
		void set_subdivide_height(int segments) {
			ptr.godot_icall(bindings::id_PrismMesh_set_subdivide_height, segments);
		}
		
		int get_subdivide_height() const {
			return ptr.godot_icall(bindings::id_PrismMesh_get_subdivide_height);
		}
		
		void set_subdivide_depth(int segments) {
			ptr.godot_icall(bindings::id_PrismMesh_set_subdivide_depth, segments);
		}
		
		int get_subdivide_depth() const {
			return ptr.godot_icall(bindings::id_PrismMesh_get_subdivide_depth);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_PrismMesh)).ptr();
		}
		
	}
	
	class DampedSpringJoint2D : Joint2D {
		
		
		void set_length(float length) {
			ptr.godot_icall(bindings::id_DampedSpringJoint2D_set_length, length);
		}
		
		float get_length() const {
			return ptr.godot_icall(bindings::id_DampedSpringJoint2D_get_length);
		}
		
		void set_rest_length(float rest_length) {
			ptr.godot_icall(bindings::id_DampedSpringJoint2D_set_rest_length, rest_length);
		}
		
		float get_rest_length() const {
			return ptr.godot_icall(bindings::id_DampedSpringJoint2D_get_rest_length);
		}
		
		void set_stiffness(float stiffness) {
			ptr.godot_icall(bindings::id_DampedSpringJoint2D_set_stiffness, stiffness);
		}
		
		float get_stiffness() const {
			return ptr.godot_icall(bindings::id_DampedSpringJoint2D_get_stiffness);
		}
		
		void set_damping(float damping) {
			ptr.godot_icall(bindings::id_DampedSpringJoint2D_set_damping, damping);
		}
		
		float get_damping() const {
			return ptr.godot_icall(bindings::id_DampedSpringJoint2D_get_damping);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_DampedSpringJoint2D);
		}
		
	}
	
	class InstancePlaceholder : Node {
		
		
		Dictionary get_stored_values(bool with_order) {
			return ptr.godot_icall(bindings::id_InstancePlaceholder_get_stored_values, with_order);
		}
		
		void replace_by_instance(PackedScene@ custom_scene) {
			ptr.godot_icall(bindings::id_InstancePlaceholder_replace_by_instance, custom_scene);
		}
		
		String get_instance_path() const {
			return ptr.godot_icall(bindings::id_InstancePlaceholder_get_instance_path);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_InstancePlaceholder);
		}
		
	}
	
	class StreamPeer : Reference {
		
		
		int put_data(const PoolByteArray &in data) {
			return ptr.godot_icall(bindings::id_StreamPeer_put_data, data);
		}
		
		Array put_partial_data(const PoolByteArray &in data) {
			return ptr.godot_icall(bindings::id_StreamPeer_put_partial_data, data);
		}
		
		Array get_data(int bytes) {
			return ptr.godot_icall(bindings::id_StreamPeer_get_data, bytes);
		}
		
		Array get_partial_data(int bytes) {
			return ptr.godot_icall(bindings::id_StreamPeer_get_partial_data, bytes);
		}
		
		int get_available_bytes() const {
			return ptr.godot_icall(bindings::id_StreamPeer_get_available_bytes);
		}
		
		void set_big_endian(bool enable) {
			ptr.godot_icall(bindings::id_StreamPeer_set_big_endian, enable);
		}
		
		bool is_big_endian_enabled() const {
			return ptr.godot_icall(bindings::id_StreamPeer_is_big_endian_enabled);
		}
		
		void put_8(int value) {
			ptr.godot_icall(bindings::id_StreamPeer_put_8, value);
		}
		
		void put_u8(int value) {
			ptr.godot_icall(bindings::id_StreamPeer_put_u8, value);
		}
		
		void put_16(int value) {
			ptr.godot_icall(bindings::id_StreamPeer_put_16, value);
		}
		
		void put_u16(int value) {
			ptr.godot_icall(bindings::id_StreamPeer_put_u16, value);
		}
		
		void put_32(int value) {
			ptr.godot_icall(bindings::id_StreamPeer_put_32, value);
		}
		
		void put_u32(int value) {
			ptr.godot_icall(bindings::id_StreamPeer_put_u32, value);
		}
		
		void put_64(int value) {
			ptr.godot_icall(bindings::id_StreamPeer_put_64, value);
		}
		
		void put_u64(int value) {
			ptr.godot_icall(bindings::id_StreamPeer_put_u64, value);
		}
		
		void put_float(float value) {
			ptr.godot_icall(bindings::id_StreamPeer_put_float, value);
		}
		
		void put_double(float value) {
			ptr.godot_icall(bindings::id_StreamPeer_put_double, value);
		}
		
		void put_utf8_string(const String &in value) {
			ptr.godot_icall(bindings::id_StreamPeer_put_utf8_string, value);
		}
		
		void put_var(const Variant &in value) {
			ptr.godot_icall(bindings::id_StreamPeer_put_var, value);
		}
		
		int get_8() {
			return ptr.godot_icall(bindings::id_StreamPeer_get_8);
		}
		
		int get_u8() {
			return ptr.godot_icall(bindings::id_StreamPeer_get_u8);
		}
		
		int get_16() {
			return ptr.godot_icall(bindings::id_StreamPeer_get_16);
		}
		
		int get_u16() {
			return ptr.godot_icall(bindings::id_StreamPeer_get_u16);
		}
		
		int get_32() {
			return ptr.godot_icall(bindings::id_StreamPeer_get_32);
		}
		
		int get_u32() {
			return ptr.godot_icall(bindings::id_StreamPeer_get_u32);
		}
		
		int get_64() {
			return ptr.godot_icall(bindings::id_StreamPeer_get_64);
		}
		
		int get_u64() {
			return ptr.godot_icall(bindings::id_StreamPeer_get_u64);
		}
		
		float get_float() {
			return ptr.godot_icall(bindings::id_StreamPeer_get_float);
		}
		
		float get_double() {
			return ptr.godot_icall(bindings::id_StreamPeer_get_double);
		}
		
		String get_string(int bytes) {
			return ptr.godot_icall(bindings::id_StreamPeer_get_string, bytes);
		}
		
		String get_utf8_string(int bytes) {
			return ptr.godot_icall(bindings::id_StreamPeer_get_utf8_string, bytes);
		}
		
		Variant get_var() {
			return ptr.godot_icall(bindings::id_StreamPeer_get_var);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_StreamPeer)).ptr();
		}
		
	}
	
	class GraphNode : Container {
		
		
		void set_title(const String &in title) {
			ptr.godot_icall(bindings::id_GraphNode_set_title, title);
		}
		
		String get_title() const {
			return ptr.godot_icall(bindings::id_GraphNode_get_title);
		}
		
		protected void _gui_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_GraphNode__gui_input, arg0);
		}
		
		void set_slot(int idx, bool enable_left, int type_left, const Color &in color_left, bool enable_right, int type_right, const Color &in color_right, Texture@ custom_left, Texture@ custom_right) {
			ptr.godot_icall(bindings::id_GraphNode_set_slot, idx, enable_left, type_left, color_left, enable_right, type_right, color_right, custom_left, custom_right);
		}
		
		void clear_slot(int idx) {
			ptr.godot_icall(bindings::id_GraphNode_clear_slot, idx);
		}
		
		void clear_all_slots() {
			ptr.godot_icall(bindings::id_GraphNode_clear_all_slots);
		}
		
		bool is_slot_enabled_left(int idx) const {
			return ptr.godot_icall(bindings::id_GraphNode_is_slot_enabled_left, idx);
		}
		
		int get_slot_type_left(int idx) const {
			return ptr.godot_icall(bindings::id_GraphNode_get_slot_type_left, idx);
		}
		
		Color get_slot_color_left(int idx) const {
			return ptr.godot_icall(bindings::id_GraphNode_get_slot_color_left, idx);
		}
		
		bool is_slot_enabled_right(int idx) const {
			return ptr.godot_icall(bindings::id_GraphNode_is_slot_enabled_right, idx);
		}
		
		int get_slot_type_right(int idx) const {
			return ptr.godot_icall(bindings::id_GraphNode_get_slot_type_right, idx);
		}
		
		Color get_slot_color_right(int idx) const {
			return ptr.godot_icall(bindings::id_GraphNode_get_slot_color_right, idx);
		}
		
		void set_offset(const Vector2 &in offset) {
			ptr.godot_icall(bindings::id_GraphNode_set_offset, offset);
		}
		
		Vector2 get_offset() const {
			return ptr.godot_icall(bindings::id_GraphNode_get_offset);
		}
		
		void set_comment(bool comment) {
			ptr.godot_icall(bindings::id_GraphNode_set_comment, comment);
		}
		
		bool is_comment() const {
			return ptr.godot_icall(bindings::id_GraphNode_is_comment);
		}
		
		void set_resizable(bool resizable) {
			ptr.godot_icall(bindings::id_GraphNode_set_resizable, resizable);
		}
		
		bool is_resizable() const {
			return ptr.godot_icall(bindings::id_GraphNode_is_resizable);
		}
		
		void set_selected(bool selected) {
			ptr.godot_icall(bindings::id_GraphNode_set_selected, selected);
		}
		
		bool is_selected() {
			return ptr.godot_icall(bindings::id_GraphNode_is_selected);
		}
		
		int get_connection_output_count() {
			return ptr.godot_icall(bindings::id_GraphNode_get_connection_output_count);
		}
		
		int get_connection_input_count() {
			return ptr.godot_icall(bindings::id_GraphNode_get_connection_input_count);
		}
		
		Vector2 get_connection_output_position(int idx) {
			return ptr.godot_icall(bindings::id_GraphNode_get_connection_output_position, idx);
		}
		
		int get_connection_output_type(int idx) {
			return ptr.godot_icall(bindings::id_GraphNode_get_connection_output_type, idx);
		}
		
		Color get_connection_output_color(int idx) {
			return ptr.godot_icall(bindings::id_GraphNode_get_connection_output_color, idx);
		}
		
		Vector2 get_connection_input_position(int idx) {
			return ptr.godot_icall(bindings::id_GraphNode_get_connection_input_position, idx);
		}
		
		int get_connection_input_type(int idx) {
			return ptr.godot_icall(bindings::id_GraphNode_get_connection_input_type, idx);
		}
		
		Color get_connection_input_color(int idx) {
			return ptr.godot_icall(bindings::id_GraphNode_get_connection_input_color, idx);
		}
		
		void set_show_close_button(bool show) {
			ptr.godot_icall(bindings::id_GraphNode_set_show_close_button, show);
		}
		
		bool is_close_button_visible() const {
			return ptr.godot_icall(bindings::id_GraphNode_is_close_button_visible);
		}
		
		void set_overlay(int overlay) {
			ptr.godot_icall(bindings::id_GraphNode_set_overlay, overlay);
		}
		
		int get_overlay() const {
			return ptr.godot_icall(bindings::id_GraphNode_get_overlay);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_GraphNode);
		}
		
	}
	
	class GraphEdit : Control {
		
		
		int connect_node(const String &in From, int from_port, const String &in to, int to_port) {
			return ptr.godot_icall(bindings::id_GraphEdit_connect_node, From, from_port, to, to_port);
		}
		
		bool is_node_connected(const String &in From, int from_port, const String &in to, int to_port) {
			return ptr.godot_icall(bindings::id_GraphEdit_is_node_connected, From, from_port, to, to_port);
		}
		
		void disconnect_node(const String &in From, int from_port, const String &in to, int to_port) {
			ptr.godot_icall(bindings::id_GraphEdit_disconnect_node, From, from_port, to, to_port);
		}
		
		Array get_connection_list() const {
			return ptr.godot_icall(bindings::id_GraphEdit_get_connection_list);
		}
		
		Vector2 get_scroll_ofs() const {
			return ptr.godot_icall(bindings::id_GraphEdit_get_scroll_ofs);
		}
		
		void set_scroll_ofs(const Vector2 &in ofs) {
			ptr.godot_icall(bindings::id_GraphEdit_set_scroll_ofs, ofs);
		}
		
		void set_zoom(float p_zoom) {
			ptr.godot_icall(bindings::id_GraphEdit_set_zoom, p_zoom);
		}
		
		float get_zoom() const {
			return ptr.godot_icall(bindings::id_GraphEdit_get_zoom);
		}
		
		void set_snap(int pixels) {
			ptr.godot_icall(bindings::id_GraphEdit_set_snap, pixels);
		}
		
		int get_snap() const {
			return ptr.godot_icall(bindings::id_GraphEdit_get_snap);
		}
		
		void set_use_snap(bool enable) {
			ptr.godot_icall(bindings::id_GraphEdit_set_use_snap, enable);
		}
		
		bool is_using_snap() const {
			return ptr.godot_icall(bindings::id_GraphEdit_is_using_snap);
		}
		
		void set_right_disconnects(bool enable) {
			ptr.godot_icall(bindings::id_GraphEdit_set_right_disconnects, enable);
		}
		
		bool is_right_disconnects_enabled() const {
			return ptr.godot_icall(bindings::id_GraphEdit_is_right_disconnects_enabled);
		}
		
		protected void _graph_node_moved(Node@ arg0) {
			ptr.godot_icall(bindings::id_GraphEdit__graph_node_moved, arg0);
		}
		
		protected void _graph_node_raised(Node@ arg0) {
			ptr.godot_icall(bindings::id_GraphEdit__graph_node_raised, arg0);
		}
		
		protected void _top_layer_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_GraphEdit__top_layer_input, arg0);
		}
		
		protected void _top_layer_draw() {
			ptr.godot_icall(bindings::id_GraphEdit__top_layer_draw);
		}
		
		protected void _scroll_moved(float arg0) {
			ptr.godot_icall(bindings::id_GraphEdit__scroll_moved, arg0);
		}
		
		protected void _zoom_minus() {
			ptr.godot_icall(bindings::id_GraphEdit__zoom_minus);
		}
		
		protected void _zoom_reset() {
			ptr.godot_icall(bindings::id_GraphEdit__zoom_reset);
		}
		
		protected void _zoom_plus() {
			ptr.godot_icall(bindings::id_GraphEdit__zoom_plus);
		}
		
		protected void _snap_toggled() {
			ptr.godot_icall(bindings::id_GraphEdit__snap_toggled);
		}
		
		protected void _snap_value_changed(float arg0) {
			ptr.godot_icall(bindings::id_GraphEdit__snap_value_changed, arg0);
		}
		
		protected void _gui_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_GraphEdit__gui_input, arg0);
		}
		
		protected void _update_scroll_offset() {
			ptr.godot_icall(bindings::id_GraphEdit__update_scroll_offset);
		}
		
		protected void _connections_layer_draw() {
			ptr.godot_icall(bindings::id_GraphEdit__connections_layer_draw);
		}
		
		void set_selected(Node@ node) {
			ptr.godot_icall(bindings::id_GraphEdit_set_selected, node);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_GraphEdit);
		}
		
	}
	
	class _JSON : Object {
		
		
		String print(const Variant &in value, const String &in indent, bool sort_keys) {
			return ptr.godot_icall(bindings::id__JSON_print, value, indent, sort_keys);
		}
		
		JSONParseResult@ parse(const String &in json) {
			JSONParseResult ret = ptr.godot_icall(bindings::id__JSON_parse, json);
			return  ret;
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id__JSON);
		}
		
	}
	
	class ColorPickerButton : Button {
		
		
		void set_pick_color(const Color &in color) {
			ptr.godot_icall(bindings::id_ColorPickerButton_set_pick_color, color);
		}
		
		Color get_pick_color() const {
			return ptr.godot_icall(bindings::id_ColorPickerButton_get_pick_color);
		}
		
		ColorPicker@ get_picker() const {
			ColorPicker ret = ptr.godot_icall(bindings::id_ColorPickerButton_get_picker);
			return  ret;
		}
		
		PopupPanel@ get_popup() const {
			PopupPanel ret = ptr.godot_icall(bindings::id_ColorPickerButton_get_popup);
			return  ret;
		}
		
		void set_edit_alpha(bool show) {
			ptr.godot_icall(bindings::id_ColorPickerButton_set_edit_alpha, show);
		}
		
		bool is_editing_alpha() const {
			return ptr.godot_icall(bindings::id_ColorPickerButton_is_editing_alpha);
		}
		
		protected void _color_changed(const Color &in arg0) {
			ptr.godot_icall(bindings::id_ColorPickerButton__color_changed, arg0);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ColorPickerButton);
		}
		
	}
	
	class VisualScriptPropertySet : VisualScriptNode {
		
		
		void set_base_type(const String &in base_type) {
			ptr.godot_icall(bindings::id_VisualScriptPropertySet_set_base_type, base_type);
		}
		
		String get_base_type() const {
			return ptr.godot_icall(bindings::id_VisualScriptPropertySet_get_base_type);
		}
		
		void set_base_script(const String &in base_script) {
			ptr.godot_icall(bindings::id_VisualScriptPropertySet_set_base_script, base_script);
		}
		
		String get_base_script() const {
			return ptr.godot_icall(bindings::id_VisualScriptPropertySet_get_base_script);
		}
		
		void set_basic_type(int basic_type) {
			ptr.godot_icall(bindings::id_VisualScriptPropertySet_set_basic_type, basic_type);
		}
		
		int get_basic_type() const {
			return ptr.godot_icall(bindings::id_VisualScriptPropertySet_get_basic_type);
		}
		
		protected void _set_type_cache(const Dictionary &in type_cache) {
			ptr.godot_icall(bindings::id_VisualScriptPropertySet__set_type_cache, type_cache);
		}
		
		protected Dictionary _get_type_cache() const {
			return ptr.godot_icall(bindings::id_VisualScriptPropertySet__get_type_cache);
		}
		
		void set_property(const String &in property) {
			ptr.godot_icall(bindings::id_VisualScriptPropertySet_set_property, property);
		}
		
		String get_property() const {
			return ptr.godot_icall(bindings::id_VisualScriptPropertySet_get_property);
		}
		
		void set_call_mode(int mode) {
			ptr.godot_icall(bindings::id_VisualScriptPropertySet_set_call_mode, mode);
		}
		
		int get_call_mode() const {
			return ptr.godot_icall(bindings::id_VisualScriptPropertySet_get_call_mode);
		}
		
		void set_base_path(const NodePath &in base_path) {
			ptr.godot_icall(bindings::id_VisualScriptPropertySet_set_base_path, base_path);
		}
		
		NodePath get_base_path() const {
			return ptr.godot_icall(bindings::id_VisualScriptPropertySet_get_base_path);
		}
		
		void set_index(const String &in index) {
			ptr.godot_icall(bindings::id_VisualScriptPropertySet_set_index, index);
		}
		
		String get_index() const {
			return ptr.godot_icall(bindings::id_VisualScriptPropertySet_get_index);
		}
		
		void set_assign_op(int assign_op) {
			ptr.godot_icall(bindings::id_VisualScriptPropertySet_set_assign_op, assign_op);
		}
		
		int get_assign_op() const {
			return ptr.godot_icall(bindings::id_VisualScriptPropertySet_get_assign_op);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptPropertySet)).ptr();
		}
		
	}
	
	class SegmentShape2D : Shape2D {
		
		
		void set_a(const Vector2 &in a) {
			ptr.godot_icall(bindings::id_SegmentShape2D_set_a, a);
		}
		
		Vector2 get_a() const {
			return ptr.godot_icall(bindings::id_SegmentShape2D_get_a);
		}
		
		void set_b(const Vector2 &in b) {
			ptr.godot_icall(bindings::id_SegmentShape2D_set_b, b);
		}
		
		Vector2 get_b() const {
			return ptr.godot_icall(bindings::id_SegmentShape2D_get_b);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_SegmentShape2D)).ptr();
		}
		
	}
	
	class BoxShape : Shape {
		
		
		void set_extents(const Vector3 &in extents) {
			ptr.godot_icall(bindings::id_BoxShape_set_extents, extents);
		}
		
		Vector3 get_extents() const {
			return ptr.godot_icall(bindings::id_BoxShape_get_extents);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_BoxShape)).ptr();
		}
		
	}
	
	class ToolButton : Button {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ToolButton);
		}
		
	}
	
	class TabContainer : Control {
		
		
		protected void _gui_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_TabContainer__gui_input, arg0);
		}
		
		int get_tab_count() const {
			return ptr.godot_icall(bindings::id_TabContainer_get_tab_count);
		}
		
		void set_current_tab(int tab_idx) {
			ptr.godot_icall(bindings::id_TabContainer_set_current_tab, tab_idx);
		}
		
		int get_current_tab() const {
			return ptr.godot_icall(bindings::id_TabContainer_get_current_tab);
		}
		
		int get_previous_tab() const {
			return ptr.godot_icall(bindings::id_TabContainer_get_previous_tab);
		}
		
		Control@ get_current_tab_control() const {
			Control ret = ptr.godot_icall(bindings::id_TabContainer_get_current_tab_control);
			return  ret;
		}
		
		Control@ get_tab_control(int idx) const {
			Control ret = ptr.godot_icall(bindings::id_TabContainer_get_tab_control, idx);
			return  ret;
		}
		
		void set_tab_align(int align) {
			ptr.godot_icall(bindings::id_TabContainer_set_tab_align, align);
		}
		
		int get_tab_align() const {
			return ptr.godot_icall(bindings::id_TabContainer_get_tab_align);
		}
		
		void set_tabs_visible(bool visible) {
			ptr.godot_icall(bindings::id_TabContainer_set_tabs_visible, visible);
		}
		
		bool are_tabs_visible() const {
			return ptr.godot_icall(bindings::id_TabContainer_are_tabs_visible);
		}
		
		void set_tab_title(int tab_idx, const String &in title) {
			ptr.godot_icall(bindings::id_TabContainer_set_tab_title, tab_idx, title);
		}
		
		String get_tab_title(int tab_idx) const {
			return ptr.godot_icall(bindings::id_TabContainer_get_tab_title, tab_idx);
		}
		
		void set_tab_icon(int tab_idx, Texture@ icon) {
			ptr.godot_icall(bindings::id_TabContainer_set_tab_icon, tab_idx, icon);
		}
		
		Texture@ get_tab_icon(int tab_idx) const {
			Texture ret = ptr.godot_icall(bindings::id_TabContainer_get_tab_icon, tab_idx);
			return  ret;
		}
		
		void set_tab_disabled(int tab_idx, bool disabled) {
			ptr.godot_icall(bindings::id_TabContainer_set_tab_disabled, tab_idx, disabled);
		}
		
		bool get_tab_disabled(int tab_idx) const {
			return ptr.godot_icall(bindings::id_TabContainer_get_tab_disabled, tab_idx);
		}
		
		void set_popup(Node@ popup) {
			ptr.godot_icall(bindings::id_TabContainer_set_popup, popup);
		}
		
		Popup@ get_popup() const {
			Popup ret = ptr.godot_icall(bindings::id_TabContainer_get_popup);
			return  ret;
		}
		
		protected void _child_renamed_callback() {
			ptr.godot_icall(bindings::id_TabContainer__child_renamed_callback);
		}
		
		protected void _on_theme_changed() {
			ptr.godot_icall(bindings::id_TabContainer__on_theme_changed);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_TabContainer);
		}
		
	}
	
	class CanvasItemMaterial : Material {
		
		
		void set_blend_mode(int blend_mode) {
			ptr.godot_icall(bindings::id_CanvasItemMaterial_set_blend_mode, blend_mode);
		}
		
		int get_blend_mode() const {
			return ptr.godot_icall(bindings::id_CanvasItemMaterial_get_blend_mode);
		}
		
		void set_light_mode(int light_mode) {
			ptr.godot_icall(bindings::id_CanvasItemMaterial_set_light_mode, light_mode);
		}
		
		int get_light_mode() const {
			return ptr.godot_icall(bindings::id_CanvasItemMaterial_get_light_mode);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_CanvasItemMaterial)).ptr();
		}
		
	}
	
	class VisualScriptSwitch : VisualScriptNode {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptSwitch)).ptr();
		}
		
	}
	
	class VisualScriptVariableSet : VisualScriptNode {
		
		
		void set_variable(const String &in name) {
			ptr.godot_icall(bindings::id_VisualScriptVariableSet_set_variable, name);
		}
		
		String get_variable() const {
			return ptr.godot_icall(bindings::id_VisualScriptVariableSet_get_variable);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptVariableSet)).ptr();
		}
		
	}
	
	class InputEventKey : InputEventWithModifiers {
		
		
		void set_pressed(bool pressed) {
			ptr.godot_icall(bindings::id_InputEventKey_set_pressed, pressed);
		}
		
		void set_scancode(int scancode) {
			ptr.godot_icall(bindings::id_InputEventKey_set_scancode, scancode);
		}
		
		int get_scancode() const {
			return ptr.godot_icall(bindings::id_InputEventKey_get_scancode);
		}
		
		void set_unicode(int unicode) {
			ptr.godot_icall(bindings::id_InputEventKey_set_unicode, unicode);
		}
		
		int get_unicode() const {
			return ptr.godot_icall(bindings::id_InputEventKey_get_unicode);
		}
		
		void set_echo(bool echo) {
			ptr.godot_icall(bindings::id_InputEventKey_set_echo, echo);
		}
		
		int get_scancode_with_modifiers() const {
			return ptr.godot_icall(bindings::id_InputEventKey_get_scancode_with_modifiers);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_InputEventKey)).ptr();
		}
		
	}
	
	class InputEventMouse : InputEventWithModifiers {
		
		
		void set_button_mask(int button_mask) {
			ptr.godot_icall(bindings::id_InputEventMouse_set_button_mask, button_mask);
		}
		
		int get_button_mask() const {
			return ptr.godot_icall(bindings::id_InputEventMouse_get_button_mask);
		}
		
		void set_position(const Vector2 &in position) {
			ptr.godot_icall(bindings::id_InputEventMouse_set_position, position);
		}
		
		Vector2 get_position() const {
			return ptr.godot_icall(bindings::id_InputEventMouse_get_position);
		}
		
		void set_global_position(const Vector2 &in global_position) {
			ptr.godot_icall(bindings::id_InputEventMouse_set_global_position, global_position);
		}
		
		Vector2 get_global_position() const {
			return ptr.godot_icall(bindings::id_InputEventMouse_get_global_position);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_InputEventMouse)).ptr();
		}
		
	}
	
	class _ClassDB : Object {
		
		
		PoolStringArray get_class_list() const {
			return ptr.godot_icall(bindings::id__ClassDB_get_class_list);
		}
		
		PoolStringArray get_inheriters_from_class(const String &in Class) const {
			return ptr.godot_icall(bindings::id__ClassDB_get_inheriters_from_class, Class);
		}
		
		String get_parent_class(const String &in Class) const {
			return ptr.godot_icall(bindings::id__ClassDB_get_parent_class, Class);
		}
		
		bool class_exists(const String &in Class) const {
			return ptr.godot_icall(bindings::id__ClassDB_class_exists, Class);
		}
		
		bool is_parent_class(const String &in Class, const String &in inherits) const {
			return ptr.godot_icall(bindings::id__ClassDB_is_parent_class, Class, inherits);
		}
		
		bool can_instance(const String &in Class) const {
			return ptr.godot_icall(bindings::id__ClassDB_can_instance, Class);
		}
		
		Variant instance(const String &in Class) const {
			return ptr.godot_icall(bindings::id__ClassDB_instance, Class);
		}
		
		bool class_has_signal(const String &in Class, const String &in signal) const {
			return ptr.godot_icall(bindings::id__ClassDB_class_has_signal, Class, signal);
		}
		
		Dictionary class_get_signal(const String &in Class, const String &in signal) const {
			return ptr.godot_icall(bindings::id__ClassDB_class_get_signal, Class, signal);
		}
		
		Array class_get_signal_list(const String &in Class, bool no_inheritance) const {
			return ptr.godot_icall(bindings::id__ClassDB_class_get_signal_list, Class, no_inheritance);
		}
		
		Array class_get_property_list(const String &in Class, bool no_inheritance) const {
			return ptr.godot_icall(bindings::id__ClassDB_class_get_property_list, Class, no_inheritance);
		}
		
		Variant class_get_property(Object@ object, const String &in property) const {
			return ptr.godot_icall(bindings::id__ClassDB_class_get_property, object, property);
		}
		
		int class_set_property(Object@ object, const String &in property, const Variant &in value) const {
			return ptr.godot_icall(bindings::id__ClassDB_class_set_property, object, property, value);
		}
		
		bool class_has_method(const String &in Class, const String &in method, bool no_inheritance) const {
			return ptr.godot_icall(bindings::id__ClassDB_class_has_method, Class, method, no_inheritance);
		}
		
		Array class_get_method_list(const String &in Class, bool no_inheritance) const {
			return ptr.godot_icall(bindings::id__ClassDB_class_get_method_list, Class, no_inheritance);
		}
		
		PoolStringArray class_get_integer_constant_list(const String &in Class, bool no_inheritance) const {
			return ptr.godot_icall(bindings::id__ClassDB_class_get_integer_constant_list, Class, no_inheritance);
		}
		
		bool class_has_integer_constant(const String &in Class, const String &in name) const {
			return ptr.godot_icall(bindings::id__ClassDB_class_has_integer_constant, Class, name);
		}
		
		int class_get_integer_constant(const String &in Class, const String &in name) const {
			return ptr.godot_icall(bindings::id__ClassDB_class_get_integer_constant, Class, name);
		}
		
		String class_get_category(const String &in Class) const {
			return ptr.godot_icall(bindings::id__ClassDB_class_get_category, Class);
		}
		
		bool is_class_enabled(const String &in Class) const {
			return ptr.godot_icall(bindings::id__ClassDB_is_class_enabled, Class);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id__ClassDB);
		}
		
	}
	
	class VisualScriptComment : VisualScriptNode {
		
		
		void set_title(const String &in title) {
			ptr.godot_icall(bindings::id_VisualScriptComment_set_title, title);
		}
		
		String get_title() const {
			return ptr.godot_icall(bindings::id_VisualScriptComment_get_title);
		}
		
		void set_description(const String &in description) {
			ptr.godot_icall(bindings::id_VisualScriptComment_set_description, description);
		}
		
		String get_description() const {
			return ptr.godot_icall(bindings::id_VisualScriptComment_get_description);
		}
		
		void set_size(const Vector2 &in size) {
			ptr.godot_icall(bindings::id_VisualScriptComment_set_size, size);
		}
		
		Vector2 get_size() const {
			return ptr.godot_icall(bindings::id_VisualScriptComment_get_size);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptComment)).ptr();
		}
		
	}
	
	class NativeMessageDialog : GDNativeDialog {
		
		
		void set_message(const String &in message) {
			ptr.godot_icall(bindings::id_NativeMessageDialog_set_message, message);
		}
		
		String get_message() const {
			return ptr.godot_icall(bindings::id_NativeMessageDialog_get_message);
		}
		
		void set_buttons(const PoolStringArray &in buttons) {
			ptr.godot_icall(bindings::id_NativeMessageDialog_set_buttons, buttons);
		}
		
		PoolStringArray get_buttons() const {
			return ptr.godot_icall(bindings::id_NativeMessageDialog_get_buttons);
		}
		
		String get_response_button_title() const {
			return ptr.godot_icall(bindings::id_NativeMessageDialog_get_response_button_title);
		}
		
		int get_response_button_index() const {
			return ptr.godot_icall(bindings::id_NativeMessageDialog_get_response_button_index);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_NativeMessageDialog)).ptr();
		}
		
	}
	
	class ScriptEditor : PanelContainer {
		
		
		protected void _file_dialog_action(const String &in arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__file_dialog_action, arg0);
		}
		
		protected void _tab_changed(int arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__tab_changed, arg0);
		}
		
		protected void _menu_option(int arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__menu_option, arg0);
		}
		
		protected void _close_current_tab() {
			ptr.godot_icall(bindings::id_ScriptEditor__close_current_tab);
		}
		
		protected void _close_discard_current_tab(const String &in arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__close_discard_current_tab, arg0);
		}
		
		protected void _close_docs_tab() {
			ptr.godot_icall(bindings::id_ScriptEditor__close_docs_tab);
		}
		
		protected void _close_all_tabs() {
			ptr.godot_icall(bindings::id_ScriptEditor__close_all_tabs);
		}
		
		protected void _close_other_tabs() {
			ptr.godot_icall(bindings::id_ScriptEditor__close_other_tabs);
		}
		
		protected void _open_recent_script(int arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__open_recent_script, arg0);
		}
		
		protected void _editor_play() {
			ptr.godot_icall(bindings::id_ScriptEditor__editor_play);
		}
		
		protected void _editor_pause() {
			ptr.godot_icall(bindings::id_ScriptEditor__editor_pause);
		}
		
		protected void _editor_stop() {
			ptr.godot_icall(bindings::id_ScriptEditor__editor_stop);
		}
		
		protected void _add_callback(Object@ arg0, const String &in arg1, const PoolStringArray &in arg2) {
			ptr.godot_icall(bindings::id_ScriptEditor__add_callback, arg0, arg1, arg2);
		}
		
		protected void _reload_scripts() {
			ptr.godot_icall(bindings::id_ScriptEditor__reload_scripts);
		}
		
		protected void _resave_scripts(const String &in arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__resave_scripts, arg0);
		}
		
		protected void _res_saved_callback(Resource@ arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__res_saved_callback, arg0);
		}
		
		protected void _goto_script_line(Reference@ arg0, int arg1) {
			ptr.godot_icall(bindings::id_ScriptEditor__goto_script_line, arg0, arg1);
		}
		
		protected void _goto_script_line2(int arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__goto_script_line2, arg0);
		}
		
		protected void _help_search(const String &in arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__help_search, arg0);
		}
		
		protected void _help_index(const String &in arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__help_index, arg0);
		}
		
		protected void _save_history() {
			ptr.godot_icall(bindings::id_ScriptEditor__save_history);
		}
		
		protected void _copy_script_path() {
			ptr.godot_icall(bindings::id_ScriptEditor__copy_script_path);
		}
		
		protected void _breaked(bool arg0, bool arg1) {
			ptr.godot_icall(bindings::id_ScriptEditor__breaked, arg0, arg1);
		}
		
		protected void _show_debugger(bool arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__show_debugger, arg0);
		}
		
		protected String _get_debug_tooltip(const String &in arg0, Node@ arg1) {
			return ptr.godot_icall(bindings::id_ScriptEditor__get_debug_tooltip, arg0, arg1);
		}
		
		protected void _autosave_scripts() {
			ptr.godot_icall(bindings::id_ScriptEditor__autosave_scripts);
		}
		
		protected void _editor_settings_changed() {
			ptr.godot_icall(bindings::id_ScriptEditor__editor_settings_changed);
		}
		
		protected void _update_script_names() {
			ptr.godot_icall(bindings::id_ScriptEditor__update_script_names);
		}
		
		protected void _tree_changed() {
			ptr.godot_icall(bindings::id_ScriptEditor__tree_changed);
		}
		
		protected void _members_overview_selected(int arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__members_overview_selected, arg0);
		}
		
		protected void _help_overview_selected(int arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__help_overview_selected, arg0);
		}
		
		protected void _script_selected(int arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__script_selected, arg0);
		}
		
		protected void _script_created(Script@ arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__script_created, arg0);
		}
		
		protected void _script_split_dragged(float arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__script_split_dragged, arg0);
		}
		
		protected void _help_class_open(const String &in arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__help_class_open, arg0);
		}
		
		protected void _help_class_goto(const String &in arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__help_class_goto, arg0);
		}
		
		protected void _request_help(const String &in arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__request_help, arg0);
		}
		
		protected void _history_forward() {
			ptr.godot_icall(bindings::id_ScriptEditor__history_forward);
		}
		
		protected void _history_back() {
			ptr.godot_icall(bindings::id_ScriptEditor__history_back);
		}
		
		protected void _live_auto_reload_running_scripts() {
			ptr.godot_icall(bindings::id_ScriptEditor__live_auto_reload_running_scripts);
		}
		
		protected void _unhandled_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__unhandled_input, arg0);
		}
		
		protected void _script_list_gui_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_ScriptEditor__script_list_gui_input, arg0);
		}
		
		protected void _script_changed() {
			ptr.godot_icall(bindings::id_ScriptEditor__script_changed);
		}
		
		protected void _update_recent_scripts() {
			ptr.godot_icall(bindings::id_ScriptEditor__update_recent_scripts);
		}
		
		Variant get_drag_data_fw(const Vector2 &in point, Control@ From) {
			return ptr.godot_icall(bindings::id_ScriptEditor_get_drag_data_fw, point, From);
		}
		
		bool can_drop_data_fw(const Vector2 &in point, const Variant &in data, Control@ From) const {
			return ptr.godot_icall(bindings::id_ScriptEditor_can_drop_data_fw, point, data, From);
		}
		
		void drop_data_fw(const Vector2 &in point, const Variant &in data, Control@ From) {
			ptr.godot_icall(bindings::id_ScriptEditor_drop_data_fw, point, data, From);
		}
		
		Script@ get_current_script() {
			Script ret = ptr.godot_icall(bindings::id_ScriptEditor_get_current_script);
			return  ret;
		}
		
		Array get_open_scripts() const {
			return ptr.godot_icall(bindings::id_ScriptEditor_get_open_scripts);
		}
		
		void open_script_create_dialog(const String &in base_name, const String &in base_path) {
			ptr.godot_icall(bindings::id_ScriptEditor_open_script_create_dialog, base_name, base_path);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ScriptEditor);
		}
		
	}
	
	class EditorScript : Reference {
		
		
		protected void _run() {
			
		}
		
		void add_root_node(Node@ node) {
			ptr.godot_icall(bindings::id_EditorScript_add_root_node, node);
		}
		
		Node@ get_scene() {
			Node ret = ptr.godot_icall(bindings::id_EditorScript_get_scene);
			return  ret;
		}
		
		EditorInterface@ get_editor_interface() {
			EditorInterface ret = ptr.godot_icall(bindings::id_EditorScript_get_editor_interface);
			return  ret;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_EditorScript)).ptr();
		}
		
	}
	
	class DynamicFont : Font {
		
		
		void set_font_data(DynamicFontData@ data) {
			ptr.godot_icall(bindings::id_DynamicFont_set_font_data, data);
		}
		
		DynamicFontData@ get_font_data() const {
			DynamicFontData ret = ptr.godot_icall(bindings::id_DynamicFont_get_font_data);
			return  ret;
		}
		
		void set_size(int data) {
			ptr.godot_icall(bindings::id_DynamicFont_set_size, data);
		}
		
		int get_size() const {
			return ptr.godot_icall(bindings::id_DynamicFont_get_size);
		}
		
		void set_use_mipmaps(bool enable) {
			ptr.godot_icall(bindings::id_DynamicFont_set_use_mipmaps, enable);
		}
		
		bool get_use_mipmaps() const {
			return ptr.godot_icall(bindings::id_DynamicFont_get_use_mipmaps);
		}
		
		void set_use_filter(bool enable) {
			ptr.godot_icall(bindings::id_DynamicFont_set_use_filter, enable);
		}
		
		bool get_use_filter() const {
			return ptr.godot_icall(bindings::id_DynamicFont_get_use_filter);
		}
		
		void set_spacing(int type, int value) {
			ptr.godot_icall(bindings::id_DynamicFont_set_spacing, type, value);
		}
		
		int get_spacing(int type) const {
			return ptr.godot_icall(bindings::id_DynamicFont_get_spacing, type);
		}
		
		void add_fallback(DynamicFontData@ data) {
			ptr.godot_icall(bindings::id_DynamicFont_add_fallback, data);
		}
		
		void set_fallback(int idx, DynamicFontData@ data) {
			ptr.godot_icall(bindings::id_DynamicFont_set_fallback, idx, data);
		}
		
		DynamicFontData@ get_fallback(int idx) const {
			DynamicFontData ret = ptr.godot_icall(bindings::id_DynamicFont_get_fallback, idx);
			return  ret;
		}
		
		void remove_fallback(int idx) {
			ptr.godot_icall(bindings::id_DynamicFont_remove_fallback, idx);
		}
		
		int get_fallback_count() const {
			return ptr.godot_icall(bindings::id_DynamicFont_get_fallback_count);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_DynamicFont)).ptr();
		}
		
	}
	
	class LargeTexture : Texture {
		
		
		int add_piece(const Vector2 &in ofs, Texture@ texture) {
			return ptr.godot_icall(bindings::id_LargeTexture_add_piece, ofs, texture);
		}
		
		void set_piece_offset(int idx, const Vector2 &in ofs) {
			ptr.godot_icall(bindings::id_LargeTexture_set_piece_offset, idx, ofs);
		}
		
		void set_piece_texture(int idx, Texture@ texture) {
			ptr.godot_icall(bindings::id_LargeTexture_set_piece_texture, idx, texture);
		}
		
		void set_size(const Vector2 &in size) {
			ptr.godot_icall(bindings::id_LargeTexture_set_size, size);
		}
		
		void clear() {
			ptr.godot_icall(bindings::id_LargeTexture_clear);
		}
		
		int get_piece_count() const {
			return ptr.godot_icall(bindings::id_LargeTexture_get_piece_count);
		}
		
		Vector2 get_piece_offset(int idx) const {
			return ptr.godot_icall(bindings::id_LargeTexture_get_piece_offset, idx);
		}
		
		Texture@ get_piece_texture(int idx) const {
			Texture ret = ptr.godot_icall(bindings::id_LargeTexture_get_piece_texture, idx);
			return  ret;
		}
		
		protected void _set_data(const Array &in data) {
			ptr.godot_icall(bindings::id_LargeTexture__set_data, data);
		}
		
		protected Array _get_data() const {
			return ptr.godot_icall(bindings::id_LargeTexture__get_data);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_LargeTexture)).ptr();
		}
		
	}
	
	class Button : BaseButton {
		
		
		void set_text(const String &in text) {
			ptr.godot_icall(bindings::id_Button_set_text, text);
		}
		
		String get_text() const {
			return ptr.godot_icall(bindings::id_Button_get_text);
		}
		
		void set_button_icon(Texture@ texture) {
			ptr.godot_icall(bindings::id_Button_set_button_icon, texture);
		}
		
		Texture@ get_button_icon() const {
			Texture ret = ptr.godot_icall(bindings::id_Button_get_button_icon);
			return  ret;
		}
		
		void set_flat(bool enabled) {
			ptr.godot_icall(bindings::id_Button_set_flat, enabled);
		}
		
		void set_clip_text(bool enabled) {
			ptr.godot_icall(bindings::id_Button_set_clip_text, enabled);
		}
		
		bool get_clip_text() const {
			return ptr.godot_icall(bindings::id_Button_get_clip_text);
		}
		
		void set_text_align(int align) {
			ptr.godot_icall(bindings::id_Button_set_text_align, align);
		}
		
		int get_text_align() const {
			return ptr.godot_icall(bindings::id_Button_get_text_align);
		}
		
		bool is_flat() const {
			return ptr.godot_icall(bindings::id_Button_is_flat);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Button);
		}
		
	}
	
	class ShortCut : Resource {
		
		
		void set_shortcut(InputEvent@ event) {
			ptr.godot_icall(bindings::id_ShortCut_set_shortcut, event);
		}
		
		InputEvent@ get_shortcut() const {
			InputEvent ret = ptr.godot_icall(bindings::id_ShortCut_get_shortcut);
			return  ret;
		}
		
		bool is_valid() const {
			return ptr.godot_icall(bindings::id_ShortCut_is_valid);
		}
		
		bool is_shortcut(InputEvent@ event) const {
			return ptr.godot_icall(bindings::id_ShortCut_is_shortcut, event);
		}
		
		String get_as_text() const {
			return ptr.godot_icall(bindings::id_ShortCut_get_as_text);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ShortCut)).ptr();
		}
		
	}
	
	class Curve3D : Resource {
		
		
		int get_point_count() const {
			return ptr.godot_icall(bindings::id_Curve3D_get_point_count);
		}
		
		void add_point(const Vector3 &in position, const Vector3 &in In, const Vector3 &in Out, int at_position) {
			ptr.godot_icall(bindings::id_Curve3D_add_point, position, In, Out, at_position);
		}
		
		void set_point_position(int idx, const Vector3 &in position) {
			ptr.godot_icall(bindings::id_Curve3D_set_point_position, idx, position);
		}
		
		Vector3 get_point_position(int idx) const {
			return ptr.godot_icall(bindings::id_Curve3D_get_point_position, idx);
		}
		
		void set_point_tilt(int idx, float tilt) {
			ptr.godot_icall(bindings::id_Curve3D_set_point_tilt, idx, tilt);
		}
		
		float get_point_tilt(int idx) const {
			return ptr.godot_icall(bindings::id_Curve3D_get_point_tilt, idx);
		}
		
		void set_point_in(int idx, const Vector3 &in position) {
			ptr.godot_icall(bindings::id_Curve3D_set_point_in, idx, position);
		}
		
		Vector3 get_point_in(int idx) const {
			return ptr.godot_icall(bindings::id_Curve3D_get_point_in, idx);
		}
		
		void set_point_out(int idx, const Vector3 &in position) {
			ptr.godot_icall(bindings::id_Curve3D_set_point_out, idx, position);
		}
		
		Vector3 get_point_out(int idx) const {
			return ptr.godot_icall(bindings::id_Curve3D_get_point_out, idx);
		}
		
		void remove_point(int idx) {
			ptr.godot_icall(bindings::id_Curve3D_remove_point, idx);
		}
		
		void clear_points() {
			ptr.godot_icall(bindings::id_Curve3D_clear_points);
		}
		
		Vector3 interpolate(int idx, float t) const {
			return ptr.godot_icall(bindings::id_Curve3D_interpolate, idx, t);
		}
		
		Vector3 interpolatef(float fofs) const {
			return ptr.godot_icall(bindings::id_Curve3D_interpolatef, fofs);
		}
		
		void set_bake_interval(float distance) {
			ptr.godot_icall(bindings::id_Curve3D_set_bake_interval, distance);
		}
		
		float get_bake_interval() const {
			return ptr.godot_icall(bindings::id_Curve3D_get_bake_interval);
		}
		
		float get_baked_length() const {
			return ptr.godot_icall(bindings::id_Curve3D_get_baked_length);
		}
		
		Vector3 interpolate_baked(float offset, bool cubic) const {
			return ptr.godot_icall(bindings::id_Curve3D_interpolate_baked, offset, cubic);
		}
		
		PoolVector3Array get_baked_points() const {
			return ptr.godot_icall(bindings::id_Curve3D_get_baked_points);
		}
		
		PoolRealArray get_baked_tilts() const {
			return ptr.godot_icall(bindings::id_Curve3D_get_baked_tilts);
		}
		
		PoolVector3Array tessellate(int max_stages, float tolerance_degrees) const {
			return ptr.godot_icall(bindings::id_Curve3D_tessellate, max_stages, tolerance_degrees);
		}
		
		protected Dictionary _get_data() const {
			return ptr.godot_icall(bindings::id_Curve3D__get_data);
		}
		
		protected void _set_data(const Dictionary &in arg0) {
			ptr.godot_icall(bindings::id_Curve3D__set_data, arg0);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Curve3D)).ptr();
		}
		
	}
	
	class VisualScriptLocalVar : VisualScriptNode {
		
		
		void set_var_name(const String &in name) {
			ptr.godot_icall(bindings::id_VisualScriptLocalVar_set_var_name, name);
		}
		
		String get_var_name() const {
			return ptr.godot_icall(bindings::id_VisualScriptLocalVar_get_var_name);
		}
		
		void set_var_type(int type) {
			ptr.godot_icall(bindings::id_VisualScriptLocalVar_set_var_type, type);
		}
		
		int get_var_type() const {
			return ptr.godot_icall(bindings::id_VisualScriptLocalVar_get_var_type);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptLocalVar)).ptr();
		}
		
	}
	
	class VisualScriptSceneNode : VisualScriptNode {
		
		
		void set_node_path(const NodePath &in path) {
			ptr.godot_icall(bindings::id_VisualScriptSceneNode_set_node_path, path);
		}
		
		NodePath get_node_path() {
			return ptr.godot_icall(bindings::id_VisualScriptSceneNode_get_node_path);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptSceneNode)).ptr();
		}
		
	}
	
	class VisualScriptMathConstant : VisualScriptNode {
		
		
		void set_math_constant(int which) {
			ptr.godot_icall(bindings::id_VisualScriptMathConstant_set_math_constant, which);
		}
		
		int get_math_constant() {
			return ptr.godot_icall(bindings::id_VisualScriptMathConstant_get_math_constant);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptMathConstant)).ptr();
		}
		
	}
	
	class TexturePackerConfig : Resource {
		
		
		void set_padding(int p_padding) {
			ptr.godot_icall(bindings::id_TexturePackerConfig_set_padding, p_padding);
		}
		
		int get_padding() const {
			return ptr.godot_icall(bindings::id_TexturePackerConfig_get_padding);
		}
		
		void set_trim(bool p_trim) {
			ptr.godot_icall(bindings::id_TexturePackerConfig_set_trim, p_trim);
		}
		
		bool is_trim() const {
			return ptr.godot_icall(bindings::id_TexturePackerConfig_is_trim);
		}
		
		void set_squared(bool p_squared) {
			ptr.godot_icall(bindings::id_TexturePackerConfig_set_squared, p_squared);
		}
		
		bool is_squared() const {
			return ptr.godot_icall(bindings::id_TexturePackerConfig_is_squared);
		}
		
		void set_allow_rotate(bool p_allow_rotate) {
			ptr.godot_icall(bindings::id_TexturePackerConfig_set_allow_rotate, p_allow_rotate);
		}
		
		bool get_allow_rotate() const {
			return ptr.godot_icall(bindings::id_TexturePackerConfig_get_allow_rotate);
		}
		
		void set_max_size(const Vector2 &in p_max_size) {
			ptr.godot_icall(bindings::id_TexturePackerConfig_set_max_size, p_max_size);
		}
		
		Vector2 get_max_size() const {
			return ptr.godot_icall(bindings::id_TexturePackerConfig_get_max_size);
		}
		
		void set_image_files(const PoolStringArray &in p_image_files) {
			ptr.godot_icall(bindings::id_TexturePackerConfig_set_image_files, p_image_files);
		}
		
		PoolStringArray get_image_files() const {
			return ptr.godot_icall(bindings::id_TexturePackerConfig_get_image_files);
		}
		
		void set_save_image(const String &in p_save_image) {
			ptr.godot_icall(bindings::id_TexturePackerConfig_set_save_image, p_save_image);
		}
		
		String get_save_image() const {
			return ptr.godot_icall(bindings::id_TexturePackerConfig_get_save_image);
		}
		
		void set_save_meta(const String &in p_save_meta) {
			ptr.godot_icall(bindings::id_TexturePackerConfig_set_save_meta, p_save_meta);
		}
		
		String get_save_meta() const {
			return ptr.godot_icall(bindings::id_TexturePackerConfig_get_save_meta);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_TexturePackerConfig)).ptr();
		}
		
	}
	
	class BitMap : Resource {
		
		
		void create(const Vector2 &in size) {
			ptr.godot_icall(bindings::id_BitMap_create, size);
		}
		
		void create_from_image_alpha(Image@ image) {
			ptr.godot_icall(bindings::id_BitMap_create_from_image_alpha, image);
		}
		
		void set_bit(const Vector2 &in position, bool bit) {
			ptr.godot_icall(bindings::id_BitMap_set_bit, position, bit);
		}
		
		bool get_bit(const Vector2 &in position) const {
			return ptr.godot_icall(bindings::id_BitMap_get_bit, position);
		}
		
		void set_bit_rect(const Rect2 &in p_rect, bool bit) {
			ptr.godot_icall(bindings::id_BitMap_set_bit_rect, p_rect, bit);
		}
		
		int get_true_bit_count() const {
			return ptr.godot_icall(bindings::id_BitMap_get_true_bit_count);
		}
		
		Vector2 get_size() const {
			return ptr.godot_icall(bindings::id_BitMap_get_size);
		}
		
		protected void _set_data(const Dictionary &in arg0) {
			ptr.godot_icall(bindings::id_BitMap__set_data, arg0);
		}
		
		protected Dictionary _get_data() const {
			return ptr.godot_icall(bindings::id_BitMap__get_data);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_BitMap)).ptr();
		}
		
	}
	
	class CubeMap : Resource {
		
		
		int get_width() const {
			return ptr.godot_icall(bindings::id_CubeMap_get_width);
		}
		
		int get_height() const {
			return ptr.godot_icall(bindings::id_CubeMap_get_height);
		}
		
		void set_flags(int flags) {
			ptr.godot_icall(bindings::id_CubeMap_set_flags, flags);
		}
		
		int get_flags() const {
			return ptr.godot_icall(bindings::id_CubeMap_get_flags);
		}
		
		void set_side(int side, Image@ image) {
			ptr.godot_icall(bindings::id_CubeMap_set_side, side, image);
		}
		
		Image@ get_side(int side) const {
			Image ret = ptr.godot_icall(bindings::id_CubeMap_get_side, side);
			return  ret;
		}
		
		void set_storage(int mode) {
			ptr.godot_icall(bindings::id_CubeMap_set_storage, mode);
		}
		
		int get_storage() const {
			return ptr.godot_icall(bindings::id_CubeMap_get_storage);
		}
		
		void set_lossy_storage_quality(float quality) {
			ptr.godot_icall(bindings::id_CubeMap_set_lossy_storage_quality, quality);
		}
		
		float get_lossy_storage_quality() const {
			return ptr.godot_icall(bindings::id_CubeMap_get_lossy_storage_quality);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_CubeMap)).ptr();
		}
		
	}
	
	class StreamTexture : Texture {
		
		
		int load(const String &in path) {
			return ptr.godot_icall(bindings::id_StreamTexture_load, path);
		}
		
		String get_load_path() const {
			return ptr.godot_icall(bindings::id_StreamTexture_get_load_path);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_StreamTexture)).ptr();
		}
		
	}
	
	class PlaneMesh : PrimitiveMesh {
		
		
		void set_size(const Vector2 &in size) {
			ptr.godot_icall(bindings::id_PlaneMesh_set_size, size);
		}
		
		Vector2 get_size() const {
			return ptr.godot_icall(bindings::id_PlaneMesh_get_size);
		}
		
		void set_subdivide_width(int subdivide) {
			ptr.godot_icall(bindings::id_PlaneMesh_set_subdivide_width, subdivide);
		}
		
		int get_subdivide_width() const {
			return ptr.godot_icall(bindings::id_PlaneMesh_get_subdivide_width);
		}
		
		void set_subdivide_depth(int subdivide) {
			ptr.godot_icall(bindings::id_PlaneMesh_set_subdivide_depth, subdivide);
		}
		
		int get_subdivide_depth() const {
			return ptr.godot_icall(bindings::id_PlaneMesh_get_subdivide_depth);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_PlaneMesh)).ptr();
		}
		
	}
	
	class ResourceInteractiveLoader : Reference {
		
		
		Resource@ get_resource() {
			Resource ret = ptr.godot_icall(bindings::id_ResourceInteractiveLoader_get_resource);
			return  ret;
		}
		
		int poll() {
			return ptr.godot_icall(bindings::id_ResourceInteractiveLoader_poll);
		}
		
		int wait() {
			return ptr.godot_icall(bindings::id_ResourceInteractiveLoader_wait);
		}
		
		int get_stage() const {
			return ptr.godot_icall(bindings::id_ResourceInteractiveLoader_get_stage);
		}
		
		int get_stage_count() const {
			return ptr.godot_icall(bindings::id_ResourceInteractiveLoader_get_stage_count);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ResourceInteractiveLoader)).ptr();
		}
		
	}
	
	class ReferenceRect : Control {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ReferenceRect);
		}
		
	}
	
	class AnimationTreePlayer : Node {
		
		
		void add_node(int type, const String &in id) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_add_node, type, id);
		}
		
		bool node_exists(const String &in node) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_node_exists, node);
		}
		
		int node_rename(const String &in node, const String &in new_name) {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_node_rename, node, new_name);
		}
		
		int node_get_type(const String &in id) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_node_get_type, id);
		}
		
		int node_get_input_count(const String &in id) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_node_get_input_count, id);
		}
		
		String node_get_input_source(const String &in id, int idx) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_node_get_input_source, id, idx);
		}
		
		void animation_node_set_animation(const String &in id, Animation@ animation) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_animation_node_set_animation, id, animation);
		}
		
		Animation@ animation_node_get_animation(const String &in id) const {
			Animation ret = ptr.godot_icall(bindings::id_AnimationTreePlayer_animation_node_get_animation, id);
			return  ret;
		}
		
		void animation_node_set_master_animation(const String &in id, const String &in source) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_animation_node_set_master_animation, id, source);
		}
		
		String animation_node_get_master_animation(const String &in id) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_animation_node_get_master_animation, id);
		}
		
		void animation_node_set_filter_path(const String &in id, const NodePath &in path, bool enable) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_animation_node_set_filter_path, id, path, enable);
		}
		
		void oneshot_node_set_fadein_time(const String &in id, float time_sec) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_oneshot_node_set_fadein_time, id, time_sec);
		}
		
		float oneshot_node_get_fadein_time(const String &in id) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_oneshot_node_get_fadein_time, id);
		}
		
		void oneshot_node_set_fadeout_time(const String &in id, float time_sec) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_oneshot_node_set_fadeout_time, id, time_sec);
		}
		
		float oneshot_node_get_fadeout_time(const String &in id) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_oneshot_node_get_fadeout_time, id);
		}
		
		void oneshot_node_set_autorestart(const String &in id, bool enable) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_oneshot_node_set_autorestart, id, enable);
		}
		
		void oneshot_node_set_autorestart_delay(const String &in id, float delay_sec) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_oneshot_node_set_autorestart_delay, id, delay_sec);
		}
		
		void oneshot_node_set_autorestart_random_delay(const String &in id, float rand_sec) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_oneshot_node_set_autorestart_random_delay, id, rand_sec);
		}
		
		bool oneshot_node_has_autorestart(const String &in id) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_oneshot_node_has_autorestart, id);
		}
		
		float oneshot_node_get_autorestart_delay(const String &in id) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_oneshot_node_get_autorestart_delay, id);
		}
		
		float oneshot_node_get_autorestart_random_delay(const String &in id) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_oneshot_node_get_autorestart_random_delay, id);
		}
		
		void oneshot_node_start(const String &in id) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_oneshot_node_start, id);
		}
		
		void oneshot_node_stop(const String &in id) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_oneshot_node_stop, id);
		}
		
		bool oneshot_node_is_active(const String &in id) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_oneshot_node_is_active, id);
		}
		
		void oneshot_node_set_filter_path(const String &in id, const NodePath &in path, bool enable) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_oneshot_node_set_filter_path, id, path, enable);
		}
		
		void mix_node_set_amount(const String &in id, float ratio) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_mix_node_set_amount, id, ratio);
		}
		
		float mix_node_get_amount(const String &in id) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_mix_node_get_amount, id);
		}
		
		void blend2_node_set_amount(const String &in id, float blend) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_blend2_node_set_amount, id, blend);
		}
		
		float blend2_node_get_amount(const String &in id) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_blend2_node_get_amount, id);
		}
		
		void blend2_node_set_filter_path(const String &in id, const NodePath &in path, bool enable) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_blend2_node_set_filter_path, id, path, enable);
		}
		
		void blend3_node_set_amount(const String &in id, float blend) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_blend3_node_set_amount, id, blend);
		}
		
		float blend3_node_get_amount(const String &in id) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_blend3_node_get_amount, id);
		}
		
		void blend4_node_set_amount(const String &in id, const Vector2 &in blend) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_blend4_node_set_amount, id, blend);
		}
		
		Vector2 blend4_node_get_amount(const String &in id) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_blend4_node_get_amount, id);
		}
		
		void timescale_node_set_scale(const String &in id, float scale) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_timescale_node_set_scale, id, scale);
		}
		
		float timescale_node_get_scale(const String &in id) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_timescale_node_get_scale, id);
		}
		
		void timeseek_node_seek(const String &in id, float seconds) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_timeseek_node_seek, id, seconds);
		}
		
		void transition_node_set_input_count(const String &in id, int count) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_transition_node_set_input_count, id, count);
		}
		
		int transition_node_get_input_count(const String &in id) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_transition_node_get_input_count, id);
		}
		
		void transition_node_delete_input(const String &in id, int input_idx) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_transition_node_delete_input, id, input_idx);
		}
		
		void transition_node_set_input_auto_advance(const String &in id, int input_idx, bool enable) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_transition_node_set_input_auto_advance, id, input_idx, enable);
		}
		
		bool transition_node_has_input_auto_advance(const String &in id, int input_idx) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_transition_node_has_input_auto_advance, id, input_idx);
		}
		
		void transition_node_set_xfade_time(const String &in id, float time_sec) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_transition_node_set_xfade_time, id, time_sec);
		}
		
		float transition_node_get_xfade_time(const String &in id) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_transition_node_get_xfade_time, id);
		}
		
		void transition_node_set_current(const String &in id, int input_idx) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_transition_node_set_current, id, input_idx);
		}
		
		int transition_node_get_current(const String &in id) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_transition_node_get_current, id);
		}
		
		void node_set_position(const String &in id, const Vector2 &in screen_position) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_node_set_position, id, screen_position);
		}
		
		Vector2 node_get_position(const String &in id) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_node_get_position, id);
		}
		
		void remove_node(const String &in id) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_remove_node, id);
		}
		
		int connect_nodes(const String &in id, const String &in dst_id, int dst_input_idx) {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_connect_nodes, id, dst_id, dst_input_idx);
		}
		
		bool are_nodes_connected(const String &in id, const String &in dst_id, int dst_input_idx) const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_are_nodes_connected, id, dst_id, dst_input_idx);
		}
		
		void disconnect_nodes(const String &in id, int dst_input_idx) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_disconnect_nodes, id, dst_input_idx);
		}
		
		void set_active(bool enabled) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_set_active, enabled);
		}
		
		bool is_active() const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_is_active);
		}
		
		void set_base_path(const NodePath &in path) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_set_base_path, path);
		}
		
		NodePath get_base_path() const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_get_base_path);
		}
		
		void set_master_player(const NodePath &in nodepath) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_set_master_player, nodepath);
		}
		
		NodePath get_master_player() const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_get_master_player);
		}
		
		PoolStringArray get_node_list() {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_get_node_list);
		}
		
		void set_animation_process_mode(int mode) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_set_animation_process_mode, mode);
		}
		
		int get_animation_process_mode() const {
			return ptr.godot_icall(bindings::id_AnimationTreePlayer_get_animation_process_mode);
		}
		
		void advance(float delta) {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_advance, delta);
		}
		
		void reset() {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_reset);
		}
		
		void recompute_caches() {
			ptr.godot_icall(bindings::id_AnimationTreePlayer_recompute_caches);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_AnimationTreePlayer);
		}
		
	}
	
	class NavigationMesh : Resource {
		
		
		void set_sample_partition_type(int sample_partition_type) {
			ptr.godot_icall(bindings::id_NavigationMesh_set_sample_partition_type, sample_partition_type);
		}
		
		int get_sample_partition_type() const {
			return ptr.godot_icall(bindings::id_NavigationMesh_get_sample_partition_type);
		}
		
		void set_cell_size(float cell_size) {
			ptr.godot_icall(bindings::id_NavigationMesh_set_cell_size, cell_size);
		}
		
		float get_cell_size() const {
			return ptr.godot_icall(bindings::id_NavigationMesh_get_cell_size);
		}
		
		void set_cell_height(float cell_height) {
			ptr.godot_icall(bindings::id_NavigationMesh_set_cell_height, cell_height);
		}
		
		float get_cell_height() const {
			return ptr.godot_icall(bindings::id_NavigationMesh_get_cell_height);
		}
		
		void set_agent_height(float agent_height) {
			ptr.godot_icall(bindings::id_NavigationMesh_set_agent_height, agent_height);
		}
		
		float get_agent_height() const {
			return ptr.godot_icall(bindings::id_NavigationMesh_get_agent_height);
		}
		
		void set_agent_radius(float agent_radius) {
			ptr.godot_icall(bindings::id_NavigationMesh_set_agent_radius, agent_radius);
		}
		
		float get_agent_radius() {
			return ptr.godot_icall(bindings::id_NavigationMesh_get_agent_radius);
		}
		
		void set_agent_max_climb(float agent_max_climb) {
			ptr.godot_icall(bindings::id_NavigationMesh_set_agent_max_climb, agent_max_climb);
		}
		
		float get_agent_max_climb() const {
			return ptr.godot_icall(bindings::id_NavigationMesh_get_agent_max_climb);
		}
		
		void set_agent_max_slope(float agent_max_slope) {
			ptr.godot_icall(bindings::id_NavigationMesh_set_agent_max_slope, agent_max_slope);
		}
		
		float get_agent_max_slope() const {
			return ptr.godot_icall(bindings::id_NavigationMesh_get_agent_max_slope);
		}
		
		void set_region_min_size(float region_min_size) {
			ptr.godot_icall(bindings::id_NavigationMesh_set_region_min_size, region_min_size);
		}
		
		float get_region_min_size() const {
			return ptr.godot_icall(bindings::id_NavigationMesh_get_region_min_size);
		}
		
		void set_region_merge_size(float region_merge_size) {
			ptr.godot_icall(bindings::id_NavigationMesh_set_region_merge_size, region_merge_size);
		}
		
		float get_region_merge_size() const {
			return ptr.godot_icall(bindings::id_NavigationMesh_get_region_merge_size);
		}
		
		void set_edge_max_length(float edge_max_length) {
			ptr.godot_icall(bindings::id_NavigationMesh_set_edge_max_length, edge_max_length);
		}
		
		float get_edge_max_length() const {
			return ptr.godot_icall(bindings::id_NavigationMesh_get_edge_max_length);
		}
		
		void set_edge_max_error(float edge_max_error) {
			ptr.godot_icall(bindings::id_NavigationMesh_set_edge_max_error, edge_max_error);
		}
		
		float get_edge_max_error() const {
			return ptr.godot_icall(bindings::id_NavigationMesh_get_edge_max_error);
		}
		
		void set_verts_per_poly(float verts_per_poly) {
			ptr.godot_icall(bindings::id_NavigationMesh_set_verts_per_poly, verts_per_poly);
		}
		
		float get_verts_per_poly() const {
			return ptr.godot_icall(bindings::id_NavigationMesh_get_verts_per_poly);
		}
		
		void set_detail_sample_distance(float detail_sample_dist) {
			ptr.godot_icall(bindings::id_NavigationMesh_set_detail_sample_distance, detail_sample_dist);
		}
		
		float get_detail_sample_distance() const {
			return ptr.godot_icall(bindings::id_NavigationMesh_get_detail_sample_distance);
		}
		
		void set_detail_sample_max_error(float detail_sample_max_error) {
			ptr.godot_icall(bindings::id_NavigationMesh_set_detail_sample_max_error, detail_sample_max_error);
		}
		
		float get_detail_sample_max_error() const {
			return ptr.godot_icall(bindings::id_NavigationMesh_get_detail_sample_max_error);
		}
		
		void set_filter_low_hanging_obstacles(bool filter_low_hanging_obstacles) {
			ptr.godot_icall(bindings::id_NavigationMesh_set_filter_low_hanging_obstacles, filter_low_hanging_obstacles);
		}
		
		bool get_filter_low_hanging_obstacles() const {
			return ptr.godot_icall(bindings::id_NavigationMesh_get_filter_low_hanging_obstacles);
		}
		
		void set_filter_ledge_spans(bool filter_ledge_spans) {
			ptr.godot_icall(bindings::id_NavigationMesh_set_filter_ledge_spans, filter_ledge_spans);
		}
		
		bool get_filter_ledge_spans() const {
			return ptr.godot_icall(bindings::id_NavigationMesh_get_filter_ledge_spans);
		}
		
		void set_filter_walkable_low_height_spans(bool filter_walkable_low_height_spans) {
			ptr.godot_icall(bindings::id_NavigationMesh_set_filter_walkable_low_height_spans, filter_walkable_low_height_spans);
		}
		
		bool get_filter_walkable_low_height_spans() const {
			return ptr.godot_icall(bindings::id_NavigationMesh_get_filter_walkable_low_height_spans);
		}
		
		void set_vertices(const PoolVector3Array &in vertices) {
			ptr.godot_icall(bindings::id_NavigationMesh_set_vertices, vertices);
		}
		
		PoolVector3Array get_vertices() const {
			return ptr.godot_icall(bindings::id_NavigationMesh_get_vertices);
		}
		
		void add_polygon(const PoolIntArray &in polygon) {
			ptr.godot_icall(bindings::id_NavigationMesh_add_polygon, polygon);
		}
		
		int get_polygon_count() const {
			return ptr.godot_icall(bindings::id_NavigationMesh_get_polygon_count);
		}
		
		PoolIntArray get_polygon(int idx) {
			return ptr.godot_icall(bindings::id_NavigationMesh_get_polygon, idx);
		}
		
		void clear_polygons() {
			ptr.godot_icall(bindings::id_NavigationMesh_clear_polygons);
		}
		
		void create_from_mesh(Mesh@ mesh) {
			ptr.godot_icall(bindings::id_NavigationMesh_create_from_mesh, mesh);
		}
		
		protected void _set_polygons(const Array &in polygons) {
			ptr.godot_icall(bindings::id_NavigationMesh__set_polygons, polygons);
		}
		
		protected Array _get_polygons() const {
			return ptr.godot_icall(bindings::id_NavigationMesh__get_polygons);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_NavigationMesh)).ptr();
		}
		
	}
	
	class RigidBody : PhysicsBody {
		
		
		protected void _integrate_forces(PhysicsDirectBodyState@ state) {
			
		}
		
		void set_mode(int mode) {
			ptr.godot_icall(bindings::id_RigidBody_set_mode, mode);
		}
		
		int get_mode() const {
			return ptr.godot_icall(bindings::id_RigidBody_get_mode);
		}
		
		void set_mass(float mass) {
			ptr.godot_icall(bindings::id_RigidBody_set_mass, mass);
		}
		
		float get_mass() const {
			return ptr.godot_icall(bindings::id_RigidBody_get_mass);
		}
		
		void set_weight(float weight) {
			ptr.godot_icall(bindings::id_RigidBody_set_weight, weight);
		}
		
		float get_weight() const {
			return ptr.godot_icall(bindings::id_RigidBody_get_weight);
		}
		
		void set_friction(float friction) {
			ptr.godot_icall(bindings::id_RigidBody_set_friction, friction);
		}
		
		float get_friction() const {
			return ptr.godot_icall(bindings::id_RigidBody_get_friction);
		}
		
		void set_bounce(float bounce) {
			ptr.godot_icall(bindings::id_RigidBody_set_bounce, bounce);
		}
		
		float get_bounce() const {
			return ptr.godot_icall(bindings::id_RigidBody_get_bounce);
		}
		
		void set_linear_velocity(const Vector3 &in linear_velocity) {
			ptr.godot_icall(bindings::id_RigidBody_set_linear_velocity, linear_velocity);
		}
		
		Vector3 get_linear_velocity() const {
			return ptr.godot_icall(bindings::id_RigidBody_get_linear_velocity);
		}
		
		void set_angular_velocity(const Vector3 &in angular_velocity) {
			ptr.godot_icall(bindings::id_RigidBody_set_angular_velocity, angular_velocity);
		}
		
		Vector3 get_angular_velocity() const {
			return ptr.godot_icall(bindings::id_RigidBody_get_angular_velocity);
		}
		
		void set_gravity_scale(float gravity_scale) {
			ptr.godot_icall(bindings::id_RigidBody_set_gravity_scale, gravity_scale);
		}
		
		float get_gravity_scale() const {
			return ptr.godot_icall(bindings::id_RigidBody_get_gravity_scale);
		}
		
		void set_linear_damp(float linear_damp) {
			ptr.godot_icall(bindings::id_RigidBody_set_linear_damp, linear_damp);
		}
		
		float get_linear_damp() const {
			return ptr.godot_icall(bindings::id_RigidBody_get_linear_damp);
		}
		
		void set_angular_damp(float angular_damp) {
			ptr.godot_icall(bindings::id_RigidBody_set_angular_damp, angular_damp);
		}
		
		float get_angular_damp() const {
			return ptr.godot_icall(bindings::id_RigidBody_get_angular_damp);
		}
		
		void set_max_contacts_reported(int amount) {
			ptr.godot_icall(bindings::id_RigidBody_set_max_contacts_reported, amount);
		}
		
		int get_max_contacts_reported() const {
			return ptr.godot_icall(bindings::id_RigidBody_get_max_contacts_reported);
		}
		
		void set_use_custom_integrator(bool enable) {
			ptr.godot_icall(bindings::id_RigidBody_set_use_custom_integrator, enable);
		}
		
		bool is_using_custom_integrator() {
			return ptr.godot_icall(bindings::id_RigidBody_is_using_custom_integrator);
		}
		
		void set_contact_monitor(bool enabled) {
			ptr.godot_icall(bindings::id_RigidBody_set_contact_monitor, enabled);
		}
		
		bool is_contact_monitor_enabled() const {
			return ptr.godot_icall(bindings::id_RigidBody_is_contact_monitor_enabled);
		}
		
		void set_use_continuous_collision_detection(bool enable) {
			ptr.godot_icall(bindings::id_RigidBody_set_use_continuous_collision_detection, enable);
		}
		
		bool is_using_continuous_collision_detection() const {
			return ptr.godot_icall(bindings::id_RigidBody_is_using_continuous_collision_detection);
		}
		
		void set_axis_velocity(const Vector3 &in axis_velocity) {
			ptr.godot_icall(bindings::id_RigidBody_set_axis_velocity, axis_velocity);
		}
		
		void apply_impulse(const Vector3 &in position, const Vector3 &in impulse) {
			ptr.godot_icall(bindings::id_RigidBody_apply_impulse, position, impulse);
		}
		
		void set_sleeping(bool sleeping) {
			ptr.godot_icall(bindings::id_RigidBody_set_sleeping, sleeping);
		}
		
		bool is_sleeping() const {
			return ptr.godot_icall(bindings::id_RigidBody_is_sleeping);
		}
		
		void set_can_sleep(bool able_to_sleep) {
			ptr.godot_icall(bindings::id_RigidBody_set_can_sleep, able_to_sleep);
		}
		
		bool is_able_to_sleep() const {
			return ptr.godot_icall(bindings::id_RigidBody_is_able_to_sleep);
		}
		
		protected void _direct_state_changed(Object@ arg0) {
			ptr.godot_icall(bindings::id_RigidBody__direct_state_changed, arg0);
		}
		
		protected void _body_enter_tree(int arg0) {
			ptr.godot_icall(bindings::id_RigidBody__body_enter_tree, arg0);
		}
		
		protected void _body_exit_tree(int arg0) {
			ptr.godot_icall(bindings::id_RigidBody__body_exit_tree, arg0);
		}
		
		void set_axis_lock(int axis, bool lock) {
			ptr.godot_icall(bindings::id_RigidBody_set_axis_lock, axis, lock);
		}
		
		bool get_axis_lock(int axis) const {
			return ptr.godot_icall(bindings::id_RigidBody_get_axis_lock, axis);
		}
		
		Array get_colliding_bodies() const {
			return ptr.godot_icall(bindings::id_RigidBody_get_colliding_bodies);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_RigidBody);
		}
		
	}
	
	class WorldEnvironment : Node {
		
		
		void set_environment(Environment@ env) {
			ptr.godot_icall(bindings::id_WorldEnvironment_set_environment, env);
		}
		
		Environment@ get_environment() const {
			Environment ret = ptr.godot_icall(bindings::id_WorldEnvironment_get_environment);
			return  ret;
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_WorldEnvironment);
		}
		
	}
	
	class Particles2D : Node2D {
		
		
		void set_emitting(bool emitting) {
			ptr.godot_icall(bindings::id_Particles2D_set_emitting, emitting);
		}
		
		void set_amount(int amount) {
			ptr.godot_icall(bindings::id_Particles2D_set_amount, amount);
		}
		
		void set_lifetime(float secs) {
			ptr.godot_icall(bindings::id_Particles2D_set_lifetime, secs);
		}
		
		void set_one_shot(bool secs) {
			ptr.godot_icall(bindings::id_Particles2D_set_one_shot, secs);
		}
		
		void set_pre_process_time(float secs) {
			ptr.godot_icall(bindings::id_Particles2D_set_pre_process_time, secs);
		}
		
		void set_explosiveness_ratio(float ratio) {
			ptr.godot_icall(bindings::id_Particles2D_set_explosiveness_ratio, ratio);
		}
		
		void set_randomness_ratio(float ratio) {
			ptr.godot_icall(bindings::id_Particles2D_set_randomness_ratio, ratio);
		}
		
		void set_visibility_rect(const Rect2 &in aabb) {
			ptr.godot_icall(bindings::id_Particles2D_set_visibility_rect, aabb);
		}
		
		void set_use_local_coordinates(bool enable) {
			ptr.godot_icall(bindings::id_Particles2D_set_use_local_coordinates, enable);
		}
		
		void set_fixed_fps(int fps) {
			ptr.godot_icall(bindings::id_Particles2D_set_fixed_fps, fps);
		}
		
		void set_fractional_delta(bool enable) {
			ptr.godot_icall(bindings::id_Particles2D_set_fractional_delta, enable);
		}
		
		void set_process_material(Material@ material) {
			ptr.godot_icall(bindings::id_Particles2D_set_process_material, material);
		}
		
		void set_speed_scale(float scale) {
			ptr.godot_icall(bindings::id_Particles2D_set_speed_scale, scale);
		}
		
		bool is_emitting() const {
			return ptr.godot_icall(bindings::id_Particles2D_is_emitting);
		}
		
		int get_amount() const {
			return ptr.godot_icall(bindings::id_Particles2D_get_amount);
		}
		
		float get_lifetime() const {
			return ptr.godot_icall(bindings::id_Particles2D_get_lifetime);
		}
		
		bool get_one_shot() const {
			return ptr.godot_icall(bindings::id_Particles2D_get_one_shot);
		}
		
		float get_pre_process_time() const {
			return ptr.godot_icall(bindings::id_Particles2D_get_pre_process_time);
		}
		
		float get_explosiveness_ratio() const {
			return ptr.godot_icall(bindings::id_Particles2D_get_explosiveness_ratio);
		}
		
		float get_randomness_ratio() const {
			return ptr.godot_icall(bindings::id_Particles2D_get_randomness_ratio);
		}
		
		Rect2 get_visibility_rect() const {
			return ptr.godot_icall(bindings::id_Particles2D_get_visibility_rect);
		}
		
		bool get_use_local_coordinates() const {
			return ptr.godot_icall(bindings::id_Particles2D_get_use_local_coordinates);
		}
		
		int get_fixed_fps() const {
			return ptr.godot_icall(bindings::id_Particles2D_get_fixed_fps);
		}
		
		bool get_fractional_delta() const {
			return ptr.godot_icall(bindings::id_Particles2D_get_fractional_delta);
		}
		
		Material@ get_process_material() const {
			Material ret = ptr.godot_icall(bindings::id_Particles2D_get_process_material);
			return  ret;
		}
		
		float get_speed_scale() const {
			return ptr.godot_icall(bindings::id_Particles2D_get_speed_scale);
		}
		
		void set_draw_order(int order) {
			ptr.godot_icall(bindings::id_Particles2D_set_draw_order, order);
		}
		
		int get_draw_order() const {
			return ptr.godot_icall(bindings::id_Particles2D_get_draw_order);
		}
		
		void set_texture(Texture@ texture) {
			ptr.godot_icall(bindings::id_Particles2D_set_texture, texture);
		}
		
		Texture@ get_texture() const {
			Texture ret = ptr.godot_icall(bindings::id_Particles2D_get_texture);
			return  ret;
		}
		
		void set_normal_map(Texture@ texture) {
			ptr.godot_icall(bindings::id_Particles2D_set_normal_map, texture);
		}
		
		Texture@ get_normal_map() const {
			Texture ret = ptr.godot_icall(bindings::id_Particles2D_get_normal_map);
			return  ret;
		}
		
		Rect2 capture_rect() const {
			return ptr.godot_icall(bindings::id_Particles2D_capture_rect);
		}
		
		void set_v_frames(int frames) {
			ptr.godot_icall(bindings::id_Particles2D_set_v_frames, frames);
		}
		
		int get_v_frames() const {
			return ptr.godot_icall(bindings::id_Particles2D_get_v_frames);
		}
		
		void set_h_frames(int frames) {
			ptr.godot_icall(bindings::id_Particles2D_set_h_frames, frames);
		}
		
		int get_h_frames() const {
			return ptr.godot_icall(bindings::id_Particles2D_get_h_frames);
		}
		
		void restart() {
			ptr.godot_icall(bindings::id_Particles2D_restart);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Particles2D);
		}
		
	}
	
	class VisualScriptYieldSignal : VisualScriptNode {
		
		
		void set_base_type(const String &in base_type) {
			ptr.godot_icall(bindings::id_VisualScriptYieldSignal_set_base_type, base_type);
		}
		
		String get_base_type() const {
			return ptr.godot_icall(bindings::id_VisualScriptYieldSignal_get_base_type);
		}
		
		void set_signal(const String &in signal) {
			ptr.godot_icall(bindings::id_VisualScriptYieldSignal_set_signal, signal);
		}
		
		String get_signal() const {
			return ptr.godot_icall(bindings::id_VisualScriptYieldSignal_get_signal);
		}
		
		void set_call_mode(int mode) {
			ptr.godot_icall(bindings::id_VisualScriptYieldSignal_set_call_mode, mode);
		}
		
		int get_call_mode() const {
			return ptr.godot_icall(bindings::id_VisualScriptYieldSignal_get_call_mode);
		}
		
		void set_base_path(const NodePath &in base_path) {
			ptr.godot_icall(bindings::id_VisualScriptYieldSignal_set_base_path, base_path);
		}
		
		NodePath get_base_path() const {
			return ptr.godot_icall(bindings::id_VisualScriptYieldSignal_get_base_path);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptYieldSignal)).ptr();
		}
		
	}
	
	class SceneTree : MainLoop {
		
		
		Viewport@ get_root() const {
			Viewport ret = ptr.godot_icall(bindings::id_SceneTree_get_root);
			return  ret;
		}
		
		bool has_group(const String &in name) const {
			return ptr.godot_icall(bindings::id_SceneTree_has_group, name);
		}
		
		void set_auto_accept_quit(bool enabled) {
			ptr.godot_icall(bindings::id_SceneTree_set_auto_accept_quit, enabled);
		}
		
		void set_quit_on_go_back(bool enabled) {
			ptr.godot_icall(bindings::id_SceneTree_set_quit_on_go_back, enabled);
		}
		
		void set_debug_collisions_hint(bool enable) {
			ptr.godot_icall(bindings::id_SceneTree_set_debug_collisions_hint, enable);
		}
		
		bool is_debugging_collisions_hint() const {
			return ptr.godot_icall(bindings::id_SceneTree_is_debugging_collisions_hint);
		}
		
		void set_debug_navigation_hint(bool enable) {
			ptr.godot_icall(bindings::id_SceneTree_set_debug_navigation_hint, enable);
		}
		
		bool is_debugging_navigation_hint() const {
			return ptr.godot_icall(bindings::id_SceneTree_is_debugging_navigation_hint);
		}
		
		void set_edited_scene_root(Node@ scene) {
			ptr.godot_icall(bindings::id_SceneTree_set_edited_scene_root, scene);
		}
		
		Node@ get_edited_scene_root() const {
			Node ret = ptr.godot_icall(bindings::id_SceneTree_get_edited_scene_root);
			return  ret;
		}
		
		void set_pause(bool enable) {
			ptr.godot_icall(bindings::id_SceneTree_set_pause, enable);
		}
		
		bool is_paused() const {
			return ptr.godot_icall(bindings::id_SceneTree_is_paused);
		}
		
		void set_input_as_handled() {
			ptr.godot_icall(bindings::id_SceneTree_set_input_as_handled);
		}
		
		bool is_input_handled() {
			return ptr.godot_icall(bindings::id_SceneTree_is_input_handled);
		}
		
		SceneTreeTimer@ create_timer(float time_sec, bool pause_mode_process) {
			SceneTreeTimer ret = ptr.godot_icall(bindings::id_SceneTree_create_timer, time_sec, pause_mode_process);
			return  ret;
		}
		
		int get_node_count() const {
			return ptr.godot_icall(bindings::id_SceneTree_get_node_count);
		}
		
		int get_frame() const {
			return ptr.godot_icall(bindings::id_SceneTree_get_frame);
		}
		
		void quit() {
			ptr.godot_icall(bindings::id_SceneTree_quit);
		}
		
		void set_screen_stretch(int mode, int aspect, const Vector2 &in minsize, float shrink) {
			ptr.godot_icall(bindings::id_SceneTree_set_screen_stretch, mode, aspect, minsize, shrink);
		}
		
		void queue_delete(Object@ obj) {
			ptr.godot_icall(bindings::id_SceneTree_queue_delete, obj);
		}
		
		Variant call_group_flags(int flags, const String &in group, const String &in method) {
			return ptr.godot_icall(bindings::id_SceneTree_call_group_flags, flags, group, method);
		}
		
		void notify_group_flags(int call_flags, const String &in group, int notification) {
			ptr.godot_icall(bindings::id_SceneTree_notify_group_flags, call_flags, group, notification);
		}
		
		void set_group_flags(int call_flags, const String &in group, const String &in property, const Variant &in value) {
			ptr.godot_icall(bindings::id_SceneTree_set_group_flags, call_flags, group, property, value);
		}
		
		Variant call_group(const String &in group, const String &in method) {
			return ptr.godot_icall(bindings::id_SceneTree_call_group, group, method);
		}
		
		void notify_group(const String &in group, int notification) {
			ptr.godot_icall(bindings::id_SceneTree_notify_group, group, notification);
		}
		
		void set_group(const String &in group, const String &in property, const Variant &in value) {
			ptr.godot_icall(bindings::id_SceneTree_set_group, group, property, value);
		}
		
		Array get_nodes_in_group(const String &in group) {
			return ptr.godot_icall(bindings::id_SceneTree_get_nodes_in_group, group);
		}
		
		void set_current_scene(Node@ child_node) {
			ptr.godot_icall(bindings::id_SceneTree_set_current_scene, child_node);
		}
		
		Node@ get_current_scene() const {
			Node ret = ptr.godot_icall(bindings::id_SceneTree_get_current_scene);
			return  ret;
		}
		
		int change_scene(const String &in path) {
			return ptr.godot_icall(bindings::id_SceneTree_change_scene, path);
		}
		
		int change_scene_to(PackedScene@ packed_scene) {
			return ptr.godot_icall(bindings::id_SceneTree_change_scene_to, packed_scene);
		}
		
		int reload_current_scene() {
			return ptr.godot_icall(bindings::id_SceneTree_reload_current_scene);
		}
		
		protected void _change_scene(Node@ arg0) {
			ptr.godot_icall(bindings::id_SceneTree__change_scene, arg0);
		}
		
		void set_network_peer(NetworkedMultiplayerPeer@ peer) {
			ptr.godot_icall(bindings::id_SceneTree_set_network_peer, peer);
		}
		
		NetworkedMultiplayerPeer@ get_network_peer() const {
			NetworkedMultiplayerPeer ret = ptr.godot_icall(bindings::id_SceneTree_get_network_peer);
			return  ret;
		}
		
		bool is_network_server() const {
			return ptr.godot_icall(bindings::id_SceneTree_is_network_server);
		}
		
		bool has_network_peer() const {
			return ptr.godot_icall(bindings::id_SceneTree_has_network_peer);
		}
		
		PoolIntArray get_network_connected_peers() const {
			return ptr.godot_icall(bindings::id_SceneTree_get_network_connected_peers);
		}
		
		int get_network_unique_id() const {
			return ptr.godot_icall(bindings::id_SceneTree_get_network_unique_id);
		}
		
		int get_rpc_sender_id() const {
			return ptr.godot_icall(bindings::id_SceneTree_get_rpc_sender_id);
		}
		
		void set_refuse_new_network_connections(bool refuse) {
			ptr.godot_icall(bindings::id_SceneTree_set_refuse_new_network_connections, refuse);
		}
		
		bool is_refusing_new_network_connections() const {
			return ptr.godot_icall(bindings::id_SceneTree_is_refusing_new_network_connections);
		}
		
		protected void _network_peer_connected(int arg0) {
			ptr.godot_icall(bindings::id_SceneTree__network_peer_connected, arg0);
		}
		
		protected void _network_peer_disconnected(int arg0) {
			ptr.godot_icall(bindings::id_SceneTree__network_peer_disconnected, arg0);
		}
		
		protected void _connected_to_server() {
			ptr.godot_icall(bindings::id_SceneTree__connected_to_server);
		}
		
		protected void _connection_failed() {
			ptr.godot_icall(bindings::id_SceneTree__connection_failed);
		}
		
		protected void _server_disconnected() {
			ptr.godot_icall(bindings::id_SceneTree__server_disconnected);
		}
		
		void set_use_font_oversampling(bool enable) {
			ptr.godot_icall(bindings::id_SceneTree_set_use_font_oversampling, enable);
		}
		
		bool is_using_font_oversampling() const {
			return ptr.godot_icall(bindings::id_SceneTree_is_using_font_oversampling);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_SceneTree);
		}
		
	}
	
	class CapsuleShape : Shape {
		
		
		void set_radius(float radius) {
			ptr.godot_icall(bindings::id_CapsuleShape_set_radius, radius);
		}
		
		float get_radius() const {
			return ptr.godot_icall(bindings::id_CapsuleShape_get_radius);
		}
		
		void set_height(float height) {
			ptr.godot_icall(bindings::id_CapsuleShape_set_height, height);
		}
		
		float get_height() const {
			return ptr.godot_icall(bindings::id_CapsuleShape_get_height);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_CapsuleShape)).ptr();
		}
		
	}
	
	class RemoteTransform2D : Node2D {
		
		
		void set_remote_node(const NodePath &in path) {
			ptr.godot_icall(bindings::id_RemoteTransform2D_set_remote_node, path);
		}
		
		NodePath get_remote_node() const {
			return ptr.godot_icall(bindings::id_RemoteTransform2D_get_remote_node);
		}
		
		void set_use_global_coordinates(bool use_global_coordinates) {
			ptr.godot_icall(bindings::id_RemoteTransform2D_set_use_global_coordinates, use_global_coordinates);
		}
		
		bool get_use_global_coordinates() const {
			return ptr.godot_icall(bindings::id_RemoteTransform2D_get_use_global_coordinates);
		}
		
		void set_update_position(bool update_remote_position) {
			ptr.godot_icall(bindings::id_RemoteTransform2D_set_update_position, update_remote_position);
		}
		
		bool get_update_position() const {
			return ptr.godot_icall(bindings::id_RemoteTransform2D_get_update_position);
		}
		
		void set_update_rotation(bool update_remote_rotation) {
			ptr.godot_icall(bindings::id_RemoteTransform2D_set_update_rotation, update_remote_rotation);
		}
		
		bool get_update_rotation() const {
			return ptr.godot_icall(bindings::id_RemoteTransform2D_get_update_rotation);
		}
		
		void set_update_scale(bool update_remote_scale) {
			ptr.godot_icall(bindings::id_RemoteTransform2D_set_update_scale, update_remote_scale);
		}
		
		bool get_update_scale() const {
			return ptr.godot_icall(bindings::id_RemoteTransform2D_get_update_scale);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_RemoteTransform2D);
		}
		
	}
	
	class Polygon2D : Node2D {
		
		
		void set_polygon(const PoolVector2Array &in polygon) {
			ptr.godot_icall(bindings::id_Polygon2D_set_polygon, polygon);
		}
		
		PoolVector2Array get_polygon() const {
			return ptr.godot_icall(bindings::id_Polygon2D_get_polygon);
		}
		
		void set_uv(const PoolVector2Array &in uv) {
			ptr.godot_icall(bindings::id_Polygon2D_set_uv, uv);
		}
		
		PoolVector2Array get_uv() const {
			return ptr.godot_icall(bindings::id_Polygon2D_get_uv);
		}
		
		void set_color(const Color &in color) {
			ptr.godot_icall(bindings::id_Polygon2D_set_color, color);
		}
		
		Color get_color() const {
			return ptr.godot_icall(bindings::id_Polygon2D_get_color);
		}
		
		void set_vertex_colors(const PoolColorArray &in vertex_colors) {
			ptr.godot_icall(bindings::id_Polygon2D_set_vertex_colors, vertex_colors);
		}
		
		PoolColorArray get_vertex_colors() const {
			return ptr.godot_icall(bindings::id_Polygon2D_get_vertex_colors);
		}
		
		void set_texture(Texture@ texture) {
			ptr.godot_icall(bindings::id_Polygon2D_set_texture, texture);
		}
		
		Texture@ get_texture() const {
			Texture ret = ptr.godot_icall(bindings::id_Polygon2D_get_texture);
			return  ret;
		}
		
		void set_texture_offset(const Vector2 &in texture_offset) {
			ptr.godot_icall(bindings::id_Polygon2D_set_texture_offset, texture_offset);
		}
		
		Vector2 get_texture_offset() const {
			return ptr.godot_icall(bindings::id_Polygon2D_get_texture_offset);
		}
		
		void set_texture_rotation(float texture_rotation) {
			ptr.godot_icall(bindings::id_Polygon2D_set_texture_rotation, texture_rotation);
		}
		
		float get_texture_rotation() const {
			return ptr.godot_icall(bindings::id_Polygon2D_get_texture_rotation);
		}
		
		void set_texture_rotation_degrees(float texture_rotation) {
			ptr.godot_icall(bindings::id_Polygon2D_set_texture_rotation_degrees, texture_rotation);
		}
		
		float get_texture_rotation_degrees() const {
			return ptr.godot_icall(bindings::id_Polygon2D_get_texture_rotation_degrees);
		}
		
		void set_texture_scale(const Vector2 &in texture_scale) {
			ptr.godot_icall(bindings::id_Polygon2D_set_texture_scale, texture_scale);
		}
		
		Vector2 get_texture_scale() const {
			return ptr.godot_icall(bindings::id_Polygon2D_get_texture_scale);
		}
		
		void set_invert(bool invert) {
			ptr.godot_icall(bindings::id_Polygon2D_set_invert, invert);
		}
		
		bool get_invert() const {
			return ptr.godot_icall(bindings::id_Polygon2D_get_invert);
		}
		
		void set_antialiased(bool antialiased) {
			ptr.godot_icall(bindings::id_Polygon2D_set_antialiased, antialiased);
		}
		
		bool get_antialiased() const {
			return ptr.godot_icall(bindings::id_Polygon2D_get_antialiased);
		}
		
		void set_invert_border(float invert_border) {
			ptr.godot_icall(bindings::id_Polygon2D_set_invert_border, invert_border);
		}
		
		float get_invert_border() const {
			return ptr.godot_icall(bindings::id_Polygon2D_get_invert_border);
		}
		
		void set_offset(const Vector2 &in offset) {
			ptr.godot_icall(bindings::id_Polygon2D_set_offset, offset);
		}
		
		Vector2 get_offset() const {
			return ptr.godot_icall(bindings::id_Polygon2D_get_offset);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Polygon2D);
		}
		
	}
	
	class VisibilityNotifier2D : Node2D {
		
		
		void set_rect(const Rect2 &in rect) {
			ptr.godot_icall(bindings::id_VisibilityNotifier2D_set_rect, rect);
		}
		
		Rect2 get_rect() const {
			return ptr.godot_icall(bindings::id_VisibilityNotifier2D_get_rect);
		}
		
		bool is_on_screen() const {
			return ptr.godot_icall(bindings::id_VisibilityNotifier2D_is_on_screen);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_VisibilityNotifier2D);
		}
		
	}
	
	class SpotLight : Light {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_SpotLight);
		}
		
	}
	
	class TouchScreenButton : Node2D {
		
		
		void set_texture(Texture@ texture) {
			ptr.godot_icall(bindings::id_TouchScreenButton_set_texture, texture);
		}
		
		Texture@ get_texture() const {
			Texture ret = ptr.godot_icall(bindings::id_TouchScreenButton_get_texture);
			return  ret;
		}
		
		void set_texture_pressed(Texture@ texture_pressed) {
			ptr.godot_icall(bindings::id_TouchScreenButton_set_texture_pressed, texture_pressed);
		}
		
		Texture@ get_texture_pressed() const {
			Texture ret = ptr.godot_icall(bindings::id_TouchScreenButton_get_texture_pressed);
			return  ret;
		}
		
		void set_bitmask(BitMap@ bitmask) {
			ptr.godot_icall(bindings::id_TouchScreenButton_set_bitmask, bitmask);
		}
		
		BitMap@ get_bitmask() const {
			BitMap ret = ptr.godot_icall(bindings::id_TouchScreenButton_get_bitmask);
			return  ret;
		}
		
		void set_shape(Shape2D@ shape) {
			ptr.godot_icall(bindings::id_TouchScreenButton_set_shape, shape);
		}
		
		Shape2D@ get_shape() const {
			Shape2D ret = ptr.godot_icall(bindings::id_TouchScreenButton_get_shape);
			return  ret;
		}
		
		void set_shape_centered(bool Bool) {
			ptr.godot_icall(bindings::id_TouchScreenButton_set_shape_centered, Bool);
		}
		
		bool is_shape_centered() const {
			return ptr.godot_icall(bindings::id_TouchScreenButton_is_shape_centered);
		}
		
		void set_shape_visible(bool Bool) {
			ptr.godot_icall(bindings::id_TouchScreenButton_set_shape_visible, Bool);
		}
		
		bool is_shape_visible() const {
			return ptr.godot_icall(bindings::id_TouchScreenButton_is_shape_visible);
		}
		
		void set_action(const String &in action) {
			ptr.godot_icall(bindings::id_TouchScreenButton_set_action, action);
		}
		
		String get_action() const {
			return ptr.godot_icall(bindings::id_TouchScreenButton_get_action);
		}
		
		void set_visibility_mode(int mode) {
			ptr.godot_icall(bindings::id_TouchScreenButton_set_visibility_mode, mode);
		}
		
		int get_visibility_mode() const {
			return ptr.godot_icall(bindings::id_TouchScreenButton_get_visibility_mode);
		}
		
		void set_passby_press(bool enabled) {
			ptr.godot_icall(bindings::id_TouchScreenButton_set_passby_press, enabled);
		}
		
		bool is_passby_press_enabled() const {
			return ptr.godot_icall(bindings::id_TouchScreenButton_is_passby_press_enabled);
		}
		
		bool is_pressed() const {
			return ptr.godot_icall(bindings::id_TouchScreenButton_is_pressed);
		}
		
		protected void _input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_TouchScreenButton__input, arg0);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_TouchScreenButton);
		}
		
	}
	
	class LightOccluder2D : Node2D {
		
		
		void set_occluder_polygon(OccluderPolygon2D@ polygon) {
			ptr.godot_icall(bindings::id_LightOccluder2D_set_occluder_polygon, polygon);
		}
		
		OccluderPolygon2D@ get_occluder_polygon() const {
			OccluderPolygon2D ret = ptr.godot_icall(bindings::id_LightOccluder2D_get_occluder_polygon);
			return  ret;
		}
		
		void set_occluder_light_mask(int mask) {
			ptr.godot_icall(bindings::id_LightOccluder2D_set_occluder_light_mask, mask);
		}
		
		int get_occluder_light_mask() const {
			return ptr.godot_icall(bindings::id_LightOccluder2D_get_occluder_light_mask);
		}
		
		protected void _poly_changed() {
			ptr.godot_icall(bindings::id_LightOccluder2D__poly_changed);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_LightOccluder2D);
		}
		
	}
	
	class Physics2DShapeQueryResult : Reference {
		
		
		int get_result_count() const {
			return ptr.godot_icall(bindings::id_Physics2DShapeQueryResult_get_result_count);
		}
		
		RID get_result_rid(int idx) const {
			return ptr.godot_icall(bindings::id_Physics2DShapeQueryResult_get_result_rid, idx);
		}
		
		int get_result_object_id(int idx) const {
			return ptr.godot_icall(bindings::id_Physics2DShapeQueryResult_get_result_object_id, idx);
		}
		
		Object@ get_result_object(int idx) const {
			Object ret = ptr.godot_icall(bindings::id_Physics2DShapeQueryResult_get_result_object, idx);
			return  ret;
		}
		
		int get_result_object_shape(int idx) const {
			return ptr.godot_icall(bindings::id_Physics2DShapeQueryResult_get_result_object_shape, idx);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Physics2DShapeQueryResult)).ptr();
		}
		
	}
	
	class AudioEffect : Resource {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffect)).ptr();
		}
		
	}
	
	class HTTPClient : Reference {
		
		
		int connect_to_host(const String &in host, int port, bool use_ssl, bool verify_host) {
			return ptr.godot_icall(bindings::id_HTTPClient_connect_to_host, host, port, use_ssl, verify_host);
		}
		
		void set_connection(StreamPeer@ connection) {
			ptr.godot_icall(bindings::id_HTTPClient_set_connection, connection);
		}
		
		StreamPeer@ get_connection() const {
			StreamPeer ret = ptr.godot_icall(bindings::id_HTTPClient_get_connection);
			return  ret;
		}
		
		int request_raw(int method, const String &in url, const PoolStringArray &in headers, const PoolByteArray &in body) {
			return ptr.godot_icall(bindings::id_HTTPClient_request_raw, method, url, headers, body);
		}
		
		int request(int method, const String &in url, const PoolStringArray &in headers, const String &in body) {
			return ptr.godot_icall(bindings::id_HTTPClient_request, method, url, headers, body);
		}
		
		void close() {
			ptr.godot_icall(bindings::id_HTTPClient_close);
		}
		
		bool has_response() const {
			return ptr.godot_icall(bindings::id_HTTPClient_has_response);
		}
		
		bool is_response_chunked() const {
			return ptr.godot_icall(bindings::id_HTTPClient_is_response_chunked);
		}
		
		int get_response_code() const {
			return ptr.godot_icall(bindings::id_HTTPClient_get_response_code);
		}
		
		PoolStringArray get_response_headers() {
			return ptr.godot_icall(bindings::id_HTTPClient_get_response_headers);
		}
		
		Dictionary get_response_headers_as_dictionary() {
			return ptr.godot_icall(bindings::id_HTTPClient_get_response_headers_as_dictionary);
		}
		
		int get_response_body_length() const {
			return ptr.godot_icall(bindings::id_HTTPClient_get_response_body_length);
		}
		
		PoolByteArray read_response_body_chunk() {
			return ptr.godot_icall(bindings::id_HTTPClient_read_response_body_chunk);
		}
		
		void set_read_chunk_size(int bytes) {
			ptr.godot_icall(bindings::id_HTTPClient_set_read_chunk_size, bytes);
		}
		
		void set_blocking_mode(bool enabled) {
			ptr.godot_icall(bindings::id_HTTPClient_set_blocking_mode, enabled);
		}
		
		bool is_blocking_mode_enabled() const {
			return ptr.godot_icall(bindings::id_HTTPClient_is_blocking_mode_enabled);
		}
		
		int get_status() const {
			return ptr.godot_icall(bindings::id_HTTPClient_get_status);
		}
		
		int poll() {
			return ptr.godot_icall(bindings::id_HTTPClient_poll);
		}
		
		String query_string_from_dict(const Dictionary &in fields) {
			return ptr.godot_icall(bindings::id_HTTPClient_query_string_from_dict, fields);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_HTTPClient)).ptr();
		}
		
	}
	
	class TextureRect : Control {
		
		
		void set_texture(Texture@ texture) {
			ptr.godot_icall(bindings::id_TextureRect_set_texture, texture);
		}
		
		Texture@ get_texture() const {
			Texture ret = ptr.godot_icall(bindings::id_TextureRect_get_texture);
			return  ret;
		}
		
		void set_expand(bool enable) {
			ptr.godot_icall(bindings::id_TextureRect_set_expand, enable);
		}
		
		bool has_expand() const {
			return ptr.godot_icall(bindings::id_TextureRect_has_expand);
		}
		
		void set_stretch_mode(int stretch_mode) {
			ptr.godot_icall(bindings::id_TextureRect_set_stretch_mode, stretch_mode);
		}
		
		int get_stretch_mode() const {
			return ptr.godot_icall(bindings::id_TextureRect_get_stretch_mode);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_TextureRect);
		}
		
	}
	
	class VisualScriptYield : VisualScriptNode {
		
		
		void set_yield_mode(int mode) {
			ptr.godot_icall(bindings::id_VisualScriptYield_set_yield_mode, mode);
		}
		
		int get_yield_mode() {
			return ptr.godot_icall(bindings::id_VisualScriptYield_get_yield_mode);
		}
		
		void set_wait_time(float sec) {
			ptr.godot_icall(bindings::id_VisualScriptYield_set_wait_time, sec);
		}
		
		float get_wait_time() {
			return ptr.godot_icall(bindings::id_VisualScriptYield_get_wait_time);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptYield)).ptr();
		}
		
	}
	
	class AudioStreamSample : AudioStream {
		
		
		void set_format(int format) {
			ptr.godot_icall(bindings::id_AudioStreamSample_set_format, format);
		}
		
		int get_format() const {
			return ptr.godot_icall(bindings::id_AudioStreamSample_get_format);
		}
		
		void set_loop_mode(int loop_mode) {
			ptr.godot_icall(bindings::id_AudioStreamSample_set_loop_mode, loop_mode);
		}
		
		int get_loop_mode() const {
			return ptr.godot_icall(bindings::id_AudioStreamSample_get_loop_mode);
		}
		
		void set_loop_begin(int loop_begin) {
			ptr.godot_icall(bindings::id_AudioStreamSample_set_loop_begin, loop_begin);
		}
		
		int get_loop_begin() const {
			return ptr.godot_icall(bindings::id_AudioStreamSample_get_loop_begin);
		}
		
		void set_loop_end(int loop_end) {
			ptr.godot_icall(bindings::id_AudioStreamSample_set_loop_end, loop_end);
		}
		
		int get_loop_end() const {
			return ptr.godot_icall(bindings::id_AudioStreamSample_get_loop_end);
		}
		
		void set_mix_rate(int mix_rate) {
			ptr.godot_icall(bindings::id_AudioStreamSample_set_mix_rate, mix_rate);
		}
		
		int get_mix_rate() const {
			return ptr.godot_icall(bindings::id_AudioStreamSample_get_mix_rate);
		}
		
		void set_stereo(bool stereo) {
			ptr.godot_icall(bindings::id_AudioStreamSample_set_stereo, stereo);
		}
		
		bool is_stereo() const {
			return ptr.godot_icall(bindings::id_AudioStreamSample_is_stereo);
		}
		
		protected void _set_data(const PoolByteArray &in data) {
			ptr.godot_icall(bindings::id_AudioStreamSample__set_data, data);
		}
		
		protected PoolByteArray _get_data() const {
			return ptr.godot_icall(bindings::id_AudioStreamSample__get_data);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioStreamSample)).ptr();
		}
		
	}
	
	class AcceptDialog : WindowDialog {
		
		
		protected void _ok() {
			ptr.godot_icall(bindings::id_AcceptDialog__ok);
		}
		
		Button@ get_ok() {
			Button ret = ptr.godot_icall(bindings::id_AcceptDialog_get_ok);
			return  ret;
		}
		
		Label@ get_label() {
			Label ret = ptr.godot_icall(bindings::id_AcceptDialog_get_label);
			return  ret;
		}
		
		void set_hide_on_ok(bool enabled) {
			ptr.godot_icall(bindings::id_AcceptDialog_set_hide_on_ok, enabled);
		}
		
		bool get_hide_on_ok() const {
			return ptr.godot_icall(bindings::id_AcceptDialog_get_hide_on_ok);
		}
		
		Button@ add_button(const String &in text, bool right, const String &in action) {
			Button ret = ptr.godot_icall(bindings::id_AcceptDialog_add_button, text, right, action);
			return  ret;
		}
		
		Button@ add_cancel(const String &in name) {
			Button ret = ptr.godot_icall(bindings::id_AcceptDialog_add_cancel, name);
			return  ret;
		}
		
		protected void _builtin_text_entered(const String &in arg0) {
			ptr.godot_icall(bindings::id_AcceptDialog__builtin_text_entered, arg0);
		}
		
		void register_text_enter(Node@ line_edit) {
			ptr.godot_icall(bindings::id_AcceptDialog_register_text_enter, line_edit);
		}
		
		protected void _custom_action(const String &in arg0) {
			ptr.godot_icall(bindings::id_AcceptDialog__custom_action, arg0);
		}
		
		void set_text(const String &in text) {
			ptr.godot_icall(bindings::id_AcceptDialog_set_text, text);
		}
		
		String get_text() const {
			return ptr.godot_icall(bindings::id_AcceptDialog_get_text);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_AcceptDialog);
		}
		
	}
	
	class PathFollow : Spatial {
		
		
		void set_offset(float offset) {
			ptr.godot_icall(bindings::id_PathFollow_set_offset, offset);
		}
		
		float get_offset() const {
			return ptr.godot_icall(bindings::id_PathFollow_get_offset);
		}
		
		void set_h_offset(float h_offset) {
			ptr.godot_icall(bindings::id_PathFollow_set_h_offset, h_offset);
		}
		
		float get_h_offset() const {
			return ptr.godot_icall(bindings::id_PathFollow_get_h_offset);
		}
		
		void set_v_offset(float v_offset) {
			ptr.godot_icall(bindings::id_PathFollow_set_v_offset, v_offset);
		}
		
		float get_v_offset() const {
			return ptr.godot_icall(bindings::id_PathFollow_get_v_offset);
		}
		
		void set_unit_offset(float unit_offset) {
			ptr.godot_icall(bindings::id_PathFollow_set_unit_offset, unit_offset);
		}
		
		float get_unit_offset() const {
			return ptr.godot_icall(bindings::id_PathFollow_get_unit_offset);
		}
		
		void set_rotation_mode(int rotation_mode) {
			ptr.godot_icall(bindings::id_PathFollow_set_rotation_mode, rotation_mode);
		}
		
		int get_rotation_mode() const {
			return ptr.godot_icall(bindings::id_PathFollow_get_rotation_mode);
		}
		
		void set_cubic_interpolation(bool enable) {
			ptr.godot_icall(bindings::id_PathFollow_set_cubic_interpolation, enable);
		}
		
		bool get_cubic_interpolation() const {
			return ptr.godot_icall(bindings::id_PathFollow_get_cubic_interpolation);
		}
		
		void set_loop(bool loop) {
			ptr.godot_icall(bindings::id_PathFollow_set_loop, loop);
		}
		
		bool has_loop() const {
			return ptr.godot_icall(bindings::id_PathFollow_has_loop);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_PathFollow);
		}
		
	}
	
	class VisualScriptIndexGet : VisualScriptNode {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptIndexGet)).ptr();
		}
		
	}
	
	class AudioStreamPlayer2D : Node2D {
		
		
		void set_stream(AudioStream@ stream) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer2D_set_stream, stream);
		}
		
		AudioStream@ get_stream() const {
			AudioStream ret = ptr.godot_icall(bindings::id_AudioStreamPlayer2D_get_stream);
			return  ret;
		}
		
		void set_volume_db(float volume_db) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer2D_set_volume_db, volume_db);
		}
		
		float get_volume_db() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer2D_get_volume_db);
		}
		
		void play(float from_position) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer2D_play, from_position);
		}
		
		void seek(float to_position) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer2D_seek, to_position);
		}
		
		void stop() {
			ptr.godot_icall(bindings::id_AudioStreamPlayer2D_stop);
		}
		
		bool is_playing() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer2D_is_playing);
		}
		
		float get_playback_position() {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer2D_get_playback_position);
		}
		
		void set_bus(const String &in bus) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer2D_set_bus, bus);
		}
		
		String get_bus() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer2D_get_bus);
		}
		
		void set_autoplay(bool enable) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer2D_set_autoplay, enable);
		}
		
		bool is_autoplay_enabled() {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer2D_is_autoplay_enabled);
		}
		
		protected void _set_playing(bool enable) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer2D__set_playing, enable);
		}
		
		protected bool _is_active() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer2D__is_active);
		}
		
		void set_max_distance(float pixels) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer2D_set_max_distance, pixels);
		}
		
		float get_max_distance() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer2D_get_max_distance);
		}
		
		void set_attenuation(float curve) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer2D_set_attenuation, curve);
		}
		
		float get_attenuation() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer2D_get_attenuation);
		}
		
		void set_area_mask(int mask) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer2D_set_area_mask, mask);
		}
		
		int get_area_mask() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer2D_get_area_mask);
		}
		
		protected void _bus_layout_changed() {
			ptr.godot_icall(bindings::id_AudioStreamPlayer2D__bus_layout_changed);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_AudioStreamPlayer2D);
		}
		
	}
	
	class StyleBoxFlat : StyleBox {
		
		
		void set_bg_color(const Color &in color) {
			ptr.godot_icall(bindings::id_StyleBoxFlat_set_bg_color, color);
		}
		
		Color get_bg_color() const {
			return ptr.godot_icall(bindings::id_StyleBoxFlat_get_bg_color);
		}
		
		void set_border_color(const Color &in color) {
			ptr.godot_icall(bindings::id_StyleBoxFlat_set_border_color, color);
		}
		
		Color get_border_color() const {
			return ptr.godot_icall(bindings::id_StyleBoxFlat_get_border_color);
		}
		
		void set_border_width_all(int width) {
			ptr.godot_icall(bindings::id_StyleBoxFlat_set_border_width_all, width);
		}
		
		int get_border_width_min() const {
			return ptr.godot_icall(bindings::id_StyleBoxFlat_get_border_width_min);
		}
		
		void set_border_width(int margin, int width) {
			ptr.godot_icall(bindings::id_StyleBoxFlat_set_border_width, margin, width);
		}
		
		int get_border_width(int margin) const {
			return ptr.godot_icall(bindings::id_StyleBoxFlat_get_border_width, margin);
		}
		
		void set_border_blend(bool blend) {
			ptr.godot_icall(bindings::id_StyleBoxFlat_set_border_blend, blend);
		}
		
		bool get_border_blend() const {
			return ptr.godot_icall(bindings::id_StyleBoxFlat_get_border_blend);
		}
		
		void set_corner_radius_individual(int radius_top_left, int radius_top_right, int radius_bottom_right, int radius_bottom_left) {
			ptr.godot_icall(bindings::id_StyleBoxFlat_set_corner_radius_individual, radius_top_left, radius_top_right, radius_bottom_right, radius_bottom_left);
		}
		
		void set_corner_radius_all(int radius) {
			ptr.godot_icall(bindings::id_StyleBoxFlat_set_corner_radius_all, radius);
		}
		
		void set_corner_radius(int corner, int radius) {
			ptr.godot_icall(bindings::id_StyleBoxFlat_set_corner_radius, corner, radius);
		}
		
		int get_corner_radius(int corner) const {
			return ptr.godot_icall(bindings::id_StyleBoxFlat_get_corner_radius, corner);
		}
		
		void set_expand_margin(int margin, float size) {
			ptr.godot_icall(bindings::id_StyleBoxFlat_set_expand_margin, margin, size);
		}
		
		void set_expand_margin_all(float size) {
			ptr.godot_icall(bindings::id_StyleBoxFlat_set_expand_margin_all, size);
		}
		
		void set_expand_margin_individual(float size_left, float size_top, float size_right, float size_bottom) {
			ptr.godot_icall(bindings::id_StyleBoxFlat_set_expand_margin_individual, size_left, size_top, size_right, size_bottom);
		}
		
		float get_expand_margin(int margin) const {
			return ptr.godot_icall(bindings::id_StyleBoxFlat_get_expand_margin, margin);
		}
		
		void set_draw_center(bool draw_center) {
			ptr.godot_icall(bindings::id_StyleBoxFlat_set_draw_center, draw_center);
		}
		
		bool is_draw_center_enabled() const {
			return ptr.godot_icall(bindings::id_StyleBoxFlat_is_draw_center_enabled);
		}
		
		void set_shadow_color(const Color &in color) {
			ptr.godot_icall(bindings::id_StyleBoxFlat_set_shadow_color, color);
		}
		
		Color get_shadow_color() const {
			return ptr.godot_icall(bindings::id_StyleBoxFlat_get_shadow_color);
		}
		
		void set_shadow_size(int size) {
			ptr.godot_icall(bindings::id_StyleBoxFlat_set_shadow_size, size);
		}
		
		int get_shadow_size() const {
			return ptr.godot_icall(bindings::id_StyleBoxFlat_get_shadow_size);
		}
		
		void set_anti_aliased(bool anti_aliased) {
			ptr.godot_icall(bindings::id_StyleBoxFlat_set_anti_aliased, anti_aliased);
		}
		
		bool is_anti_aliased() const {
			return ptr.godot_icall(bindings::id_StyleBoxFlat_is_anti_aliased);
		}
		
		void set_aa_size(int size) {
			ptr.godot_icall(bindings::id_StyleBoxFlat_set_aa_size, size);
		}
		
		int get_aa_size() const {
			return ptr.godot_icall(bindings::id_StyleBoxFlat_get_aa_size);
		}
		
		void set_corner_detail(int detail) {
			ptr.godot_icall(bindings::id_StyleBoxFlat_set_corner_detail, detail);
		}
		
		int get_corner_detail() const {
			return ptr.godot_icall(bindings::id_StyleBoxFlat_get_corner_detail);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_StyleBoxFlat)).ptr();
		}
		
	}
	
	class PlaneShape : Shape {
		
		
		void set_plane(const Plane &in plane) {
			ptr.godot_icall(bindings::id_PlaneShape_set_plane, plane);
		}
		
		Plane get_plane() const {
			return ptr.godot_icall(bindings::id_PlaneShape_get_plane);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_PlaneShape)).ptr();
		}
		
	}
	
	class Timer : Node {
		
		
		void set_wait_time(float time_sec) {
			ptr.godot_icall(bindings::id_Timer_set_wait_time, time_sec);
		}
		
		float get_wait_time() const {
			return ptr.godot_icall(bindings::id_Timer_get_wait_time);
		}
		
		void set_one_shot(bool enable) {
			ptr.godot_icall(bindings::id_Timer_set_one_shot, enable);
		}
		
		bool is_one_shot() const {
			return ptr.godot_icall(bindings::id_Timer_is_one_shot);
		}
		
		void set_autostart(bool enable) {
			ptr.godot_icall(bindings::id_Timer_set_autostart, enable);
		}
		
		bool has_autostart() const {
			return ptr.godot_icall(bindings::id_Timer_has_autostart);
		}
		
		void start() {
			ptr.godot_icall(bindings::id_Timer_start);
		}
		
		void stop() {
			ptr.godot_icall(bindings::id_Timer_stop);
		}
		
		void set_paused(bool paused) {
			ptr.godot_icall(bindings::id_Timer_set_paused, paused);
		}
		
		bool is_paused() const {
			return ptr.godot_icall(bindings::id_Timer_is_paused);
		}
		
		bool is_stopped() const {
			return ptr.godot_icall(bindings::id_Timer_is_stopped);
		}
		
		float get_time_left() const {
			return ptr.godot_icall(bindings::id_Timer_get_time_left);
		}
		
		void set_timer_process_mode(int mode) {
			ptr.godot_icall(bindings::id_Timer_set_timer_process_mode, mode);
		}
		
		int get_timer_process_mode() const {
			return ptr.godot_icall(bindings::id_Timer_get_timer_process_mode);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Timer);
		}
		
	}
	
	class AudioEffectNotchFilter : AudioEffectFilter {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectNotchFilter)).ptr();
		}
		
	}
	
	class GeometryInstance : VisualInstance {
		
		
		void set_material_override(Material@ material) {
			ptr.godot_icall(bindings::id_GeometryInstance_set_material_override, material);
		}
		
		Material@ get_material_override() const {
			Material ret = ptr.godot_icall(bindings::id_GeometryInstance_get_material_override);
			return  ret;
		}
		
		void set_flag(int flag, bool value) {
			ptr.godot_icall(bindings::id_GeometryInstance_set_flag, flag, value);
		}
		
		bool get_flag(int flag) const {
			return ptr.godot_icall(bindings::id_GeometryInstance_get_flag, flag);
		}
		
		void set_cast_shadows_setting(int shadow_casting_setting) {
			ptr.godot_icall(bindings::id_GeometryInstance_set_cast_shadows_setting, shadow_casting_setting);
		}
		
		int get_cast_shadows_setting() const {
			return ptr.godot_icall(bindings::id_GeometryInstance_get_cast_shadows_setting);
		}
		
		void set_lod_max_hysteresis(float mode) {
			ptr.godot_icall(bindings::id_GeometryInstance_set_lod_max_hysteresis, mode);
		}
		
		float get_lod_max_hysteresis() const {
			return ptr.godot_icall(bindings::id_GeometryInstance_get_lod_max_hysteresis);
		}
		
		void set_lod_max_distance(float mode) {
			ptr.godot_icall(bindings::id_GeometryInstance_set_lod_max_distance, mode);
		}
		
		float get_lod_max_distance() const {
			return ptr.godot_icall(bindings::id_GeometryInstance_get_lod_max_distance);
		}
		
		void set_lod_min_hysteresis(float mode) {
			ptr.godot_icall(bindings::id_GeometryInstance_set_lod_min_hysteresis, mode);
		}
		
		float get_lod_min_hysteresis() const {
			return ptr.godot_icall(bindings::id_GeometryInstance_get_lod_min_hysteresis);
		}
		
		void set_lod_min_distance(float mode) {
			ptr.godot_icall(bindings::id_GeometryInstance_set_lod_min_distance, mode);
		}
		
		float get_lod_min_distance() const {
			return ptr.godot_icall(bindings::id_GeometryInstance_get_lod_min_distance);
		}
		
		void set_extra_cull_margin(float margin) {
			ptr.godot_icall(bindings::id_GeometryInstance_set_extra_cull_margin, margin);
		}
		
		float get_extra_cull_margin() const {
			return ptr.godot_icall(bindings::id_GeometryInstance_get_extra_cull_margin);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_GeometryInstance);
		}
		
	}
	
	class GDNativeDialog : Reference {
		
		
		void set_title(const String &in p_title) {
			ptr.godot_icall(bindings::id_GDNativeDialog_set_title, p_title);
		}
		
		String get_title() const {
			return ptr.godot_icall(bindings::id_GDNativeDialog_get_title);
		}
		
		void show() {
			ptr.godot_icall(bindings::id_GDNativeDialog_show);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_GDNativeDialog)).ptr();
		}
		
	}
	
	class ConvexPolygonShape2D : Shape2D {
		
		
		void set_point_cloud(const PoolVector2Array &in point_cloud) {
			ptr.godot_icall(bindings::id_ConvexPolygonShape2D_set_point_cloud, point_cloud);
		}
		
		void set_points(const PoolVector2Array &in points) {
			ptr.godot_icall(bindings::id_ConvexPolygonShape2D_set_points, points);
		}
		
		PoolVector2Array get_points() const {
			return ptr.godot_icall(bindings::id_ConvexPolygonShape2D_get_points);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ConvexPolygonShape2D)).ptr();
		}
		
	}
	
	class PackedDataContainerRef : Reference {
		
		
		int size() const {
			return ptr.godot_icall(bindings::id_PackedDataContainerRef_size);
		}
		
		protected Variant _iter_init(const Array &in arg0) {
			return ptr.godot_icall(bindings::id_PackedDataContainerRef__iter_init, arg0);
		}
		
		protected Variant _iter_get(const Variant &in arg0) {
			return ptr.godot_icall(bindings::id_PackedDataContainerRef__iter_get, arg0);
		}
		
		protected Variant _iter_next(const Array &in arg0) {
			return ptr.godot_icall(bindings::id_PackedDataContainerRef__iter_next, arg0);
		}
		
		protected bool _is_dictionary() const {
			return ptr.godot_icall(bindings::id_PackedDataContainerRef__is_dictionary);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_PackedDataContainerRef)).ptr();
		}
		
	}
	
	class VBoxContainer : BoxContainer {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_VBoxContainer);
		}
		
	}
	
	class Physics2DDirectBodyState : Object {
		
		
		Vector2 get_total_gravity() const {
			return ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_total_gravity);
		}
		
		float get_total_linear_damp() const {
			return ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_total_linear_damp);
		}
		
		float get_total_angular_damp() const {
			return ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_total_angular_damp);
		}
		
		float get_inverse_mass() const {
			return ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_inverse_mass);
		}
		
		float get_inverse_inertia() const {
			return ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_inverse_inertia);
		}
		
		void set_linear_velocity(const Vector2 &in velocity) {
			ptr.godot_icall(bindings::id_Physics2DDirectBodyState_set_linear_velocity, velocity);
		}
		
		Vector2 get_linear_velocity() const {
			return ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_linear_velocity);
		}
		
		void set_angular_velocity(float velocity) {
			ptr.godot_icall(bindings::id_Physics2DDirectBodyState_set_angular_velocity, velocity);
		}
		
		float get_angular_velocity() const {
			return ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_angular_velocity);
		}
		
		void set_transform(const Transform2D &in transform) {
			ptr.godot_icall(bindings::id_Physics2DDirectBodyState_set_transform, transform);
		}
		
		Transform2D get_transform() const {
			return ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_transform);
		}
		
		void set_sleep_state(bool enabled) {
			ptr.godot_icall(bindings::id_Physics2DDirectBodyState_set_sleep_state, enabled);
		}
		
		bool is_sleeping() const {
			return ptr.godot_icall(bindings::id_Physics2DDirectBodyState_is_sleeping);
		}
		
		int get_contact_count() const {
			return ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_contact_count);
		}
		
		Vector2 get_contact_local_position(int contact_idx) const {
			return ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_contact_local_position, contact_idx);
		}
		
		Vector2 get_contact_local_normal(int contact_idx) const {
			return ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_contact_local_normal, contact_idx);
		}
		
		int get_contact_local_shape(int contact_idx) const {
			return ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_contact_local_shape, contact_idx);
		}
		
		RID get_contact_collider(int contact_idx) const {
			return ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_contact_collider, contact_idx);
		}
		
		Vector2 get_contact_collider_position(int contact_idx) const {
			return ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_contact_collider_position, contact_idx);
		}
		
		int get_contact_collider_id(int contact_idx) const {
			return ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_contact_collider_id, contact_idx);
		}
		
		Object@ get_contact_collider_object(int contact_idx) const {
			Object ret = ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_contact_collider_object, contact_idx);
			return  ret;
		}
		
		int get_contact_collider_shape(int contact_idx) const {
			return ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_contact_collider_shape, contact_idx);
		}
		
		Variant get_contact_collider_shape_metadata(int contact_idx) const {
			return ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_contact_collider_shape_metadata, contact_idx);
		}
		
		Vector2 get_contact_collider_velocity_at_position(int contact_idx) const {
			return ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_contact_collider_velocity_at_position, contact_idx);
		}
		
		float get_step() const {
			return ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_step);
		}
		
		void integrate_forces() {
			ptr.godot_icall(bindings::id_Physics2DDirectBodyState_integrate_forces);
		}
		
		Physics2DDirectSpaceState@ get_space_state() {
			Physics2DDirectSpaceState ret = ptr.godot_icall(bindings::id_Physics2DDirectBodyState_get_space_state);
			return  ret;
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Physics2DDirectBodyState);
		}
		
	}
	
	class AudioEffectPanner : AudioEffect {
		
		
		void set_pan(float cpanume) {
			ptr.godot_icall(bindings::id_AudioEffectPanner_set_pan, cpanume);
		}
		
		float get_pan() const {
			return ptr.godot_icall(bindings::id_AudioEffectPanner_get_pan);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectPanner)).ptr();
		}
		
	}
	
	class AudioEffectStereoEnhance : AudioEffect {
		
		
		void set_pan_pullout(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectStereoEnhance_set_pan_pullout, amount);
		}
		
		float get_pan_pullout() const {
			return ptr.godot_icall(bindings::id_AudioEffectStereoEnhance_get_pan_pullout);
		}
		
		void set_time_pullout(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectStereoEnhance_set_time_pullout, amount);
		}
		
		float get_time_pullout() const {
			return ptr.godot_icall(bindings::id_AudioEffectStereoEnhance_get_time_pullout);
		}
		
		void set_surround(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectStereoEnhance_set_surround, amount);
		}
		
		float get_surround() const {
			return ptr.godot_icall(bindings::id_AudioEffectStereoEnhance_get_surround);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectStereoEnhance)).ptr();
		}
		
	}
	
	class PHashTranslation : Translation {
		
		
		void generate(Translation@ From) {
			ptr.godot_icall(bindings::id_PHashTranslation_generate, From);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_PHashTranslation)).ptr();
		}
		
	}
	
	class TriangleMesh : Reference {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_TriangleMesh)).ptr();
		}
		
	}
	
	class _Semaphore : Reference {
		
		
		int wait() {
			return ptr.godot_icall(bindings::id__Semaphore_wait);
		}
		
		int post() {
			return ptr.godot_icall(bindings::id__Semaphore_post);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id__Semaphore)).ptr();
		}
		
	}
	
	class Container : Control {
		
		
		protected void _sort_children() {
			ptr.godot_icall(bindings::id_Container__sort_children);
		}
		
		protected void _child_minsize_changed() {
			ptr.godot_icall(bindings::id_Container__child_minsize_changed);
		}
		
		void queue_sort() {
			ptr.godot_icall(bindings::id_Container_queue_sort);
		}
		
		void fit_child_in_rect(Control@ child, const Rect2 &in rect) {
			ptr.godot_icall(bindings::id_Container_fit_child_in_rect, child, rect);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Container);
		}
		
	}
	
	class ViewportContainer : Container {
		
		
		protected void _input(InputEvent@ event) {
			ptr.godot_icall(bindings::id_ViewportContainer__input, event);
		}
		
		void set_stretch(bool enable) {
			ptr.godot_icall(bindings::id_ViewportContainer_set_stretch, enable);
		}
		
		bool is_stretch_enabled() const {
			return ptr.godot_icall(bindings::id_ViewportContainer_is_stretch_enabled);
		}
		
		void set_stretch_shrink(int amount) {
			ptr.godot_icall(bindings::id_ViewportContainer_set_stretch_shrink, amount);
		}
		
		int get_stretch_shrink() const {
			return ptr.godot_icall(bindings::id_ViewportContainer_get_stretch_shrink);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ViewportContainer);
		}
		
	}
	
	class Tween : Node {
		
		
		bool is_active() const {
			return ptr.godot_icall(bindings::id_Tween_is_active);
		}
		
		void set_active(bool active) {
			ptr.godot_icall(bindings::id_Tween_set_active, active);
		}
		
		bool is_repeat() const {
			return ptr.godot_icall(bindings::id_Tween_is_repeat);
		}
		
		void set_repeat(bool repeat) {
			ptr.godot_icall(bindings::id_Tween_set_repeat, repeat);
		}
		
		void set_speed_scale(float speed) {
			ptr.godot_icall(bindings::id_Tween_set_speed_scale, speed);
		}
		
		float get_speed_scale() const {
			return ptr.godot_icall(bindings::id_Tween_get_speed_scale);
		}
		
		void set_tween_process_mode(int mode) {
			ptr.godot_icall(bindings::id_Tween_set_tween_process_mode, mode);
		}
		
		int get_tween_process_mode() const {
			return ptr.godot_icall(bindings::id_Tween_get_tween_process_mode);
		}
		
		bool start() {
			return ptr.godot_icall(bindings::id_Tween_start);
		}
		
		bool reset(Object@ object, const String &in key) {
			return ptr.godot_icall(bindings::id_Tween_reset, object, key);
		}
		
		bool reset_all() {
			return ptr.godot_icall(bindings::id_Tween_reset_all);
		}
		
		bool stop(Object@ object, const String &in key) {
			return ptr.godot_icall(bindings::id_Tween_stop, object, key);
		}
		
		bool stop_all() {
			return ptr.godot_icall(bindings::id_Tween_stop_all);
		}
		
		bool resume(Object@ object, const String &in key) {
			return ptr.godot_icall(bindings::id_Tween_resume, object, key);
		}
		
		bool resume_all() {
			return ptr.godot_icall(bindings::id_Tween_resume_all);
		}
		
		bool remove(Object@ object, const String &in key) {
			return ptr.godot_icall(bindings::id_Tween_remove, object, key);
		}
		
		protected void _remove(Object@ object, const String &in key, bool first_only) {
			ptr.godot_icall(bindings::id_Tween__remove, object, key, first_only);
		}
		
		bool remove_all() {
			return ptr.godot_icall(bindings::id_Tween_remove_all);
		}
		
		bool seek(float time) {
			return ptr.godot_icall(bindings::id_Tween_seek, time);
		}
		
		float tell() const {
			return ptr.godot_icall(bindings::id_Tween_tell);
		}
		
		float get_runtime() const {
			return ptr.godot_icall(bindings::id_Tween_get_runtime);
		}
		
		bool interpolate_property(Object@ object, const NodePath &in property, const Variant &in initial_val, const Variant &in final_val, float duration, int trans_type, int ease_type, float delay) {
			return ptr.godot_icall(bindings::id_Tween_interpolate_property, object, property, initial_val, final_val, duration, trans_type, ease_type, delay);
		}
		
		bool interpolate_method(Object@ object, const String &in method, const Variant &in initial_val, const Variant &in final_val, float duration, int trans_type, int ease_type, float delay) {
			return ptr.godot_icall(bindings::id_Tween_interpolate_method, object, method, initial_val, final_val, duration, trans_type, ease_type, delay);
		}
		
		bool interpolate_callback(Object@ object, float duration, const String &in callback, const Variant &in arg1, const Variant &in arg2, const Variant &in arg3, const Variant &in arg4, const Variant &in arg5) {
			return ptr.godot_icall(bindings::id_Tween_interpolate_callback, object, duration, callback, arg1, arg2, arg3, arg4, arg5);
		}
		
		bool interpolate_deferred_callback(Object@ object, float duration, const String &in callback, const Variant &in arg1, const Variant &in arg2, const Variant &in arg3, const Variant &in arg4, const Variant &in arg5) {
			return ptr.godot_icall(bindings::id_Tween_interpolate_deferred_callback, object, duration, callback, arg1, arg2, arg3, arg4, arg5);
		}
		
		bool follow_property(Object@ object, const NodePath &in property, const Variant &in initial_val, Object@ target, const NodePath &in target_property, float duration, int trans_type, int ease_type, float delay) {
			return ptr.godot_icall(bindings::id_Tween_follow_property, object, property, initial_val, target, target_property, duration, trans_type, ease_type, delay);
		}
		
		bool follow_method(Object@ object, const String &in method, const Variant &in initial_val, Object@ target, const String &in target_method, float duration, int trans_type, int ease_type, float delay) {
			return ptr.godot_icall(bindings::id_Tween_follow_method, object, method, initial_val, target, target_method, duration, trans_type, ease_type, delay);
		}
		
		bool targeting_property(Object@ object, const NodePath &in property, Object@ initial, const NodePath &in initial_val, const Variant &in final_val, float duration, int trans_type, int ease_type, float delay) {
			return ptr.godot_icall(bindings::id_Tween_targeting_property, object, property, initial, initial_val, final_val, duration, trans_type, ease_type, delay);
		}
		
		bool targeting_method(Object@ object, const String &in method, Object@ initial, const String &in initial_method, const Variant &in final_val, float duration, int trans_type, int ease_type, float delay) {
			return ptr.godot_icall(bindings::id_Tween_targeting_method, object, method, initial, initial_method, final_val, duration, trans_type, ease_type, delay);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Tween);
		}
		
	}
	
	class ARVROrigin : Spatial {
		
		
		void set_world_scale(float world_scale) {
			ptr.godot_icall(bindings::id_ARVROrigin_set_world_scale, world_scale);
		}
		
		float get_world_scale() const {
			return ptr.godot_icall(bindings::id_ARVROrigin_get_world_scale);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ARVROrigin);
		}
		
	}
	
	class VisualScriptGlobalConstant : VisualScriptNode {
		
		
		void set_global_constant(int index) {
			ptr.godot_icall(bindings::id_VisualScriptGlobalConstant_set_global_constant, index);
		}
		
		int get_global_constant() {
			return ptr.godot_icall(bindings::id_VisualScriptGlobalConstant_get_global_constant);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptGlobalConstant)).ptr();
		}
		
	}
	
	class GridMap : Spatial {
		
		
		void set_collision_layer(int layer) {
			ptr.godot_icall(bindings::id_GridMap_set_collision_layer, layer);
		}
		
		int get_collision_layer() const {
			return ptr.godot_icall(bindings::id_GridMap_get_collision_layer);
		}
		
		void set_collision_mask(int mask) {
			ptr.godot_icall(bindings::id_GridMap_set_collision_mask, mask);
		}
		
		int get_collision_mask() const {
			return ptr.godot_icall(bindings::id_GridMap_get_collision_mask);
		}
		
		void set_collision_mask_bit(int bit, bool value) {
			ptr.godot_icall(bindings::id_GridMap_set_collision_mask_bit, bit, value);
		}
		
		bool get_collision_mask_bit(int bit) const {
			return ptr.godot_icall(bindings::id_GridMap_get_collision_mask_bit, bit);
		}
		
		void set_collision_layer_bit(int bit, bool value) {
			ptr.godot_icall(bindings::id_GridMap_set_collision_layer_bit, bit, value);
		}
		
		bool get_collision_layer_bit(int bit) const {
			return ptr.godot_icall(bindings::id_GridMap_get_collision_layer_bit, bit);
		}
		
		void set_theme(MeshLibrary@ theme) {
			ptr.godot_icall(bindings::id_GridMap_set_theme, theme);
		}
		
		MeshLibrary@ get_theme() const {
			MeshLibrary ret = ptr.godot_icall(bindings::id_GridMap_get_theme);
			return  ret;
		}
		
		void set_cell_size(const Vector3 &in size) {
			ptr.godot_icall(bindings::id_GridMap_set_cell_size, size);
		}
		
		Vector3 get_cell_size() const {
			return ptr.godot_icall(bindings::id_GridMap_get_cell_size);
		}
		
		void set_cell_scale(float scale) {
			ptr.godot_icall(bindings::id_GridMap_set_cell_scale, scale);
		}
		
		float get_cell_scale() const {
			return ptr.godot_icall(bindings::id_GridMap_get_cell_scale);
		}
		
		void set_octant_size(int size) {
			ptr.godot_icall(bindings::id_GridMap_set_octant_size, size);
		}
		
		int get_octant_size() const {
			return ptr.godot_icall(bindings::id_GridMap_get_octant_size);
		}
		
		void set_cell_item(int x, int y, int z, int item, int orientation) {
			ptr.godot_icall(bindings::id_GridMap_set_cell_item, x, y, z, item, orientation);
		}
		
		int get_cell_item(int x, int y, int z) const {
			return ptr.godot_icall(bindings::id_GridMap_get_cell_item, x, y, z);
		}
		
		int get_cell_item_orientation(int x, int y, int z) const {
			return ptr.godot_icall(bindings::id_GridMap_get_cell_item_orientation, x, y, z);
		}
		
		Vector3 world_to_map(const Vector3 &in pos) const {
			return ptr.godot_icall(bindings::id_GridMap_world_to_map, pos);
		}
		
		Vector3 map_to_world(int x, int y, int z) const {
			return ptr.godot_icall(bindings::id_GridMap_map_to_world, x, y, z);
		}
		
		protected void _update_octants_callback() {
			ptr.godot_icall(bindings::id_GridMap__update_octants_callback);
		}
		
		void resource_changed(Resource@ resource) {
			ptr.godot_icall(bindings::id_GridMap_resource_changed, resource);
		}
		
		void set_center_x(bool enable) {
			ptr.godot_icall(bindings::id_GridMap_set_center_x, enable);
		}
		
		bool get_center_x() const {
			return ptr.godot_icall(bindings::id_GridMap_get_center_x);
		}
		
		void set_center_y(bool enable) {
			ptr.godot_icall(bindings::id_GridMap_set_center_y, enable);
		}
		
		bool get_center_y() const {
			return ptr.godot_icall(bindings::id_GridMap_get_center_y);
		}
		
		void set_center_z(bool enable) {
			ptr.godot_icall(bindings::id_GridMap_set_center_z, enable);
		}
		
		bool get_center_z() const {
			return ptr.godot_icall(bindings::id_GridMap_get_center_z);
		}
		
		void set_clip(bool enabled, bool clipabove, int floor, int axis) {
			ptr.godot_icall(bindings::id_GridMap_set_clip, enabled, clipabove, floor, axis);
		}
		
		void clear() {
			ptr.godot_icall(bindings::id_GridMap_clear);
		}
		
		Array get_used_cells() const {
			return ptr.godot_icall(bindings::id_GridMap_get_used_cells);
		}
		
		Array get_meshes() {
			return ptr.godot_icall(bindings::id_GridMap_get_meshes);
		}
		
		Array get_bake_meshes() {
			return ptr.godot_icall(bindings::id_GridMap_get_bake_meshes);
		}
		
		RID get_bake_mesh_instance(int idx) {
			return ptr.godot_icall(bindings::id_GridMap_get_bake_mesh_instance, idx);
		}
		
		void clear_baked_meshes() {
			ptr.godot_icall(bindings::id_GridMap_clear_baked_meshes);
		}
		
		void make_baked_meshes(bool gen_lightmap_uv, float lightmap_uv_texel_size) {
			ptr.godot_icall(bindings::id_GridMap_make_baked_meshes, gen_lightmap_uv, lightmap_uv_texel_size);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_GridMap);
		}
		
	}
	
	class CenterContainer : Container {
		
		
		void set_use_top_left(bool enable) {
			ptr.godot_icall(bindings::id_CenterContainer_set_use_top_left, enable);
		}
		
		bool is_using_top_left() const {
			return ptr.godot_icall(bindings::id_CenterContainer_is_using_top_left);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_CenterContainer);
		}
		
	}
	
	class ARVRCamera : Camera {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ARVRCamera);
		}
		
	}
	
	class ResourceImporterWebm : ResourceImporter {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ResourceImporterWebm)).ptr();
		}
		
	}
	
	class PackedPage : Reference {
		
		
		Image@ get_image() const {
			Image ret = ptr.godot_icall(bindings::id_PackedPage_get_image);
			return  ret;
		}
		
		Dictionary get_path_region_map() const {
			return ptr.godot_icall(bindings::id_PackedPage_get_path_region_map);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_PackedPage)).ptr();
		}
		
	}
	
	class AudioEffectFilter : AudioEffect {
		
		
		void set_cutoff(float freq) {
			ptr.godot_icall(bindings::id_AudioEffectFilter_set_cutoff, freq);
		}
		
		float get_cutoff() const {
			return ptr.godot_icall(bindings::id_AudioEffectFilter_get_cutoff);
		}
		
		void set_resonance(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectFilter_set_resonance, amount);
		}
		
		float get_resonance() const {
			return ptr.godot_icall(bindings::id_AudioEffectFilter_get_resonance);
		}
		
		void set_gain(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectFilter_set_gain, amount);
		}
		
		float get_gain() const {
			return ptr.godot_icall(bindings::id_AudioEffectFilter_get_gain);
		}
		
		void set_db(int amount) {
			ptr.godot_icall(bindings::id_AudioEffectFilter_set_db, amount);
		}
		
		int get_db() const {
			return ptr.godot_icall(bindings::id_AudioEffectFilter_get_db);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectFilter)).ptr();
		}
		
	}
	
	class AudioStreamPlayback : Reference {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioStreamPlayback)).ptr();
		}
		
	}
	
	class PackedDataContainer : Resource {
		
		
		protected void _set_data(const PoolByteArray &in arg0) {
			ptr.godot_icall(bindings::id_PackedDataContainer__set_data, arg0);
		}
		
		protected PoolByteArray _get_data() const {
			return ptr.godot_icall(bindings::id_PackedDataContainer__get_data);
		}
		
		protected Variant _iter_init(const Array &in arg0) {
			return ptr.godot_icall(bindings::id_PackedDataContainer__iter_init, arg0);
		}
		
		protected Variant _iter_get(const Variant &in arg0) {
			return ptr.godot_icall(bindings::id_PackedDataContainer__iter_get, arg0);
		}
		
		protected Variant _iter_next(const Array &in arg0) {
			return ptr.godot_icall(bindings::id_PackedDataContainer__iter_next, arg0);
		}
		
		int pack(const Variant &in value) {
			return ptr.godot_icall(bindings::id_PackedDataContainer_pack, value);
		}
		
		int size() const {
			return ptr.godot_icall(bindings::id_PackedDataContainer_size);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_PackedDataContainer)).ptr();
		}
		
	}
	
	class VSplitContainer : SplitContainer {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_VSplitContainer);
		}
		
	}
	
	class PanoramaSky : Sky {
		
		
		void set_panorama(Texture@ texture) {
			ptr.godot_icall(bindings::id_PanoramaSky_set_panorama, texture);
		}
		
		Texture@ get_panorama() const {
			Texture ret = ptr.godot_icall(bindings::id_PanoramaSky_get_panorama);
			return  ret;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_PanoramaSky)).ptr();
		}
		
	}
	
	class ResourcePreloader : Node {
		
		
		protected void _set_resources(const Array &in arg0) {
			ptr.godot_icall(bindings::id_ResourcePreloader__set_resources, arg0);
		}
		
		protected Array _get_resources() const {
			return ptr.godot_icall(bindings::id_ResourcePreloader__get_resources);
		}
		
		void add_resource(const String &in name, Resource@ resource) {
			ptr.godot_icall(bindings::id_ResourcePreloader_add_resource, name, resource);
		}
		
		void remove_resource(const String &in name) {
			ptr.godot_icall(bindings::id_ResourcePreloader_remove_resource, name);
		}
		
		void rename_resource(const String &in name, const String &in newname) {
			ptr.godot_icall(bindings::id_ResourcePreloader_rename_resource, name, newname);
		}
		
		bool has_resource(const String &in name) const {
			return ptr.godot_icall(bindings::id_ResourcePreloader_has_resource, name);
		}
		
		Resource@ get_resource(const String &in name) const {
			Resource ret = ptr.godot_icall(bindings::id_ResourcePreloader_get_resource, name);
			return  ret;
		}
		
		PoolStringArray get_resource_list() const {
			return ptr.godot_icall(bindings::id_ResourcePreloader_get_resource_list);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ResourcePreloader);
		}
		
	}
	
	class Listener : Spatial {
		
		
		void make_current() {
			ptr.godot_icall(bindings::id_Listener_make_current);
		}
		
		void clear_current() {
			ptr.godot_icall(bindings::id_Listener_clear_current);
		}
		
		bool is_current() const {
			return ptr.godot_icall(bindings::id_Listener_is_current);
		}
		
		Transform get_listener_transform() const {
			return ptr.godot_icall(bindings::id_Listener_get_listener_transform);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Listener);
		}
		
	}
	
	class ShaderMaterial : Material {
		
		
		void set_shader(Shader@ shader) {
			ptr.godot_icall(bindings::id_ShaderMaterial_set_shader, shader);
		}
		
		Shader@ get_shader() const {
			Shader ret = ptr.godot_icall(bindings::id_ShaderMaterial_get_shader);
			return  ret;
		}
		
		void set_shader_param(const String &in param, const Variant &in value) {
			ptr.godot_icall(bindings::id_ShaderMaterial_set_shader_param, param, value);
		}
		
		Variant get_shader_param(const String &in param) const {
			return ptr.godot_icall(bindings::id_ShaderMaterial_get_shader_param, param);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ShaderMaterial)).ptr();
		}
		
	}
	
	class GDNativeLibrary : Resource {
		
		
		ConfigFile@ get_config_file() {
			ConfigFile ret = ptr.godot_icall(bindings::id_GDNativeLibrary_get_config_file);
			return  ret;
		}
		
		String get_current_library_path() const {
			return ptr.godot_icall(bindings::id_GDNativeLibrary_get_current_library_path);
		}
		
		PoolStringArray get_current_dependencies() const {
			return ptr.godot_icall(bindings::id_GDNativeLibrary_get_current_dependencies);
		}
		
		bool should_load_once() const {
			return ptr.godot_icall(bindings::id_GDNativeLibrary_should_load_once);
		}
		
		bool is_singleton() const {
			return ptr.godot_icall(bindings::id_GDNativeLibrary_is_singleton);
		}
		
		String get_symbol_prefix() const {
			return ptr.godot_icall(bindings::id_GDNativeLibrary_get_symbol_prefix);
		}
		
		bool is_reloadable() const {
			return ptr.godot_icall(bindings::id_GDNativeLibrary_is_reloadable);
		}
		
		void set_load_once(bool load_once) {
			ptr.godot_icall(bindings::id_GDNativeLibrary_set_load_once, load_once);
		}
		
		void set_singleton(bool singleton) {
			ptr.godot_icall(bindings::id_GDNativeLibrary_set_singleton, singleton);
		}
		
		void set_symbol_prefix(const String &in symbol_prefix) {
			ptr.godot_icall(bindings::id_GDNativeLibrary_set_symbol_prefix, symbol_prefix);
		}
		
		void set_reloadable(bool reloadable) {
			ptr.godot_icall(bindings::id_GDNativeLibrary_set_reloadable, reloadable);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_GDNativeLibrary)).ptr();
		}
		
	}
	
	class EditorSceneImporter : Reference {
		
		
		protected int _get_import_flags() {
			return 0;
		}
		
		protected Array _get_extensions() {
			return Array();
		}
		
		protected Node@ _import_scene(const String &in path, int flags, int bake_fps) {
			return null;
		}
		
		protected Animation@ _import_animation(const String &in path, int flags, int bake_fps) {
			return null;
		}
		
		Node@ import_scene_from_other_importer(const String &in path, int flags, int bake_fps) {
			Node ret = ptr.godot_icall(bindings::id_EditorSceneImporter_import_scene_from_other_importer, path, flags, bake_fps);
			return  ret;
		}
		
		Animation@ import_animation_from_other_importer(const String &in path, int flags, int bake_fps) {
			Animation ret = ptr.godot_icall(bindings::id_EditorSceneImporter_import_animation_from_other_importer, path, flags, bake_fps);
			return  ret;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_EditorSceneImporter)).ptr();
		}
		
	}
	
	class SurfaceTool : Reference {
		
		
		void begin(int primitive) {
			ptr.godot_icall(bindings::id_SurfaceTool_begin, primitive);
		}
		
		void add_vertex(const Vector3 &in vertex) {
			ptr.godot_icall(bindings::id_SurfaceTool_add_vertex, vertex);
		}
		
		void add_color(const Color &in color) {
			ptr.godot_icall(bindings::id_SurfaceTool_add_color, color);
		}
		
		void add_normal(const Vector3 &in normal) {
			ptr.godot_icall(bindings::id_SurfaceTool_add_normal, normal);
		}
		
		void add_tangent(const Plane &in tangent) {
			ptr.godot_icall(bindings::id_SurfaceTool_add_tangent, tangent);
		}
		
		void add_uv(const Vector2 &in uv) {
			ptr.godot_icall(bindings::id_SurfaceTool_add_uv, uv);
		}
		
		void add_uv2(const Vector2 &in uv2) {
			ptr.godot_icall(bindings::id_SurfaceTool_add_uv2, uv2);
		}
		
		void add_bones(const PoolIntArray &in bones) {
			ptr.godot_icall(bindings::id_SurfaceTool_add_bones, bones);
		}
		
		void add_weights(const PoolRealArray &in weights) {
			ptr.godot_icall(bindings::id_SurfaceTool_add_weights, weights);
		}
		
		void add_smooth_group(bool smooth) {
			ptr.godot_icall(bindings::id_SurfaceTool_add_smooth_group, smooth);
		}
		
		void add_triangle_fan(const PoolVector3Array &in vertexes, const PoolVector2Array &in uvs, const PoolColorArray &in colors, const PoolVector2Array &in uv2s, const PoolVector3Array &in normals, const Array &in tangents) {
			ptr.godot_icall(bindings::id_SurfaceTool_add_triangle_fan, vertexes, uvs, colors, uv2s, normals, tangents);
		}
		
		void add_index(int index) {
			ptr.godot_icall(bindings::id_SurfaceTool_add_index, index);
		}
		
		void index() {
			ptr.godot_icall(bindings::id_SurfaceTool_index);
		}
		
		void deindex() {
			ptr.godot_icall(bindings::id_SurfaceTool_deindex);
		}
		
		void generate_normals() {
			ptr.godot_icall(bindings::id_SurfaceTool_generate_normals);
		}
		
		void generate_tangents() {
			ptr.godot_icall(bindings::id_SurfaceTool_generate_tangents);
		}
		
		void add_to_format(int flags) {
			ptr.godot_icall(bindings::id_SurfaceTool_add_to_format, flags);
		}
		
		void set_material(Material@ material) {
			ptr.godot_icall(bindings::id_SurfaceTool_set_material, material);
		}
		
		void clear() {
			ptr.godot_icall(bindings::id_SurfaceTool_clear);
		}
		
		void create_from(Mesh@ existing, int surface) {
			ptr.godot_icall(bindings::id_SurfaceTool_create_from, existing, surface);
		}
		
		void append_from(Mesh@ existing, int surface, const Transform &in transform) {
			ptr.godot_icall(bindings::id_SurfaceTool_append_from, existing, surface, transform);
		}
		
		ArrayMesh@ commit(ArrayMesh@ existing, int flags) {
			ArrayMesh ret = ptr.godot_icall(bindings::id_SurfaceTool_commit, existing, flags);
			return  ret;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_SurfaceTool)).ptr();
		}
		
	}
	
	class BakedLightmapData : Resource {
		
		
		protected void _set_user_data(const Array &in data) {
			ptr.godot_icall(bindings::id_BakedLightmapData__set_user_data, data);
		}
		
		protected Array _get_user_data() const {
			return ptr.godot_icall(bindings::id_BakedLightmapData__get_user_data);
		}
		
		void set_bounds(const AABB &in bounds) {
			ptr.godot_icall(bindings::id_BakedLightmapData_set_bounds, bounds);
		}
		
		AABB get_bounds() const {
			return ptr.godot_icall(bindings::id_BakedLightmapData_get_bounds);
		}
		
		void set_cell_space_transform(const Transform &in xform) {
			ptr.godot_icall(bindings::id_BakedLightmapData_set_cell_space_transform, xform);
		}
		
		Transform get_cell_space_transform() const {
			return ptr.godot_icall(bindings::id_BakedLightmapData_get_cell_space_transform);
		}
		
		void set_cell_subdiv(int cell_subdiv) {
			ptr.godot_icall(bindings::id_BakedLightmapData_set_cell_subdiv, cell_subdiv);
		}
		
		int get_cell_subdiv() const {
			return ptr.godot_icall(bindings::id_BakedLightmapData_get_cell_subdiv);
		}
		
		void set_octree(const PoolByteArray &in octree) {
			ptr.godot_icall(bindings::id_BakedLightmapData_set_octree, octree);
		}
		
		PoolByteArray get_octree() const {
			return ptr.godot_icall(bindings::id_BakedLightmapData_get_octree);
		}
		
		void set_energy(float energy) {
			ptr.godot_icall(bindings::id_BakedLightmapData_set_energy, energy);
		}
		
		float get_energy() const {
			return ptr.godot_icall(bindings::id_BakedLightmapData_get_energy);
		}
		
		void add_user(const NodePath &in path, Texture@ lightmap, int instance) {
			ptr.godot_icall(bindings::id_BakedLightmapData_add_user, path, lightmap, instance);
		}
		
		int get_user_count() const {
			return ptr.godot_icall(bindings::id_BakedLightmapData_get_user_count);
		}
		
		NodePath get_user_path(int user_idx) const {
			return ptr.godot_icall(bindings::id_BakedLightmapData_get_user_path, user_idx);
		}
		
		Texture@ get_user_lightmap(int user_idx) const {
			Texture ret = ptr.godot_icall(bindings::id_BakedLightmapData_get_user_lightmap, user_idx);
			return  ret;
		}
		
		void clear_users() {
			ptr.godot_icall(bindings::id_BakedLightmapData_clear_users);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_BakedLightmapData)).ptr();
		}
		
	}
	
	class Particles : GeometryInstance {
		
		
		void set_emitting(bool emitting) {
			ptr.godot_icall(bindings::id_Particles_set_emitting, emitting);
		}
		
		void set_amount(int amount) {
			ptr.godot_icall(bindings::id_Particles_set_amount, amount);
		}
		
		void set_lifetime(float secs) {
			ptr.godot_icall(bindings::id_Particles_set_lifetime, secs);
		}
		
		void set_one_shot(bool enable) {
			ptr.godot_icall(bindings::id_Particles_set_one_shot, enable);
		}
		
		void set_pre_process_time(float secs) {
			ptr.godot_icall(bindings::id_Particles_set_pre_process_time, secs);
		}
		
		void set_explosiveness_ratio(float ratio) {
			ptr.godot_icall(bindings::id_Particles_set_explosiveness_ratio, ratio);
		}
		
		void set_randomness_ratio(float ratio) {
			ptr.godot_icall(bindings::id_Particles_set_randomness_ratio, ratio);
		}
		
		void set_visibility_aabb(const AABB &in aabb) {
			ptr.godot_icall(bindings::id_Particles_set_visibility_aabb, aabb);
		}
		
		void set_use_local_coordinates(bool enable) {
			ptr.godot_icall(bindings::id_Particles_set_use_local_coordinates, enable);
		}
		
		void set_fixed_fps(int fps) {
			ptr.godot_icall(bindings::id_Particles_set_fixed_fps, fps);
		}
		
		void set_fractional_delta(bool enable) {
			ptr.godot_icall(bindings::id_Particles_set_fractional_delta, enable);
		}
		
		void set_process_material(Material@ material) {
			ptr.godot_icall(bindings::id_Particles_set_process_material, material);
		}
		
		void set_speed_scale(float scale) {
			ptr.godot_icall(bindings::id_Particles_set_speed_scale, scale);
		}
		
		bool is_emitting() const {
			return ptr.godot_icall(bindings::id_Particles_is_emitting);
		}
		
		int get_amount() const {
			return ptr.godot_icall(bindings::id_Particles_get_amount);
		}
		
		float get_lifetime() const {
			return ptr.godot_icall(bindings::id_Particles_get_lifetime);
		}
		
		bool get_one_shot() const {
			return ptr.godot_icall(bindings::id_Particles_get_one_shot);
		}
		
		float get_pre_process_time() const {
			return ptr.godot_icall(bindings::id_Particles_get_pre_process_time);
		}
		
		float get_explosiveness_ratio() const {
			return ptr.godot_icall(bindings::id_Particles_get_explosiveness_ratio);
		}
		
		float get_randomness_ratio() const {
			return ptr.godot_icall(bindings::id_Particles_get_randomness_ratio);
		}
		
		AABB get_visibility_aabb() const {
			return ptr.godot_icall(bindings::id_Particles_get_visibility_aabb);
		}
		
		bool get_use_local_coordinates() const {
			return ptr.godot_icall(bindings::id_Particles_get_use_local_coordinates);
		}
		
		int get_fixed_fps() const {
			return ptr.godot_icall(bindings::id_Particles_get_fixed_fps);
		}
		
		bool get_fractional_delta() const {
			return ptr.godot_icall(bindings::id_Particles_get_fractional_delta);
		}
		
		Material@ get_process_material() const {
			Material ret = ptr.godot_icall(bindings::id_Particles_get_process_material);
			return  ret;
		}
		
		float get_speed_scale() const {
			return ptr.godot_icall(bindings::id_Particles_get_speed_scale);
		}
		
		void set_draw_order(int order) {
			ptr.godot_icall(bindings::id_Particles_set_draw_order, order);
		}
		
		int get_draw_order() const {
			return ptr.godot_icall(bindings::id_Particles_get_draw_order);
		}
		
		void set_draw_passes(int passes) {
			ptr.godot_icall(bindings::id_Particles_set_draw_passes, passes);
		}
		
		void set_draw_pass_mesh(int pass, Mesh@ mesh) {
			ptr.godot_icall(bindings::id_Particles_set_draw_pass_mesh, pass, mesh);
		}
		
		int get_draw_passes() const {
			return ptr.godot_icall(bindings::id_Particles_get_draw_passes);
		}
		
		Mesh@ get_draw_pass_mesh(int pass) const {
			Mesh ret = ptr.godot_icall(bindings::id_Particles_get_draw_pass_mesh, pass);
			return  ret;
		}
		
		void restart() {
			ptr.godot_icall(bindings::id_Particles_restart);
		}
		
		AABB capture_aabb() const {
			return ptr.godot_icall(bindings::id_Particles_capture_aabb);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Particles);
		}
		
	}
	
	class SliderJoint : Joint {
		
		
		void set_param(int param, float value) {
			ptr.godot_icall(bindings::id_SliderJoint_set_param, param, value);
		}
		
		float get_param(int param) const {
			return ptr.godot_icall(bindings::id_SliderJoint_get_param, param);
		}
		
		protected void _set_upper_limit_angular(float upper_limit_angular) {
			ptr.godot_icall(bindings::id_SliderJoint__set_upper_limit_angular, upper_limit_angular);
		}
		
		protected float _get_upper_limit_angular() const {
			return ptr.godot_icall(bindings::id_SliderJoint__get_upper_limit_angular);
		}
		
		protected void _set_lower_limit_angular(float lower_limit_angular) {
			ptr.godot_icall(bindings::id_SliderJoint__set_lower_limit_angular, lower_limit_angular);
		}
		
		protected float _get_lower_limit_angular() const {
			return ptr.godot_icall(bindings::id_SliderJoint__get_lower_limit_angular);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_SliderJoint);
		}
		
	}
	
	class RegExMatch : Reference {
		
		
		String get_subject() const {
			return ptr.godot_icall(bindings::id_RegExMatch_get_subject);
		}
		
		int get_group_count() const {
			return ptr.godot_icall(bindings::id_RegExMatch_get_group_count);
		}
		
		Dictionary get_names() const {
			return ptr.godot_icall(bindings::id_RegExMatch_get_names);
		}
		
		Array get_strings() const {
			return ptr.godot_icall(bindings::id_RegExMatch_get_strings);
		}
		
		String get_string(const Variant &in name) const {
			return ptr.godot_icall(bindings::id_RegExMatch_get_string, name);
		}
		
		int get_start(const Variant &in name) const {
			return ptr.godot_icall(bindings::id_RegExMatch_get_start, name);
		}
		
		int get_end(const Variant &in name) const {
			return ptr.godot_icall(bindings::id_RegExMatch_get_end, name);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_RegExMatch)).ptr();
		}
		
	}
	
	class ProceduralSky : Sky {
		
		
		protected void _update_sky() {
			ptr.godot_icall(bindings::id_ProceduralSky__update_sky);
		}
		
		void set_sky_top_color(const Color &in color) {
			ptr.godot_icall(bindings::id_ProceduralSky_set_sky_top_color, color);
		}
		
		Color get_sky_top_color() const {
			return ptr.godot_icall(bindings::id_ProceduralSky_get_sky_top_color);
		}
		
		void set_sky_horizon_color(const Color &in color) {
			ptr.godot_icall(bindings::id_ProceduralSky_set_sky_horizon_color, color);
		}
		
		Color get_sky_horizon_color() const {
			return ptr.godot_icall(bindings::id_ProceduralSky_get_sky_horizon_color);
		}
		
		void set_sky_curve(float curve) {
			ptr.godot_icall(bindings::id_ProceduralSky_set_sky_curve, curve);
		}
		
		float get_sky_curve() const {
			return ptr.godot_icall(bindings::id_ProceduralSky_get_sky_curve);
		}
		
		void set_sky_energy(float energy) {
			ptr.godot_icall(bindings::id_ProceduralSky_set_sky_energy, energy);
		}
		
		float get_sky_energy() const {
			return ptr.godot_icall(bindings::id_ProceduralSky_get_sky_energy);
		}
		
		void set_ground_bottom_color(const Color &in color) {
			ptr.godot_icall(bindings::id_ProceduralSky_set_ground_bottom_color, color);
		}
		
		Color get_ground_bottom_color() const {
			return ptr.godot_icall(bindings::id_ProceduralSky_get_ground_bottom_color);
		}
		
		void set_ground_horizon_color(const Color &in color) {
			ptr.godot_icall(bindings::id_ProceduralSky_set_ground_horizon_color, color);
		}
		
		Color get_ground_horizon_color() const {
			return ptr.godot_icall(bindings::id_ProceduralSky_get_ground_horizon_color);
		}
		
		void set_ground_curve(float curve) {
			ptr.godot_icall(bindings::id_ProceduralSky_set_ground_curve, curve);
		}
		
		float get_ground_curve() const {
			return ptr.godot_icall(bindings::id_ProceduralSky_get_ground_curve);
		}
		
		void set_ground_energy(float energy) {
			ptr.godot_icall(bindings::id_ProceduralSky_set_ground_energy, energy);
		}
		
		float get_ground_energy() const {
			return ptr.godot_icall(bindings::id_ProceduralSky_get_ground_energy);
		}
		
		void set_sun_color(const Color &in color) {
			ptr.godot_icall(bindings::id_ProceduralSky_set_sun_color, color);
		}
		
		Color get_sun_color() const {
			return ptr.godot_icall(bindings::id_ProceduralSky_get_sun_color);
		}
		
		void set_sun_latitude(float degrees) {
			ptr.godot_icall(bindings::id_ProceduralSky_set_sun_latitude, degrees);
		}
		
		float get_sun_latitude() const {
			return ptr.godot_icall(bindings::id_ProceduralSky_get_sun_latitude);
		}
		
		void set_sun_longitude(float degrees) {
			ptr.godot_icall(bindings::id_ProceduralSky_set_sun_longitude, degrees);
		}
		
		float get_sun_longitude() const {
			return ptr.godot_icall(bindings::id_ProceduralSky_get_sun_longitude);
		}
		
		void set_sun_angle_min(float degrees) {
			ptr.godot_icall(bindings::id_ProceduralSky_set_sun_angle_min, degrees);
		}
		
		float get_sun_angle_min() const {
			return ptr.godot_icall(bindings::id_ProceduralSky_get_sun_angle_min);
		}
		
		void set_sun_angle_max(float degrees) {
			ptr.godot_icall(bindings::id_ProceduralSky_set_sun_angle_max, degrees);
		}
		
		float get_sun_angle_max() const {
			return ptr.godot_icall(bindings::id_ProceduralSky_get_sun_angle_max);
		}
		
		void set_sun_curve(float curve) {
			ptr.godot_icall(bindings::id_ProceduralSky_set_sun_curve, curve);
		}
		
		float get_sun_curve() const {
			return ptr.godot_icall(bindings::id_ProceduralSky_get_sun_curve);
		}
		
		void set_sun_energy(float energy) {
			ptr.godot_icall(bindings::id_ProceduralSky_set_sun_energy, energy);
		}
		
		float get_sun_energy() const {
			return ptr.godot_icall(bindings::id_ProceduralSky_get_sun_energy);
		}
		
		void set_texture_size(int size) {
			ptr.godot_icall(bindings::id_ProceduralSky_set_texture_size, size);
		}
		
		int get_texture_size() const {
			return ptr.godot_icall(bindings::id_ProceduralSky_get_texture_size);
		}
		
		protected void _thread_done(Image@ image) {
			ptr.godot_icall(bindings::id_ProceduralSky__thread_done, image);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ProceduralSky)).ptr();
		}
		
	}
	
	class Resource : Reference {
		
		
		protected void _setup_local_to_scene() {
			
		}
		
		void set_path(const String &in path) {
			ptr.godot_icall(bindings::id_Resource_set_path, path);
		}
		
		void take_over_path(const String &in path) {
			ptr.godot_icall(bindings::id_Resource_take_over_path, path);
		}
		
		String get_path() const {
			return ptr.godot_icall(bindings::id_Resource_get_path);
		}
		
		void set_name(const String &in name) {
			ptr.godot_icall(bindings::id_Resource_set_name, name);
		}
		
		String get_name() const {
			return ptr.godot_icall(bindings::id_Resource_get_name);
		}
		
		RID get_rid() const {
			return ptr.godot_icall(bindings::id_Resource_get_rid);
		}
		
		void set_local_to_scene(bool enable) {
			ptr.godot_icall(bindings::id_Resource_set_local_to_scene, enable);
		}
		
		bool is_local_to_scene() const {
			return ptr.godot_icall(bindings::id_Resource_is_local_to_scene);
		}
		
		Node@ get_local_scene() const {
			Node ret = ptr.godot_icall(bindings::id_Resource_get_local_scene);
			return  ret;
		}
		
		void setup_local_to_scene() {
			ptr.godot_icall(bindings::id_Resource_setup_local_to_scene);
		}
		
		Resource@ duplicate(bool subresources) const {
			Resource ret = ptr.godot_icall(bindings::id_Resource_duplicate, subresources);
			return  ret;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Resource)).ptr();
		}
		
	}
	
	class _ResourceSaver : Object {
		
		
		int save(const String &in path, Resource@ resource, int flags) {
			return ptr.godot_icall(bindings::id__ResourceSaver_save, path, resource, flags);
		}
		
		PoolStringArray get_recognized_extensions(Resource@ type) {
			return ptr.godot_icall(bindings::id__ResourceSaver_get_recognized_extensions, type);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id__ResourceSaver);
		}
		
	}
	
	class VisibilityNotifier : Spatial {
		
		
		void set_aabb(const AABB &in rect) {
			ptr.godot_icall(bindings::id_VisibilityNotifier_set_aabb, rect);
		}
		
		AABB get_aabb() const {
			return ptr.godot_icall(bindings::id_VisibilityNotifier_get_aabb);
		}
		
		bool is_on_screen() const {
			return ptr.godot_icall(bindings::id_VisibilityNotifier_is_on_screen);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_VisibilityNotifier);
		}
		
	}
	
	class RemoteTransform : Spatial {
		
		
		void set_remote_node(const NodePath &in path) {
			ptr.godot_icall(bindings::id_RemoteTransform_set_remote_node, path);
		}
		
		NodePath get_remote_node() const {
			return ptr.godot_icall(bindings::id_RemoteTransform_get_remote_node);
		}
		
		void set_use_global_coordinates(bool use_global_coordinates) {
			ptr.godot_icall(bindings::id_RemoteTransform_set_use_global_coordinates, use_global_coordinates);
		}
		
		bool get_use_global_coordinates() const {
			return ptr.godot_icall(bindings::id_RemoteTransform_get_use_global_coordinates);
		}
		
		void set_update_position(bool update_remote_position) {
			ptr.godot_icall(bindings::id_RemoteTransform_set_update_position, update_remote_position);
		}
		
		bool get_update_position() const {
			return ptr.godot_icall(bindings::id_RemoteTransform_get_update_position);
		}
		
		void set_update_rotation(bool update_remote_rotation) {
			ptr.godot_icall(bindings::id_RemoteTransform_set_update_rotation, update_remote_rotation);
		}
		
		bool get_update_rotation() const {
			return ptr.godot_icall(bindings::id_RemoteTransform_get_update_rotation);
		}
		
		void set_update_scale(bool update_remote_scale) {
			ptr.godot_icall(bindings::id_RemoteTransform_set_update_scale, update_remote_scale);
		}
		
		bool get_update_scale() const {
			return ptr.godot_icall(bindings::id_RemoteTransform_get_update_scale);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_RemoteTransform);
		}
		
	}
	
	class VisualScriptSelect : VisualScriptNode {
		
		
		void set_typed(int type) {
			ptr.godot_icall(bindings::id_VisualScriptSelect_set_typed, type);
		}
		
		int get_typed() const {
			return ptr.godot_icall(bindings::id_VisualScriptSelect_get_typed);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptSelect)).ptr();
		}
		
	}
	
	class VisualScriptLocalVarSet : VisualScriptNode {
		
		
		void set_var_name(const String &in name) {
			ptr.godot_icall(bindings::id_VisualScriptLocalVarSet_set_var_name, name);
		}
		
		String get_var_name() const {
			return ptr.godot_icall(bindings::id_VisualScriptLocalVarSet_get_var_name);
		}
		
		void set_var_type(int type) {
			ptr.godot_icall(bindings::id_VisualScriptLocalVarSet_set_var_type, type);
		}
		
		int get_var_type() const {
			return ptr.godot_icall(bindings::id_VisualScriptLocalVarSet_get_var_type);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptLocalVarSet)).ptr();
		}
		
	}
	
	class ButtonGroup : Resource {
		
		
		BaseButton@ get_pressed_button() {
			BaseButton ret = ptr.godot_icall(bindings::id_ButtonGroup_get_pressed_button);
			return  ret;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ButtonGroup)).ptr();
		}
		
	}
	
	class HTTPRequest : Node {
		
		
		int request(const String &in url, const PoolStringArray &in custom_headers, bool ssl_validate_domain, int method, const String &in request_data) {
			return ptr.godot_icall(bindings::id_HTTPRequest_request, url, custom_headers, ssl_validate_domain, method, request_data);
		}
		
		void cancel_request() {
			ptr.godot_icall(bindings::id_HTTPRequest_cancel_request);
		}
		
		int get_http_client_status() const {
			return ptr.godot_icall(bindings::id_HTTPRequest_get_http_client_status);
		}
		
		void set_use_threads(bool enable) {
			ptr.godot_icall(bindings::id_HTTPRequest_set_use_threads, enable);
		}
		
		bool is_using_threads() const {
			return ptr.godot_icall(bindings::id_HTTPRequest_is_using_threads);
		}
		
		void set_body_size_limit(int bytes) {
			ptr.godot_icall(bindings::id_HTTPRequest_set_body_size_limit, bytes);
		}
		
		int get_body_size_limit() const {
			return ptr.godot_icall(bindings::id_HTTPRequest_get_body_size_limit);
		}
		
		void set_max_redirects(int amount) {
			ptr.godot_icall(bindings::id_HTTPRequest_set_max_redirects, amount);
		}
		
		int get_max_redirects() const {
			return ptr.godot_icall(bindings::id_HTTPRequest_get_max_redirects);
		}
		
		void set_download_file(const String &in path) {
			ptr.godot_icall(bindings::id_HTTPRequest_set_download_file, path);
		}
		
		String get_download_file() const {
			return ptr.godot_icall(bindings::id_HTTPRequest_get_download_file);
		}
		
		int get_downloaded_bytes() const {
			return ptr.godot_icall(bindings::id_HTTPRequest_get_downloaded_bytes);
		}
		
		int get_body_size() const {
			return ptr.godot_icall(bindings::id_HTTPRequest_get_body_size);
		}
		
		protected void _redirect_request(const String &in arg0) {
			ptr.godot_icall(bindings::id_HTTPRequest__redirect_request, arg0);
		}
		
		protected void _request_done(int arg0, int arg1, const PoolStringArray &in arg2, const PoolByteArray &in arg3) {
			ptr.godot_icall(bindings::id_HTTPRequest__request_done, arg0, arg1, arg2, arg3);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_HTTPRequest);
		}
		
	}
	
	class PhysicsShapeQueryResult : Reference {
		
		
		int get_result_count() const {
			return ptr.godot_icall(bindings::id_PhysicsShapeQueryResult_get_result_count);
		}
		
		RID get_result_rid(int idx) const {
			return ptr.godot_icall(bindings::id_PhysicsShapeQueryResult_get_result_rid, idx);
		}
		
		int get_result_object_id(int idx) const {
			return ptr.godot_icall(bindings::id_PhysicsShapeQueryResult_get_result_object_id, idx);
		}
		
		Object@ get_result_object(int idx) const {
			Object ret = ptr.godot_icall(bindings::id_PhysicsShapeQueryResult_get_result_object, idx);
			return  ret;
		}
		
		int get_result_object_shape(int idx) const {
			return ptr.godot_icall(bindings::id_PhysicsShapeQueryResult_get_result_object_shape, idx);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_PhysicsShapeQueryResult)).ptr();
		}
		
	}
	
	class AudioEffectLowShelfFilter : AudioEffectFilter {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectLowShelfFilter)).ptr();
		}
		
	}
	
	class ARVRPositionalTracker : Object {
		
		
		int get_type() const {
			return ptr.godot_icall(bindings::id_ARVRPositionalTracker_get_type);
		}
		
		String get_name() const {
			return ptr.godot_icall(bindings::id_ARVRPositionalTracker_get_name);
		}
		
		int get_joy_id() const {
			return ptr.godot_icall(bindings::id_ARVRPositionalTracker_get_joy_id);
		}
		
		bool get_tracks_orientation() const {
			return ptr.godot_icall(bindings::id_ARVRPositionalTracker_get_tracks_orientation);
		}
		
		Basis get_orientation() const {
			return ptr.godot_icall(bindings::id_ARVRPositionalTracker_get_orientation);
		}
		
		bool get_tracks_position() const {
			return ptr.godot_icall(bindings::id_ARVRPositionalTracker_get_tracks_position);
		}
		
		Vector3 get_position() const {
			return ptr.godot_icall(bindings::id_ARVRPositionalTracker_get_position);
		}
		
		int get_hand() const {
			return ptr.godot_icall(bindings::id_ARVRPositionalTracker_get_hand);
		}
		
		Transform get_transform(bool adjust_by_reference_frame) const {
			return ptr.godot_icall(bindings::id_ARVRPositionalTracker_get_transform, adjust_by_reference_frame);
		}
		
		protected void _set_type(int type) {
			ptr.godot_icall(bindings::id_ARVRPositionalTracker__set_type, type);
		}
		
		protected void _set_name(const String &in name) {
			ptr.godot_icall(bindings::id_ARVRPositionalTracker__set_name, name);
		}
		
		protected void _set_joy_id(int joy_id) {
			ptr.godot_icall(bindings::id_ARVRPositionalTracker__set_joy_id, joy_id);
		}
		
		protected void _set_orientation(const Basis &in orientation) {
			ptr.godot_icall(bindings::id_ARVRPositionalTracker__set_orientation, orientation);
		}
		
		protected void _set_rw_position(const Vector3 &in rw_position) {
			ptr.godot_icall(bindings::id_ARVRPositionalTracker__set_rw_position, rw_position);
		}
		
		float get_rumble() const {
			return ptr.godot_icall(bindings::id_ARVRPositionalTracker_get_rumble);
		}
		
		void set_rumble(float rumble) {
			ptr.godot_icall(bindings::id_ARVRPositionalTracker_set_rumble, rumble);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ARVRPositionalTracker);
		}
		
	}
	
	class FuncRef : Reference {
		
		
		Variant call_func() {
			return ptr.godot_icall(bindings::id_FuncRef_call_func);
		}
		
		void set_instance(Object@ instance) {
			ptr.godot_icall(bindings::id_FuncRef_set_instance, instance);
		}
		
		void set_function(const String &in name) {
			ptr.godot_icall(bindings::id_FuncRef_set_function, name);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_FuncRef)).ptr();
		}
		
	}
	
	class GridContainer : Container {
		
		
		void set_columns(int columns) {
			ptr.godot_icall(bindings::id_GridContainer_set_columns, columns);
		}
		
		int get_columns() const {
			return ptr.godot_icall(bindings::id_GridContainer_get_columns);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_GridContainer);
		}
		
	}
	
	class PopupMenu : Popup {
		
		
		protected void _gui_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_PopupMenu__gui_input, arg0);
		}
		
		void add_icon_item(Texture@ texture, const String &in label, int id, int accel) {
			ptr.godot_icall(bindings::id_PopupMenu_add_icon_item, texture, label, id, accel);
		}
		
		void add_item(const String &in label, int id, int accel) {
			ptr.godot_icall(bindings::id_PopupMenu_add_item, label, id, accel);
		}
		
		void add_icon_check_item(Texture@ texture, const String &in label, int id, int accel) {
			ptr.godot_icall(bindings::id_PopupMenu_add_icon_check_item, texture, label, id, accel);
		}
		
		void add_check_item(const String &in label, int id, int accel) {
			ptr.godot_icall(bindings::id_PopupMenu_add_check_item, label, id, accel);
		}
		
		void add_submenu_item(const String &in label, const String &in submenu, int id) {
			ptr.godot_icall(bindings::id_PopupMenu_add_submenu_item, label, submenu, id);
		}
		
		void add_icon_shortcut(Texture@ texture, ShortCut@ shortcut, int id, bool global) {
			ptr.godot_icall(bindings::id_PopupMenu_add_icon_shortcut, texture, shortcut, id, global);
		}
		
		void add_shortcut(ShortCut@ shortcut, int id, bool global) {
			ptr.godot_icall(bindings::id_PopupMenu_add_shortcut, shortcut, id, global);
		}
		
		void add_icon_check_shortcut(Texture@ texture, ShortCut@ shortcut, int id, bool global) {
			ptr.godot_icall(bindings::id_PopupMenu_add_icon_check_shortcut, texture, shortcut, id, global);
		}
		
		void add_check_shortcut(ShortCut@ shortcut, int id, bool global) {
			ptr.godot_icall(bindings::id_PopupMenu_add_check_shortcut, shortcut, id, global);
		}
		
		void set_item_text(int idx, const String &in text) {
			ptr.godot_icall(bindings::id_PopupMenu_set_item_text, idx, text);
		}
		
		void set_item_icon(int idx, Texture@ icon) {
			ptr.godot_icall(bindings::id_PopupMenu_set_item_icon, idx, icon);
		}
		
		void set_item_checked(int idx, bool checked) {
			ptr.godot_icall(bindings::id_PopupMenu_set_item_checked, idx, checked);
		}
		
		void set_item_id(int idx, int id) {
			ptr.godot_icall(bindings::id_PopupMenu_set_item_id, idx, id);
		}
		
		void set_item_accelerator(int idx, int accel) {
			ptr.godot_icall(bindings::id_PopupMenu_set_item_accelerator, idx, accel);
		}
		
		void set_item_metadata(int idx, const Variant &in metadata) {
			ptr.godot_icall(bindings::id_PopupMenu_set_item_metadata, idx, metadata);
		}
		
		void set_item_disabled(int idx, bool disabled) {
			ptr.godot_icall(bindings::id_PopupMenu_set_item_disabled, idx, disabled);
		}
		
		void set_item_submenu(int idx, const String &in submenu) {
			ptr.godot_icall(bindings::id_PopupMenu_set_item_submenu, idx, submenu);
		}
		
		void set_item_as_separator(int idx, bool enable) {
			ptr.godot_icall(bindings::id_PopupMenu_set_item_as_separator, idx, enable);
		}
		
		void set_item_as_checkable(int idx, bool enable) {
			ptr.godot_icall(bindings::id_PopupMenu_set_item_as_checkable, idx, enable);
		}
		
		void set_item_tooltip(int idx, const String &in tooltip) {
			ptr.godot_icall(bindings::id_PopupMenu_set_item_tooltip, idx, tooltip);
		}
		
		void set_item_shortcut(int idx, ShortCut@ shortcut, bool global) {
			ptr.godot_icall(bindings::id_PopupMenu_set_item_shortcut, idx, shortcut, global);
		}
		
		void set_item_multistate(int idx, int state) {
			ptr.godot_icall(bindings::id_PopupMenu_set_item_multistate, idx, state);
		}
		
		void toggle_item_checked(int idx) {
			ptr.godot_icall(bindings::id_PopupMenu_toggle_item_checked, idx);
		}
		
		void toggle_item_multistate(int idx) {
			ptr.godot_icall(bindings::id_PopupMenu_toggle_item_multistate, idx);
		}
		
		String get_item_text(int idx) const {
			return ptr.godot_icall(bindings::id_PopupMenu_get_item_text, idx);
		}
		
		Texture@ get_item_icon(int idx) const {
			Texture ret = ptr.godot_icall(bindings::id_PopupMenu_get_item_icon, idx);
			return  ret;
		}
		
		bool is_item_checked(int idx) const {
			return ptr.godot_icall(bindings::id_PopupMenu_is_item_checked, idx);
		}
		
		int get_item_id(int idx) const {
			return ptr.godot_icall(bindings::id_PopupMenu_get_item_id, idx);
		}
		
		int get_item_index(int id) const {
			return ptr.godot_icall(bindings::id_PopupMenu_get_item_index, id);
		}
		
		int get_item_accelerator(int idx) const {
			return ptr.godot_icall(bindings::id_PopupMenu_get_item_accelerator, idx);
		}
		
		Variant get_item_metadata(int idx) const {
			return ptr.godot_icall(bindings::id_PopupMenu_get_item_metadata, idx);
		}
		
		bool is_item_disabled(int idx) const {
			return ptr.godot_icall(bindings::id_PopupMenu_is_item_disabled, idx);
		}
		
		String get_item_submenu(int idx) const {
			return ptr.godot_icall(bindings::id_PopupMenu_get_item_submenu, idx);
		}
		
		bool is_item_separator(int idx) const {
			return ptr.godot_icall(bindings::id_PopupMenu_is_item_separator, idx);
		}
		
		bool is_item_checkable(int idx) const {
			return ptr.godot_icall(bindings::id_PopupMenu_is_item_checkable, idx);
		}
		
		String get_item_tooltip(int idx) const {
			return ptr.godot_icall(bindings::id_PopupMenu_get_item_tooltip, idx);
		}
		
		ShortCut@ get_item_shortcut(int idx) const {
			ShortCut ret = ptr.godot_icall(bindings::id_PopupMenu_get_item_shortcut, idx);
			return  ret;
		}
		
		int get_item_count() const {
			return ptr.godot_icall(bindings::id_PopupMenu_get_item_count);
		}
		
		void remove_item(int idx) {
			ptr.godot_icall(bindings::id_PopupMenu_remove_item, idx);
		}
		
		void add_separator() {
			ptr.godot_icall(bindings::id_PopupMenu_add_separator);
		}
		
		void clear() {
			ptr.godot_icall(bindings::id_PopupMenu_clear);
		}
		
		protected void _set_items(const Array &in arg0) {
			ptr.godot_icall(bindings::id_PopupMenu__set_items, arg0);
		}
		
		protected Array _get_items() const {
			return ptr.godot_icall(bindings::id_PopupMenu__get_items);
		}
		
		void set_hide_on_item_selection(bool enable) {
			ptr.godot_icall(bindings::id_PopupMenu_set_hide_on_item_selection, enable);
		}
		
		bool is_hide_on_item_selection() const {
			return ptr.godot_icall(bindings::id_PopupMenu_is_hide_on_item_selection);
		}
		
		void set_hide_on_checkable_item_selection(bool enable) {
			ptr.godot_icall(bindings::id_PopupMenu_set_hide_on_checkable_item_selection, enable);
		}
		
		bool is_hide_on_checkable_item_selection() const {
			return ptr.godot_icall(bindings::id_PopupMenu_is_hide_on_checkable_item_selection);
		}
		
		void set_hide_on_state_item_selection(bool enable) {
			ptr.godot_icall(bindings::id_PopupMenu_set_hide_on_state_item_selection, enable);
		}
		
		bool is_hide_on_state_item_selection() const {
			return ptr.godot_icall(bindings::id_PopupMenu_is_hide_on_state_item_selection);
		}
		
		protected void _submenu_timeout() {
			ptr.godot_icall(bindings::id_PopupMenu__submenu_timeout);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_PopupMenu);
		}
		
	}
	
	class VisualInstance : Spatial {
		
		
		protected RID _get_visual_instance_rid() const {
			return ptr.godot_icall(bindings::id_VisualInstance__get_visual_instance_rid);
		}
		
		void set_base(const RID &in base) {
			ptr.godot_icall(bindings::id_VisualInstance_set_base, base);
		}
		
		void set_layer_mask(int mask) {
			ptr.godot_icall(bindings::id_VisualInstance_set_layer_mask, mask);
		}
		
		int get_layer_mask() const {
			return ptr.godot_icall(bindings::id_VisualInstance_get_layer_mask);
		}
		
		AABB get_transformed_aabb() const {
			return ptr.godot_icall(bindings::id_VisualInstance_get_transformed_aabb);
		}
		
		AABB get_aabb() const {
			return ptr.godot_icall(bindings::id_VisualInstance_get_aabb);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_VisualInstance);
		}
		
	}
	
	class VisualScriptCustomNode : VisualScriptNode {
		
		
		protected int _get_output_sequence_port_count() {
			return 0;
		}
		
		protected bool _has_input_sequence_port() {
			return false;
		}
		
		protected String _get_output_sequence_port_text(int idx) {
			return String();
		}
		
		protected int _get_input_value_port_count() {
			return 0;
		}
		
		protected int _get_output_value_port_count() {
			return 0;
		}
		
		protected int _get_input_value_port_type(int idx) {
			return 0;
		}
		
		protected String _get_input_value_port_name(int idx) {
			return String();
		}
		
		protected int _get_output_value_port_type(int idx) {
			return 0;
		}
		
		protected String _get_output_value_port_name(int idx) {
			return String();
		}
		
		protected String _get_caption() {
			return String();
		}
		
		protected String _get_text() {
			return String();
		}
		
		protected String _get_category() {
			return String();
		}
		
		protected int _get_working_memory_size() {
			return 0;
		}
		
		protected void _step(const Array &in inputs, const Array &in outputs, int start_mode, const Array &in working_mem) {
			
		}
		
		protected void _script_changed() {
			ptr.godot_icall(bindings::id_VisualScriptCustomNode__script_changed);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptCustomNode)).ptr();
		}
		
	}
	
	class EncodedObjectAsID : Reference {
		
		
		void set_object_id(int id) {
			ptr.godot_icall(bindings::id_EncodedObjectAsID_set_object_id, id);
		}
		
		int get_object_id() const {
			return ptr.godot_icall(bindings::id_EncodedObjectAsID_get_object_id);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_EncodedObjectAsID)).ptr();
		}
		
	}
	
	class LinkButton : BaseButton {
		
		
		void set_text(const String &in text) {
			ptr.godot_icall(bindings::id_LinkButton_set_text, text);
		}
		
		String get_text() const {
			return ptr.godot_icall(bindings::id_LinkButton_get_text);
		}
		
		void set_underline_mode(int underline_mode) {
			ptr.godot_icall(bindings::id_LinkButton_set_underline_mode, underline_mode);
		}
		
		int get_underline_mode() const {
			return ptr.godot_icall(bindings::id_LinkButton_get_underline_mode);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_LinkButton);
		}
		
	}
	
	class AudioStreamPlayer : Node {
		
		
		void set_stream(AudioStream@ stream) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer_set_stream, stream);
		}
		
		AudioStream@ get_stream() const {
			AudioStream ret = ptr.godot_icall(bindings::id_AudioStreamPlayer_get_stream);
			return  ret;
		}
		
		void set_volume_db(float volume_db) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer_set_volume_db, volume_db);
		}
		
		float get_volume_db() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer_get_volume_db);
		}
		
		void play(float from_position) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer_play, from_position);
		}
		
		void seek(float to_position) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer_seek, to_position);
		}
		
		void stop() {
			ptr.godot_icall(bindings::id_AudioStreamPlayer_stop);
		}
		
		bool is_playing() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer_is_playing);
		}
		
		float get_playback_position() {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer_get_playback_position);
		}
		
		void set_bus(const String &in bus) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer_set_bus, bus);
		}
		
		String get_bus() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer_get_bus);
		}
		
		void set_autoplay(bool enable) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer_set_autoplay, enable);
		}
		
		bool is_autoplay_enabled() {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer_is_autoplay_enabled);
		}
		
		void set_mix_target(int mix_target) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer_set_mix_target, mix_target);
		}
		
		int get_mix_target() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer_get_mix_target);
		}
		
		protected void _set_playing(bool enable) {
			ptr.godot_icall(bindings::id_AudioStreamPlayer__set_playing, enable);
		}
		
		protected bool _is_active() const {
			return ptr.godot_icall(bindings::id_AudioStreamPlayer__is_active);
		}
		
		protected void _bus_layout_changed() {
			ptr.godot_icall(bindings::id_AudioStreamPlayer__bus_layout_changed);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_AudioStreamPlayer);
		}
		
	}
	
	class StyleBoxTexture : StyleBox {
		
		
		void set_texture(Resource@ texture) {
			ptr.godot_icall(bindings::id_StyleBoxTexture_set_texture, texture);
		}
		
		Resource@ get_texture() const {
			Resource ret = ptr.godot_icall(bindings::id_StyleBoxTexture_get_texture);
			return  ret;
		}
		
		void set_normal_map(Resource@ normal_map) {
			ptr.godot_icall(bindings::id_StyleBoxTexture_set_normal_map, normal_map);
		}
		
		Resource@ get_normal_map() const {
			Resource ret = ptr.godot_icall(bindings::id_StyleBoxTexture_get_normal_map);
			return  ret;
		}
		
		void set_margin_size(int margin, float size) {
			ptr.godot_icall(bindings::id_StyleBoxTexture_set_margin_size, margin, size);
		}
		
		float get_margin_size(int margin) const {
			return ptr.godot_icall(bindings::id_StyleBoxTexture_get_margin_size, margin);
		}
		
		void set_expand_margin_size(int margin, float size) {
			ptr.godot_icall(bindings::id_StyleBoxTexture_set_expand_margin_size, margin, size);
		}
		
		void set_expand_margin_all(float size) {
			ptr.godot_icall(bindings::id_StyleBoxTexture_set_expand_margin_all, size);
		}
		
		void set_expand_margin_individual(float size_left, float size_top, float size_right, float size_bottom) {
			ptr.godot_icall(bindings::id_StyleBoxTexture_set_expand_margin_individual, size_left, size_top, size_right, size_bottom);
		}
		
		float get_expand_margin_size(int margin) const {
			return ptr.godot_icall(bindings::id_StyleBoxTexture_get_expand_margin_size, margin);
		}
		
		void set_region_rect(const Rect2 &in region) {
			ptr.godot_icall(bindings::id_StyleBoxTexture_set_region_rect, region);
		}
		
		Rect2 get_region_rect() const {
			return ptr.godot_icall(bindings::id_StyleBoxTexture_get_region_rect);
		}
		
		void set_draw_center(bool enable) {
			ptr.godot_icall(bindings::id_StyleBoxTexture_set_draw_center, enable);
		}
		
		bool is_draw_center_enabled() const {
			return ptr.godot_icall(bindings::id_StyleBoxTexture_is_draw_center_enabled);
		}
		
		void set_modulate(const Color &in color) {
			ptr.godot_icall(bindings::id_StyleBoxTexture_set_modulate, color);
		}
		
		Color get_modulate() const {
			return ptr.godot_icall(bindings::id_StyleBoxTexture_get_modulate);
		}
		
		void set_h_axis_stretch_mode(int mode) {
			ptr.godot_icall(bindings::id_StyleBoxTexture_set_h_axis_stretch_mode, mode);
		}
		
		int get_h_axis_stretch_mode() const {
			return ptr.godot_icall(bindings::id_StyleBoxTexture_get_h_axis_stretch_mode);
		}
		
		void set_v_axis_stretch_mode(int mode) {
			ptr.godot_icall(bindings::id_StyleBoxTexture_set_v_axis_stretch_mode, mode);
		}
		
		int get_v_axis_stretch_mode() const {
			return ptr.godot_icall(bindings::id_StyleBoxTexture_get_v_axis_stretch_mode);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_StyleBoxTexture)).ptr();
		}
		
	}
	
	class CanvasItem : Node {
		
		
		protected void _draw() {
			
		}
		
		protected void _toplevel_raise_self() {
			ptr.godot_icall(bindings::id_CanvasItem__toplevel_raise_self);
		}
		
		protected void _update_callback() {
			ptr.godot_icall(bindings::id_CanvasItem__update_callback);
		}
		
		protected void _edit_set_state(const Dictionary &in state) {
			ptr.godot_icall(bindings::id_CanvasItem__edit_set_state, state);
		}
		
		protected Dictionary _edit_get_state() const {
			return ptr.godot_icall(bindings::id_CanvasItem__edit_get_state);
		}
		
		protected void _edit_set_position(const Vector2 &in position) {
			ptr.godot_icall(bindings::id_CanvasItem__edit_set_position, position);
		}
		
		protected Vector2 _edit_get_position() const {
			return ptr.godot_icall(bindings::id_CanvasItem__edit_get_position);
		}
		
		protected bool _edit_use_position() const {
			return ptr.godot_icall(bindings::id_CanvasItem__edit_use_position);
		}
		
		protected void _edit_set_rect(const Rect2 &in rect) {
			ptr.godot_icall(bindings::id_CanvasItem__edit_set_rect, rect);
		}
		
		protected Rect2 _edit_get_rect() const {
			return ptr.godot_icall(bindings::id_CanvasItem__edit_get_rect);
		}
		
		protected bool _edit_use_rect() const {
			return ptr.godot_icall(bindings::id_CanvasItem__edit_use_rect);
		}
		
		protected Rect2 _edit_get_item_and_children_rect() const {
			return ptr.godot_icall(bindings::id_CanvasItem__edit_get_item_and_children_rect);
		}
		
		protected void _edit_set_rotation(float degrees) {
			ptr.godot_icall(bindings::id_CanvasItem__edit_set_rotation, degrees);
		}
		
		protected float _edit_get_rotation() const {
			return ptr.godot_icall(bindings::id_CanvasItem__edit_get_rotation);
		}
		
		protected bool _edit_use_rotation() const {
			return ptr.godot_icall(bindings::id_CanvasItem__edit_use_rotation);
		}
		
		protected void _edit_set_pivot(const Vector2 &in pivot) {
			ptr.godot_icall(bindings::id_CanvasItem__edit_set_pivot, pivot);
		}
		
		protected Vector2 _edit_get_pivot() const {
			return ptr.godot_icall(bindings::id_CanvasItem__edit_get_pivot);
		}
		
		protected bool _edit_use_pivot() const {
			return ptr.godot_icall(bindings::id_CanvasItem__edit_use_pivot);
		}
		
		RID get_canvas_item() const {
			return ptr.godot_icall(bindings::id_CanvasItem_get_canvas_item);
		}
		
		void set_visible(bool visible) {
			ptr.godot_icall(bindings::id_CanvasItem_set_visible, visible);
		}
		
		bool is_visible() const {
			return ptr.godot_icall(bindings::id_CanvasItem_is_visible);
		}
		
		bool is_visible_in_tree() const {
			return ptr.godot_icall(bindings::id_CanvasItem_is_visible_in_tree);
		}
		
		void show() {
			ptr.godot_icall(bindings::id_CanvasItem_show);
		}
		
		void hide() {
			ptr.godot_icall(bindings::id_CanvasItem_hide);
		}
		
		void update() {
			ptr.godot_icall(bindings::id_CanvasItem_update);
		}
		
		void set_as_toplevel(bool enable) {
			ptr.godot_icall(bindings::id_CanvasItem_set_as_toplevel, enable);
		}
		
		bool is_set_as_toplevel() const {
			return ptr.godot_icall(bindings::id_CanvasItem_is_set_as_toplevel);
		}
		
		void set_light_mask(int light_mask) {
			ptr.godot_icall(bindings::id_CanvasItem_set_light_mask, light_mask);
		}
		
		int get_light_mask() const {
			return ptr.godot_icall(bindings::id_CanvasItem_get_light_mask);
		}
		
		void set_modulate(const Color &in modulate) {
			ptr.godot_icall(bindings::id_CanvasItem_set_modulate, modulate);
		}
		
		Color get_modulate() const {
			return ptr.godot_icall(bindings::id_CanvasItem_get_modulate);
		}
		
		void set_self_modulate(const Color &in self_modulate) {
			ptr.godot_icall(bindings::id_CanvasItem_set_self_modulate, self_modulate);
		}
		
		Color get_self_modulate() const {
			return ptr.godot_icall(bindings::id_CanvasItem_get_self_modulate);
		}
		
		void set_draw_behind_parent(bool enable) {
			ptr.godot_icall(bindings::id_CanvasItem_set_draw_behind_parent, enable);
		}
		
		bool is_draw_behind_parent_enabled() const {
			return ptr.godot_icall(bindings::id_CanvasItem_is_draw_behind_parent_enabled);
		}
		
		protected void _set_on_top(bool on_top) {
			ptr.godot_icall(bindings::id_CanvasItem__set_on_top, on_top);
		}
		
		protected bool _is_on_top() const {
			return ptr.godot_icall(bindings::id_CanvasItem__is_on_top);
		}
		
		void draw_line(const Vector2 &in From, const Vector2 &in to, const Color &in color, float width, bool antialiased) {
			ptr.godot_icall(bindings::id_CanvasItem_draw_line, From, to, color, width, antialiased);
		}
		
		void draw_polyline(const PoolVector2Array &in points, const Color &in color, float width, bool antialiased) {
			ptr.godot_icall(bindings::id_CanvasItem_draw_polyline, points, color, width, antialiased);
		}
		
		void draw_polyline_colors(const PoolVector2Array &in points, const PoolColorArray &in colors, float width, bool antialiased) {
			ptr.godot_icall(bindings::id_CanvasItem_draw_polyline_colors, points, colors, width, antialiased);
		}
		
		void draw_multiline(const PoolVector2Array &in points, const Color &in color, float width, bool antialiased) {
			ptr.godot_icall(bindings::id_CanvasItem_draw_multiline, points, color, width, antialiased);
		}
		
		void draw_multiline_colors(const PoolVector2Array &in points, const PoolColorArray &in colors, float width, bool antialiased) {
			ptr.godot_icall(bindings::id_CanvasItem_draw_multiline_colors, points, colors, width, antialiased);
		}
		
		void draw_rect(const Rect2 &in rect, const Color &in color, bool filled) {
			ptr.godot_icall(bindings::id_CanvasItem_draw_rect, rect, color, filled);
		}
		
		void draw_circle(const Vector2 &in position, float radius, const Color &in color) {
			ptr.godot_icall(bindings::id_CanvasItem_draw_circle, position, radius, color);
		}
		
		void draw_texture(Texture@ texture, const Vector2 &in position, const Color &in modulate, Texture@ normal_map) {
			ptr.godot_icall(bindings::id_CanvasItem_draw_texture, texture, position, modulate, normal_map);
		}
		
		void draw_texture_rect(Texture@ texture, const Rect2 &in rect, bool tile, const Color &in modulate, bool transpose, Texture@ normal_map) {
			ptr.godot_icall(bindings::id_CanvasItem_draw_texture_rect, texture, rect, tile, modulate, transpose, normal_map);
		}
		
		void draw_texture_rect_region(Texture@ texture, const Rect2 &in rect, const Rect2 &in src_rect, const Color &in modulate, bool transpose, Texture@ normal_map, bool clip_uv) {
			ptr.godot_icall(bindings::id_CanvasItem_draw_texture_rect_region, texture, rect, src_rect, modulate, transpose, normal_map, clip_uv);
		}
		
		void draw_style_box(StyleBox@ style_box, const Rect2 &in rect) {
			ptr.godot_icall(bindings::id_CanvasItem_draw_style_box, style_box, rect);
		}
		
		void draw_primitive(const PoolVector2Array &in points, const PoolColorArray &in colors, const PoolVector2Array &in uvs, Texture@ texture, float width, Texture@ normal_map) {
			ptr.godot_icall(bindings::id_CanvasItem_draw_primitive, points, colors, uvs, texture, width, normal_map);
		}
		
		void draw_polygon(const PoolVector2Array &in points, const PoolColorArray &in colors, const PoolVector2Array &in uvs, Texture@ texture, Texture@ normal_map, bool antialiased) {
			ptr.godot_icall(bindings::id_CanvasItem_draw_polygon, points, colors, uvs, texture, normal_map, antialiased);
		}
		
		void draw_colored_polygon(const PoolVector2Array &in points, const Color &in color, const PoolVector2Array &in uvs, Texture@ texture, Texture@ normal_map, bool antialiased) {
			ptr.godot_icall(bindings::id_CanvasItem_draw_colored_polygon, points, color, uvs, texture, normal_map, antialiased);
		}
		
		void draw_string(Font@ font, const Vector2 &in position, const String &in text, const Color &in modulate, int clip_w) {
			ptr.godot_icall(bindings::id_CanvasItem_draw_string, font, position, text, modulate, clip_w);
		}
		
		float draw_char(Font@ font, const Vector2 &in position, const String &in char, const String &in next, const Color &in modulate) {
			return ptr.godot_icall(bindings::id_CanvasItem_draw_char, font, position, char, next, modulate);
		}
		
		void draw_set_transform(const Vector2 &in position, float rotation, const Vector2 &in scale) {
			ptr.godot_icall(bindings::id_CanvasItem_draw_set_transform, position, rotation, scale);
		}
		
		void draw_set_transform_matrix(const Transform2D &in xform) {
			ptr.godot_icall(bindings::id_CanvasItem_draw_set_transform_matrix, xform);
		}
		
		Transform2D get_transform() const {
			return ptr.godot_icall(bindings::id_CanvasItem_get_transform);
		}
		
		Transform2D get_global_transform() const {
			return ptr.godot_icall(bindings::id_CanvasItem_get_global_transform);
		}
		
		Transform2D get_global_transform_with_canvas() const {
			return ptr.godot_icall(bindings::id_CanvasItem_get_global_transform_with_canvas);
		}
		
		Transform2D get_viewport_transform() const {
			return ptr.godot_icall(bindings::id_CanvasItem_get_viewport_transform);
		}
		
		Rect2 get_viewport_rect() const {
			return ptr.godot_icall(bindings::id_CanvasItem_get_viewport_rect);
		}
		
		Transform2D get_canvas_transform() const {
			return ptr.godot_icall(bindings::id_CanvasItem_get_canvas_transform);
		}
		
		Vector2 get_local_mouse_position() const {
			return ptr.godot_icall(bindings::id_CanvasItem_get_local_mouse_position);
		}
		
		Vector2 get_global_mouse_position() const {
			return ptr.godot_icall(bindings::id_CanvasItem_get_global_mouse_position);
		}
		
		RID get_canvas() const {
			return ptr.godot_icall(bindings::id_CanvasItem_get_canvas);
		}
		
		World2D@ get_world_2d() const {
			World2D ret = ptr.godot_icall(bindings::id_CanvasItem_get_world_2d);
			return  ret;
		}
		
		void set_material(Material@ material) {
			ptr.godot_icall(bindings::id_CanvasItem_set_material, material);
		}
		
		Material@ get_material() const {
			Material ret = ptr.godot_icall(bindings::id_CanvasItem_get_material);
			return  ret;
		}
		
		void set_use_parent_material(bool enable) {
			ptr.godot_icall(bindings::id_CanvasItem_set_use_parent_material, enable);
		}
		
		bool get_use_parent_material() const {
			return ptr.godot_icall(bindings::id_CanvasItem_get_use_parent_material);
		}
		
		void set_notify_local_transform(bool enable) {
			ptr.godot_icall(bindings::id_CanvasItem_set_notify_local_transform, enable);
		}
		
		bool is_local_transform_notification_enabled() const {
			return ptr.godot_icall(bindings::id_CanvasItem_is_local_transform_notification_enabled);
		}
		
		void set_notify_transform(bool enable) {
			ptr.godot_icall(bindings::id_CanvasItem_set_notify_transform, enable);
		}
		
		bool is_transform_notification_enabled() const {
			return ptr.godot_icall(bindings::id_CanvasItem_is_transform_notification_enabled);
		}
		
		Vector2 make_canvas_position_local(const Vector2 &in screen_point) const {
			return ptr.godot_icall(bindings::id_CanvasItem_make_canvas_position_local, screen_point);
		}
		
		InputEvent@ make_input_local(InputEvent@ event) const {
			InputEvent ret = ptr.godot_icall(bindings::id_CanvasItem_make_input_local, event);
			return  ret;
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_CanvasItem);
		}
		
	}
	
	class _Geometry : Object {
		
		
		Array build_box_planes(const Vector3 &in extents) {
			return ptr.godot_icall(bindings::id__Geometry_build_box_planes, extents);
		}
		
		Array build_cylinder_planes(float radius, float height, int sides, int axis) {
			return ptr.godot_icall(bindings::id__Geometry_build_cylinder_planes, radius, height, sides, axis);
		}
		
		Array build_capsule_planes(float radius, float height, int sides, int lats, int axis) {
			return ptr.godot_icall(bindings::id__Geometry_build_capsule_planes, radius, height, sides, lats, axis);
		}
		
		float segment_intersects_circle(const Vector2 &in segment_from, const Vector2 &in segment_to, const Vector2 &in circle_position, float circle_radius) {
			return ptr.godot_icall(bindings::id__Geometry_segment_intersects_circle, segment_from, segment_to, circle_position, circle_radius);
		}
		
		Variant segment_intersects_segment_2d(const Vector2 &in from_a, const Vector2 &in to_a, const Vector2 &in from_b, const Vector2 &in to_b) {
			return ptr.godot_icall(bindings::id__Geometry_segment_intersects_segment_2d, from_a, to_a, from_b, to_b);
		}
		
		PoolVector2Array get_closest_points_between_segments_2d(const Vector2 &in p1, const Vector2 &in q1, const Vector2 &in p2, const Vector2 &in q2) {
			return ptr.godot_icall(bindings::id__Geometry_get_closest_points_between_segments_2d, p1, q1, p2, q2);
		}
		
		PoolVector3Array get_closest_points_between_segments(const Vector3 &in p1, const Vector3 &in p2, const Vector3 &in q1, const Vector3 &in q2) {
			return ptr.godot_icall(bindings::id__Geometry_get_closest_points_between_segments, p1, p2, q1, q2);
		}
		
		Vector2 get_closest_point_to_segment_2d(const Vector2 &in point, const Vector2 &in s1, const Vector2 &in s2) {
			return ptr.godot_icall(bindings::id__Geometry_get_closest_point_to_segment_2d, point, s1, s2);
		}
		
		Vector3 get_closest_point_to_segment(const Vector3 &in point, const Vector3 &in s1, const Vector3 &in s2) {
			return ptr.godot_icall(bindings::id__Geometry_get_closest_point_to_segment, point, s1, s2);
		}
		
		Vector2 get_closest_point_to_segment_uncapped_2d(const Vector2 &in point, const Vector2 &in s1, const Vector2 &in s2) {
			return ptr.godot_icall(bindings::id__Geometry_get_closest_point_to_segment_uncapped_2d, point, s1, s2);
		}
		
		Vector3 get_closest_point_to_segment_uncapped(const Vector3 &in point, const Vector3 &in s1, const Vector3 &in s2) {
			return ptr.godot_icall(bindings::id__Geometry_get_closest_point_to_segment_uncapped, point, s1, s2);
		}
		
		int get_uv84_normal_bit(const Vector3 &in normal) {
			return ptr.godot_icall(bindings::id__Geometry_get_uv84_normal_bit, normal);
		}
		
		Variant ray_intersects_triangle(const Vector3 &in From, const Vector3 &in dir, const Vector3 &in a, const Vector3 &in b, const Vector3 &in c) {
			return ptr.godot_icall(bindings::id__Geometry_ray_intersects_triangle, From, dir, a, b, c);
		}
		
		Variant segment_intersects_triangle(const Vector3 &in From, const Vector3 &in to, const Vector3 &in a, const Vector3 &in b, const Vector3 &in c) {
			return ptr.godot_icall(bindings::id__Geometry_segment_intersects_triangle, From, to, a, b, c);
		}
		
		PoolVector3Array segment_intersects_sphere(const Vector3 &in From, const Vector3 &in to, const Vector3 &in sphere_position, float sphere_radius) {
			return ptr.godot_icall(bindings::id__Geometry_segment_intersects_sphere, From, to, sphere_position, sphere_radius);
		}
		
		PoolVector3Array segment_intersects_cylinder(const Vector3 &in From, const Vector3 &in to, float height, float radius) {
			return ptr.godot_icall(bindings::id__Geometry_segment_intersects_cylinder, From, to, height, radius);
		}
		
		PoolVector3Array segment_intersects_convex(const Vector3 &in From, const Vector3 &in to, const Array &in planes) {
			return ptr.godot_icall(bindings::id__Geometry_segment_intersects_convex, From, to, planes);
		}
		
		bool point_is_inside_triangle(const Vector2 &in point, const Vector2 &in a, const Vector2 &in b, const Vector2 &in c) const {
			return ptr.godot_icall(bindings::id__Geometry_point_is_inside_triangle, point, a, b, c);
		}
		
		PoolIntArray triangulate_polygon(const PoolVector2Array &in polygon) {
			return ptr.godot_icall(bindings::id__Geometry_triangulate_polygon, polygon);
		}
		
		PoolVector2Array convex_hull_2d(const PoolVector2Array &in points) {
			return ptr.godot_icall(bindings::id__Geometry_convex_hull_2d, points);
		}
		
		PoolVector3Array clip_polygon(const PoolVector3Array &in points, const Plane &in plane) {
			return ptr.godot_icall(bindings::id__Geometry_clip_polygon, points, plane);
		}
		
		Dictionary make_atlas(const PoolVector2Array &in sizes) {
			return ptr.godot_icall(bindings::id__Geometry_make_atlas, sizes);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id__Geometry);
		}
		
	}
	
	class VisualServer : Object {
		
		
		void force_sync() {
			ptr.godot_icall(bindings::id_VisualServer_force_sync);
		}
		
		void force_draw(bool swap_buffers) {
			ptr.godot_icall(bindings::id_VisualServer_force_draw, swap_buffers);
		}
		
		RID texture_create() {
			return ptr.godot_icall(bindings::id_VisualServer_texture_create);
		}
		
		RID texture_create_from_image(Image@ image, int flags) {
			return ptr.godot_icall(bindings::id_VisualServer_texture_create_from_image, image, flags);
		}
		
		void texture_allocate(const RID &in texture, int width, int height, int format, int flags) {
			ptr.godot_icall(bindings::id_VisualServer_texture_allocate, texture, width, height, format, flags);
		}
		
		void texture_set_data(const RID &in texture, Image@ image, int cube_side) {
			ptr.godot_icall(bindings::id_VisualServer_texture_set_data, texture, image, cube_side);
		}
		
		Image@ texture_get_data(const RID &in texture, int cube_side) const {
			Image ret = ptr.godot_icall(bindings::id_VisualServer_texture_get_data, texture, cube_side);
			return  ret;
		}
		
		void texture_set_flags(const RID &in texture, int flags) {
			ptr.godot_icall(bindings::id_VisualServer_texture_set_flags, texture, flags);
		}
		
		int texture_get_flags(const RID &in texture) const {
			return ptr.godot_icall(bindings::id_VisualServer_texture_get_flags, texture);
		}
		
		int texture_get_format(const RID &in texture) const {
			return ptr.godot_icall(bindings::id_VisualServer_texture_get_format, texture);
		}
		
		int texture_get_texid(const RID &in texture) const {
			return ptr.godot_icall(bindings::id_VisualServer_texture_get_texid, texture);
		}
		
		int texture_get_width(const RID &in texture) const {
			return ptr.godot_icall(bindings::id_VisualServer_texture_get_width, texture);
		}
		
		int texture_get_height(const RID &in texture) const {
			return ptr.godot_icall(bindings::id_VisualServer_texture_get_height, texture);
		}
		
		void texture_set_size_override(const RID &in texture, int width, int height) {
			ptr.godot_icall(bindings::id_VisualServer_texture_set_size_override, texture, width, height);
		}
		
		void texture_set_path(const RID &in texture, const String &in path) {
			ptr.godot_icall(bindings::id_VisualServer_texture_set_path, texture, path);
		}
		
		String texture_get_path(const RID &in texture) const {
			return ptr.godot_icall(bindings::id_VisualServer_texture_get_path, texture);
		}
		
		void texture_set_shrink_all_x2_on_set_data(bool shrink) {
			ptr.godot_icall(bindings::id_VisualServer_texture_set_shrink_all_x2_on_set_data, shrink);
		}
		
		Array texture_debug_usage() {
			return ptr.godot_icall(bindings::id_VisualServer_texture_debug_usage);
		}
		
		void textures_keep_original(bool enable) {
			ptr.godot_icall(bindings::id_VisualServer_textures_keep_original, enable);
		}
		
		RID sky_create() {
			return ptr.godot_icall(bindings::id_VisualServer_sky_create);
		}
		
		void sky_set_texture(const RID &in sky, const RID &in cube_map, int radiance_size) {
			ptr.godot_icall(bindings::id_VisualServer_sky_set_texture, sky, cube_map, radiance_size);
		}
		
		RID shader_create() {
			return ptr.godot_icall(bindings::id_VisualServer_shader_create);
		}
		
		void shader_set_code(const RID &in shader, const String &in code) {
			ptr.godot_icall(bindings::id_VisualServer_shader_set_code, shader, code);
		}
		
		String shader_get_code(const RID &in shader) const {
			return ptr.godot_icall(bindings::id_VisualServer_shader_get_code, shader);
		}
		
		Array shader_get_param_list(const RID &in shader) const {
			return ptr.godot_icall(bindings::id_VisualServer_shader_get_param_list, shader);
		}
		
		void shader_set_default_texture_param(const RID &in shader, const String &in name, const RID &in texture) {
			ptr.godot_icall(bindings::id_VisualServer_shader_set_default_texture_param, shader, name, texture);
		}
		
		RID shader_get_default_texture_param(const RID &in shader, const String &in name) const {
			return ptr.godot_icall(bindings::id_VisualServer_shader_get_default_texture_param, shader, name);
		}
		
		RID material_create() {
			return ptr.godot_icall(bindings::id_VisualServer_material_create);
		}
		
		void material_set_shader(const RID &in shader_material, const RID &in shader) {
			ptr.godot_icall(bindings::id_VisualServer_material_set_shader, shader_material, shader);
		}
		
		RID material_get_shader(const RID &in shader_material) const {
			return ptr.godot_icall(bindings::id_VisualServer_material_get_shader, shader_material);
		}
		
		void material_set_param(const RID &in material, const String &in parameter, const Variant &in value) {
			ptr.godot_icall(bindings::id_VisualServer_material_set_param, material, parameter, value);
		}
		
		Variant material_get_param(const RID &in material, const String &in parameter) const {
			return ptr.godot_icall(bindings::id_VisualServer_material_get_param, material, parameter);
		}
		
		void material_set_render_priority(const RID &in material, int priority) {
			ptr.godot_icall(bindings::id_VisualServer_material_set_render_priority, material, priority);
		}
		
		void material_set_line_width(const RID &in material, float width) {
			ptr.godot_icall(bindings::id_VisualServer_material_set_line_width, material, width);
		}
		
		void material_set_next_pass(const RID &in material, const RID &in next_material) {
			ptr.godot_icall(bindings::id_VisualServer_material_set_next_pass, material, next_material);
		}
		
		RID mesh_create() {
			return ptr.godot_icall(bindings::id_VisualServer_mesh_create);
		}
		
		void mesh_add_surface_from_arrays(const RID &in mesh, int primtive, const Array &in arrays, const Array &in blend_shapes, int compress_format) {
			ptr.godot_icall(bindings::id_VisualServer_mesh_add_surface_from_arrays, mesh, primtive, arrays, blend_shapes, compress_format);
		}
		
		void mesh_set_blend_shape_count(const RID &in mesh, int amount) {
			ptr.godot_icall(bindings::id_VisualServer_mesh_set_blend_shape_count, mesh, amount);
		}
		
		int mesh_get_blend_shape_count(const RID &in mesh) const {
			return ptr.godot_icall(bindings::id_VisualServer_mesh_get_blend_shape_count, mesh);
		}
		
		void mesh_set_blend_shape_mode(const RID &in mesh, int mode) {
			ptr.godot_icall(bindings::id_VisualServer_mesh_set_blend_shape_mode, mesh, mode);
		}
		
		int mesh_get_blend_shape_mode(const RID &in mesh) const {
			return ptr.godot_icall(bindings::id_VisualServer_mesh_get_blend_shape_mode, mesh);
		}
		
		void mesh_surface_set_material(const RID &in mesh, int surface, const RID &in material) {
			ptr.godot_icall(bindings::id_VisualServer_mesh_surface_set_material, mesh, surface, material);
		}
		
		RID mesh_surface_get_material(const RID &in mesh, int surface) const {
			return ptr.godot_icall(bindings::id_VisualServer_mesh_surface_get_material, mesh, surface);
		}
		
		int mesh_surface_get_array_len(const RID &in mesh, int surface) const {
			return ptr.godot_icall(bindings::id_VisualServer_mesh_surface_get_array_len, mesh, surface);
		}
		
		int mesh_surface_get_array_index_len(const RID &in mesh, int surface) const {
			return ptr.godot_icall(bindings::id_VisualServer_mesh_surface_get_array_index_len, mesh, surface);
		}
		
		PoolByteArray mesh_surface_get_array(const RID &in mesh, int surface) const {
			return ptr.godot_icall(bindings::id_VisualServer_mesh_surface_get_array, mesh, surface);
		}
		
		PoolByteArray mesh_surface_get_index_array(const RID &in mesh, int surface) const {
			return ptr.godot_icall(bindings::id_VisualServer_mesh_surface_get_index_array, mesh, surface);
		}
		
		Array mesh_surface_get_arrays(const RID &in mesh, int surface) const {
			return ptr.godot_icall(bindings::id_VisualServer_mesh_surface_get_arrays, mesh, surface);
		}
		
		Array mesh_surface_get_blend_shape_arrays(const RID &in mesh, int surface) const {
			return ptr.godot_icall(bindings::id_VisualServer_mesh_surface_get_blend_shape_arrays, mesh, surface);
		}
		
		int mesh_surface_get_format(const RID &in mesh, int surface) const {
			return ptr.godot_icall(bindings::id_VisualServer_mesh_surface_get_format, mesh, surface);
		}
		
		int mesh_surface_get_primitive_type(const RID &in mesh, int surface) const {
			return ptr.godot_icall(bindings::id_VisualServer_mesh_surface_get_primitive_type, mesh, surface);
		}
		
		AABB mesh_surface_get_aabb(const RID &in mesh, int surface) const {
			return ptr.godot_icall(bindings::id_VisualServer_mesh_surface_get_aabb, mesh, surface);
		}
		
		Array mesh_surface_get_skeleton_aabb(const RID &in mesh, int surface) const {
			return ptr.godot_icall(bindings::id_VisualServer_mesh_surface_get_skeleton_aabb, mesh, surface);
		}
		
		void mesh_remove_surface(const RID &in mesh, int index) {
			ptr.godot_icall(bindings::id_VisualServer_mesh_remove_surface, mesh, index);
		}
		
		int mesh_get_surface_count(const RID &in mesh) const {
			return ptr.godot_icall(bindings::id_VisualServer_mesh_get_surface_count, mesh);
		}
		
		void mesh_set_custom_aabb(const RID &in mesh, const AABB &in aabb) {
			ptr.godot_icall(bindings::id_VisualServer_mesh_set_custom_aabb, mesh, aabb);
		}
		
		AABB mesh_get_custom_aabb(const RID &in mesh) const {
			return ptr.godot_icall(bindings::id_VisualServer_mesh_get_custom_aabb, mesh);
		}
		
		void mesh_clear(const RID &in mesh) {
			ptr.godot_icall(bindings::id_VisualServer_mesh_clear, mesh);
		}
		
		RID viewport_create() {
			return ptr.godot_icall(bindings::id_VisualServer_viewport_create);
		}
		
		void viewport_set_use_arvr(const RID &in viewport, bool use_arvr) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_use_arvr, viewport, use_arvr);
		}
		
		void viewport_set_size(const RID &in viewport, int width, int height) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_size, viewport, width, height);
		}
		
		void viewport_set_active(const RID &in viewport, bool active) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_active, viewport, active);
		}
		
		void viewport_set_parent_viewport(const RID &in viewport, const RID &in parent_viewport) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_parent_viewport, viewport, parent_viewport);
		}
		
		void viewport_attach_to_screen(const RID &in viewport, const Rect2 &in rect, int screen) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_attach_to_screen, viewport, rect, screen);
		}
		
		void viewport_detach(const RID &in viewport) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_detach, viewport);
		}
		
		void viewport_set_update_mode(const RID &in viewport, int update_mode) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_update_mode, viewport, update_mode);
		}
		
		void viewport_set_vflip(const RID &in viewport, bool enabled) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_vflip, viewport, enabled);
		}
		
		void viewport_set_clear_mode(const RID &in viewport, int clear_mode) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_clear_mode, viewport, clear_mode);
		}
		
		RID viewport_get_texture(const RID &in viewport) const {
			return ptr.godot_icall(bindings::id_VisualServer_viewport_get_texture, viewport);
		}
		
		void viewport_set_hide_scenario(const RID &in viewport, bool hidden) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_hide_scenario, viewport, hidden);
		}
		
		void viewport_set_hide_canvas(const RID &in viewport, bool hidden) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_hide_canvas, viewport, hidden);
		}
		
		void viewport_set_disable_environment(const RID &in viewport, bool disabled) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_disable_environment, viewport, disabled);
		}
		
		void viewport_set_disable_3d(const RID &in viewport, bool disabled) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_disable_3d, viewport, disabled);
		}
		
		void viewport_attach_camera(const RID &in viewport, const RID &in camera) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_attach_camera, viewport, camera);
		}
		
		void viewport_set_scenario(const RID &in viewport, const RID &in scenario) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_scenario, viewport, scenario);
		}
		
		void viewport_attach_canvas(const RID &in viewport, const RID &in canvas) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_attach_canvas, viewport, canvas);
		}
		
		void viewport_remove_canvas(const RID &in viewport, const RID &in canvas) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_remove_canvas, viewport, canvas);
		}
		
		void viewport_set_canvas_transform(const RID &in viewport, const RID &in canvas, const Transform2D &in offset) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_canvas_transform, viewport, canvas, offset);
		}
		
		void viewport_set_transparent_background(const RID &in viewport, bool enabled) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_transparent_background, viewport, enabled);
		}
		
		void viewport_set_global_canvas_transform(const RID &in viewport, const Transform2D &in transform) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_global_canvas_transform, viewport, transform);
		}
		
		void viewport_set_canvas_layer(const RID &in viewport, const RID &in canvas, int layer) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_canvas_layer, viewport, canvas, layer);
		}
		
		void viewport_set_shadow_atlas_size(const RID &in viewport, int size) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_shadow_atlas_size, viewport, size);
		}
		
		void viewport_set_shadow_atlas_quadrant_subdivision(const RID &in viewport, int quadrant, int subdivision) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_shadow_atlas_quadrant_subdivision, viewport, quadrant, subdivision);
		}
		
		void viewport_set_msaa(const RID &in viewport, int msaa) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_msaa, viewport, msaa);
		}
		
		void viewport_set_hdr(const RID &in viewport, bool enabled) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_hdr, viewport, enabled);
		}
		
		void viewport_set_usage(const RID &in viewport, int usage) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_usage, viewport, usage);
		}
		
		int viewport_get_render_info(const RID &in viewport, int info) {
			return ptr.godot_icall(bindings::id_VisualServer_viewport_get_render_info, viewport, info);
		}
		
		void viewport_set_debug_draw(const RID &in viewport, int draw) {
			ptr.godot_icall(bindings::id_VisualServer_viewport_set_debug_draw, viewport, draw);
		}
		
		RID canvas_create() {
			return ptr.godot_icall(bindings::id_VisualServer_canvas_create);
		}
		
		void canvas_set_item_mirroring(const RID &in canvas, const RID &in item, const Vector2 &in mirroring) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_set_item_mirroring, canvas, item, mirroring);
		}
		
		void canvas_set_modulate(const RID &in canvas, const Color &in color) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_set_modulate, canvas, color);
		}
		
		RID canvas_item_create() {
			return ptr.godot_icall(bindings::id_VisualServer_canvas_item_create);
		}
		
		void canvas_item_set_parent(const RID &in item, const RID &in parent) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_set_parent, item, parent);
		}
		
		void canvas_item_set_visible(const RID &in item, bool visible) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_set_visible, item, visible);
		}
		
		void canvas_item_set_light_mask(const RID &in item, int mask) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_set_light_mask, item, mask);
		}
		
		void canvas_item_set_transform(const RID &in item, const Transform2D &in transform) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_set_transform, item, transform);
		}
		
		void canvas_item_set_clip(const RID &in item, bool clip) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_set_clip, item, clip);
		}
		
		void canvas_item_set_distance_field_mode(const RID &in item, bool enabled) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_set_distance_field_mode, item, enabled);
		}
		
		void canvas_item_set_custom_rect(const RID &in item, bool use_custom_rect, const Rect2 &in rect) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_set_custom_rect, item, use_custom_rect, rect);
		}
		
		void canvas_item_set_modulate(const RID &in item, const Color &in color) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_set_modulate, item, color);
		}
		
		void canvas_item_set_self_modulate(const RID &in item, const Color &in color) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_set_self_modulate, item, color);
		}
		
		void canvas_item_set_draw_behind_parent(const RID &in item, bool enabled) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_set_draw_behind_parent, item, enabled);
		}
		
		void canvas_item_add_line(const RID &in item, const Vector2 &in From, const Vector2 &in to, const Color &in color, float width, bool antialiased) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_add_line, item, From, to, color, width, antialiased);
		}
		
		void canvas_item_add_polyline(const RID &in item, const PoolVector2Array &in points, const PoolColorArray &in colors, float width, bool antialiased) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_add_polyline, item, points, colors, width, antialiased);
		}
		
		void canvas_item_add_rect(const RID &in item, const Rect2 &in rect, const Color &in color) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_add_rect, item, rect, color);
		}
		
		void canvas_item_add_circle(const RID &in item, const Vector2 &in pos, float radius, const Color &in color) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_add_circle, item, pos, radius, color);
		}
		
		void canvas_item_add_texture_rect(const RID &in item, const Rect2 &in rect, const RID &in texture, bool tile, const Color &in modulate, bool transpose, const RID &in normal_map) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_add_texture_rect, item, rect, texture, tile, modulate, transpose, normal_map);
		}
		
		void canvas_item_add_texture_rect_region(const RID &in item, const Rect2 &in rect, const RID &in texture, const Rect2 &in src_rect, const Color &in modulate, bool transpose, const RID &in normal_map, bool clip_uv) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_add_texture_rect_region, item, rect, texture, src_rect, modulate, transpose, normal_map, clip_uv);
		}
		
		void canvas_item_add_nine_patch(const RID &in item, const Rect2 &in rect, const Rect2 &in source, const RID &in texture, const Vector2 &in topleft, const Vector2 &in bottomright, int x_axis_mode, int y_axis_mode, bool draw_center, const Color &in modulate, const RID &in normal_map) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_add_nine_patch, item, rect, source, texture, topleft, bottomright, x_axis_mode, y_axis_mode, draw_center, modulate, normal_map);
		}
		
		void canvas_item_add_primitive(const RID &in item, const PoolVector2Array &in points, const PoolColorArray &in colors, const PoolVector2Array &in uvs, const RID &in texture, float width, const RID &in normal_map) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_add_primitive, item, points, colors, uvs, texture, width, normal_map);
		}
		
		void canvas_item_add_polygon(const RID &in item, const PoolVector2Array &in points, const PoolColorArray &in colors, const PoolVector2Array &in uvs, const RID &in texture, const RID &in normal_map, bool antialiased) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_add_polygon, item, points, colors, uvs, texture, normal_map, antialiased);
		}
		
		void canvas_item_add_triangle_array(const RID &in item, const PoolIntArray &in indices, const PoolVector2Array &in points, const PoolColorArray &in colors, const PoolVector2Array &in uvs, const RID &in texture, int count, const RID &in normal_map) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_add_triangle_array, item, indices, points, colors, uvs, texture, count, normal_map);
		}
		
		void canvas_item_add_mesh(const RID &in item, const RID &in mesh, const RID &in skeleton) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_add_mesh, item, mesh, skeleton);
		}
		
		void canvas_item_add_multimesh(const RID &in item, const RID &in mesh, const RID &in skeleton) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_add_multimesh, item, mesh, skeleton);
		}
		
		void canvas_item_add_particles(const RID &in item, const RID &in particles, const RID &in texture, const RID &in normal_map, int h_frames, int v_frames) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_add_particles, item, particles, texture, normal_map, h_frames, v_frames);
		}
		
		void canvas_item_add_set_transform(const RID &in item, const Transform2D &in transform) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_add_set_transform, item, transform);
		}
		
		void canvas_item_add_clip_ignore(const RID &in item, bool ignore) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_add_clip_ignore, item, ignore);
		}
		
		void canvas_item_set_sort_children_by_y(const RID &in item, bool enabled) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_set_sort_children_by_y, item, enabled);
		}
		
		void canvas_item_set_z_index(const RID &in item, int z_index) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_set_z_index, item, z_index);
		}
		
		void canvas_item_set_z_as_relative_to_parent(const RID &in item, bool enabled) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_set_z_as_relative_to_parent, item, enabled);
		}
		
		void canvas_item_set_copy_to_backbuffer(const RID &in item, bool enabled, const Rect2 &in rect) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_set_copy_to_backbuffer, item, enabled, rect);
		}
		
		void canvas_item_clear(const RID &in item) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_clear, item);
		}
		
		void canvas_item_set_draw_index(const RID &in item, int index) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_set_draw_index, item, index);
		}
		
		void canvas_item_set_material(const RID &in item, const RID &in material) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_set_material, item, material);
		}
		
		void canvas_item_set_use_parent_material(const RID &in item, bool enabled) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_item_set_use_parent_material, item, enabled);
		}
		
		RID canvas_light_create() {
			return ptr.godot_icall(bindings::id_VisualServer_canvas_light_create);
		}
		
		void canvas_light_attach_to_canvas(const RID &in light, const RID &in canvas) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_attach_to_canvas, light, canvas);
		}
		
		void canvas_light_set_enabled(const RID &in light, bool enabled) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_set_enabled, light, enabled);
		}
		
		void canvas_light_set_scale(const RID &in light, float scale) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_set_scale, light, scale);
		}
		
		void canvas_light_set_transform(const RID &in light, const Transform2D &in transform) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_set_transform, light, transform);
		}
		
		void canvas_light_set_texture(const RID &in light, const RID &in texture) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_set_texture, light, texture);
		}
		
		void canvas_light_set_texture_offset(const RID &in light, const Vector2 &in offset) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_set_texture_offset, light, offset);
		}
		
		void canvas_light_set_color(const RID &in light, const Color &in color) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_set_color, light, color);
		}
		
		void canvas_light_set_height(const RID &in light, float height) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_set_height, light, height);
		}
		
		void canvas_light_set_energy(const RID &in light, float energy) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_set_energy, light, energy);
		}
		
		void canvas_light_set_z_range(const RID &in light, int min_z, int max_z) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_set_z_range, light, min_z, max_z);
		}
		
		void canvas_light_set_layer_range(const RID &in light, int min_layer, int max_layer) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_set_layer_range, light, min_layer, max_layer);
		}
		
		void canvas_light_set_item_cull_mask(const RID &in light, int mask) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_set_item_cull_mask, light, mask);
		}
		
		void canvas_light_set_item_shadow_cull_mask(const RID &in light, int mask) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_set_item_shadow_cull_mask, light, mask);
		}
		
		void canvas_light_set_mode(const RID &in light, int mode) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_set_mode, light, mode);
		}
		
		void canvas_light_set_shadow_enabled(const RID &in light, bool enabled) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_set_shadow_enabled, light, enabled);
		}
		
		void canvas_light_set_shadow_buffer_size(const RID &in light, int size) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_set_shadow_buffer_size, light, size);
		}
		
		void canvas_light_set_shadow_gradient_length(const RID &in light, float length) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_set_shadow_gradient_length, light, length);
		}
		
		void canvas_light_set_shadow_filter(const RID &in light, int filter) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_set_shadow_filter, light, filter);
		}
		
		void canvas_light_set_shadow_color(const RID &in light, const Color &in color) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_set_shadow_color, light, color);
		}
		
		void canvas_light_set_shadow_smooth(const RID &in light, float smooth) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_set_shadow_smooth, light, smooth);
		}
		
		RID canvas_light_occluder_create() {
			return ptr.godot_icall(bindings::id_VisualServer_canvas_light_occluder_create);
		}
		
		void canvas_light_occluder_attach_to_canvas(const RID &in occluder, const RID &in canvas) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_occluder_attach_to_canvas, occluder, canvas);
		}
		
		void canvas_light_occluder_set_enabled(const RID &in occluder, bool enabled) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_occluder_set_enabled, occluder, enabled);
		}
		
		void canvas_light_occluder_set_polygon(const RID &in occluder, const RID &in polygon) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_occluder_set_polygon, occluder, polygon);
		}
		
		void canvas_light_occluder_set_transform(const RID &in occluder, const Transform2D &in transform) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_occluder_set_transform, occluder, transform);
		}
		
		void canvas_light_occluder_set_light_mask(const RID &in occluder, int mask) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_light_occluder_set_light_mask, occluder, mask);
		}
		
		RID canvas_occluder_polygon_create() {
			return ptr.godot_icall(bindings::id_VisualServer_canvas_occluder_polygon_create);
		}
		
		void canvas_occluder_polygon_set_shape(const RID &in occluder_polygon, const PoolVector2Array &in shape, bool closed) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_occluder_polygon_set_shape, occluder_polygon, shape, closed);
		}
		
		void canvas_occluder_polygon_set_shape_as_lines(const RID &in occluder_polygon, const PoolVector2Array &in shape) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_occluder_polygon_set_shape_as_lines, occluder_polygon, shape);
		}
		
		void canvas_occluder_polygon_set_cull_mode(const RID &in occluder_polygon, int mode) {
			ptr.godot_icall(bindings::id_VisualServer_canvas_occluder_polygon_set_cull_mode, occluder_polygon, mode);
		}
		
		void black_bars_set_margins(int left, int top, int right, int bottom) {
			ptr.godot_icall(bindings::id_VisualServer_black_bars_set_margins, left, top, right, bottom);
		}
		
		void black_bars_set_images(const RID &in left, const RID &in top, const RID &in right, const RID &in bottom) {
			ptr.godot_icall(bindings::id_VisualServer_black_bars_set_images, left, top, right, bottom);
		}
		
		void free_rid(const RID &in rid) {
			ptr.godot_icall(bindings::id_VisualServer_free_rid, rid);
		}
		
		void request_frame_drawn_callback(Object@ where, const String &in method, const Variant &in userdata) {
			ptr.godot_icall(bindings::id_VisualServer_request_frame_drawn_callback, where, method, userdata);
		}
		
		void draw(bool swap_buffers) {
			ptr.godot_icall(bindings::id_VisualServer_draw, swap_buffers);
		}
		
		void sync() {
			ptr.godot_icall(bindings::id_VisualServer_sync);
		}
		
		bool has_changed() const {
			return ptr.godot_icall(bindings::id_VisualServer_has_changed);
		}
		
		void init() {
			ptr.godot_icall(bindings::id_VisualServer_init);
		}
		
		void finish() {
			ptr.godot_icall(bindings::id_VisualServer_finish);
		}
		
		int get_render_info(int info) {
			return ptr.godot_icall(bindings::id_VisualServer_get_render_info, info);
		}
		
		RID get_test_cube() {
			return ptr.godot_icall(bindings::id_VisualServer_get_test_cube);
		}
		
		RID get_test_texture() {
			return ptr.godot_icall(bindings::id_VisualServer_get_test_texture);
		}
		
		RID get_white_texture() {
			return ptr.godot_icall(bindings::id_VisualServer_get_white_texture);
		}
		
		RID make_sphere_mesh(int latitudes, int longitudes, float radius) {
			return ptr.godot_icall(bindings::id_VisualServer_make_sphere_mesh, latitudes, longitudes, radius);
		}
		
		void set_boot_image(Image@ image, const Color &in color, bool scale) {
			ptr.godot_icall(bindings::id_VisualServer_set_boot_image, image, color, scale);
		}
		
		void set_default_clear_color(const Color &in color) {
			ptr.godot_icall(bindings::id_VisualServer_set_default_clear_color, color);
		}
		
		bool has_feature(int feature) const {
			return ptr.godot_icall(bindings::id_VisualServer_has_feature, feature);
		}
		
		bool has_os_feature(const String &in feature) const {
			return ptr.godot_icall(bindings::id_VisualServer_has_os_feature, feature);
		}
		
		void set_debug_generate_wireframes(bool generate) {
			ptr.godot_icall(bindings::id_VisualServer_set_debug_generate_wireframes, generate);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_VisualServer);
		}
		
	}
	
	class HSlider : Slider {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_HSlider);
		}
		
	}
	
	class TextEdit : Control {
		
		
		protected void _gui_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_TextEdit__gui_input, arg0);
		}
		
		protected void _scroll_moved(float arg0) {
			ptr.godot_icall(bindings::id_TextEdit__scroll_moved, arg0);
		}
		
		protected void _cursor_changed_emit() {
			ptr.godot_icall(bindings::id_TextEdit__cursor_changed_emit);
		}
		
		protected void _text_changed_emit() {
			ptr.godot_icall(bindings::id_TextEdit__text_changed_emit);
		}
		
		protected void _push_current_op() {
			ptr.godot_icall(bindings::id_TextEdit__push_current_op);
		}
		
		protected void _click_selection_held() {
			ptr.godot_icall(bindings::id_TextEdit__click_selection_held);
		}
		
		protected void _toggle_draw_caret() {
			ptr.godot_icall(bindings::id_TextEdit__toggle_draw_caret);
		}
		
		protected void _v_scroll_input() {
			ptr.godot_icall(bindings::id_TextEdit__v_scroll_input);
		}
		
		void set_text(const String &in text) {
			ptr.godot_icall(bindings::id_TextEdit_set_text, text);
		}
		
		void insert_text_at_cursor(const String &in text) {
			ptr.godot_icall(bindings::id_TextEdit_insert_text_at_cursor, text);
		}
		
		int get_line_count() const {
			return ptr.godot_icall(bindings::id_TextEdit_get_line_count);
		}
		
		String get_text() {
			return ptr.godot_icall(bindings::id_TextEdit_get_text);
		}
		
		String get_line(int line) const {
			return ptr.godot_icall(bindings::id_TextEdit_get_line, line);
		}
		
		void cursor_set_column(int column, bool adjust_viewport) {
			ptr.godot_icall(bindings::id_TextEdit_cursor_set_column, column, adjust_viewport);
		}
		
		void cursor_set_line(int line, bool adjust_viewport, bool can_be_hidden) {
			ptr.godot_icall(bindings::id_TextEdit_cursor_set_line, line, adjust_viewport, can_be_hidden);
		}
		
		int cursor_get_column() const {
			return ptr.godot_icall(bindings::id_TextEdit_cursor_get_column);
		}
		
		int cursor_get_line() const {
			return ptr.godot_icall(bindings::id_TextEdit_cursor_get_line);
		}
		
		void cursor_set_blink_enabled(bool enable) {
			ptr.godot_icall(bindings::id_TextEdit_cursor_set_blink_enabled, enable);
		}
		
		bool cursor_get_blink_enabled() const {
			return ptr.godot_icall(bindings::id_TextEdit_cursor_get_blink_enabled);
		}
		
		void cursor_set_blink_speed(float blink_speed) {
			ptr.godot_icall(bindings::id_TextEdit_cursor_set_blink_speed, blink_speed);
		}
		
		float cursor_get_blink_speed() const {
			return ptr.godot_icall(bindings::id_TextEdit_cursor_get_blink_speed);
		}
		
		void cursor_set_block_mode(bool enable) {
			ptr.godot_icall(bindings::id_TextEdit_cursor_set_block_mode, enable);
		}
		
		bool cursor_is_block_mode() const {
			return ptr.godot_icall(bindings::id_TextEdit_cursor_is_block_mode);
		}
		
		void set_right_click_moves_caret(bool enable) {
			ptr.godot_icall(bindings::id_TextEdit_set_right_click_moves_caret, enable);
		}
		
		bool is_right_click_moving_caret() const {
			return ptr.godot_icall(bindings::id_TextEdit_is_right_click_moving_caret);
		}
		
		void set_readonly(bool enable) {
			ptr.godot_icall(bindings::id_TextEdit_set_readonly, enable);
		}
		
		bool is_readonly() const {
			return ptr.godot_icall(bindings::id_TextEdit_is_readonly);
		}
		
		void set_wrap(bool enable) {
			ptr.godot_icall(bindings::id_TextEdit_set_wrap, enable);
		}
		
		bool is_wrapping() const {
			return ptr.godot_icall(bindings::id_TextEdit_is_wrapping);
		}
		
		void set_context_menu_enabled(bool enable) {
			ptr.godot_icall(bindings::id_TextEdit_set_context_menu_enabled, enable);
		}
		
		bool is_context_menu_enabled() {
			return ptr.godot_icall(bindings::id_TextEdit_is_context_menu_enabled);
		}
		
		void cut() {
			ptr.godot_icall(bindings::id_TextEdit_cut);
		}
		
		void copy() {
			ptr.godot_icall(bindings::id_TextEdit_copy);
		}
		
		void paste() {
			ptr.godot_icall(bindings::id_TextEdit_paste);
		}
		
		void select(int from_line, int from_column, int to_line, int to_column) {
			ptr.godot_icall(bindings::id_TextEdit_select, from_line, from_column, to_line, to_column);
		}
		
		void select_all() {
			ptr.godot_icall(bindings::id_TextEdit_select_all);
		}
		
		void deselect() {
			ptr.godot_icall(bindings::id_TextEdit_deselect);
		}
		
		bool is_selection_active() const {
			return ptr.godot_icall(bindings::id_TextEdit_is_selection_active);
		}
		
		int get_selection_from_line() const {
			return ptr.godot_icall(bindings::id_TextEdit_get_selection_from_line);
		}
		
		int get_selection_from_column() const {
			return ptr.godot_icall(bindings::id_TextEdit_get_selection_from_column);
		}
		
		int get_selection_to_line() const {
			return ptr.godot_icall(bindings::id_TextEdit_get_selection_to_line);
		}
		
		int get_selection_to_column() const {
			return ptr.godot_icall(bindings::id_TextEdit_get_selection_to_column);
		}
		
		String get_selection_text() const {
			return ptr.godot_icall(bindings::id_TextEdit_get_selection_text);
		}
		
		String get_word_under_cursor() const {
			return ptr.godot_icall(bindings::id_TextEdit_get_word_under_cursor);
		}
		
		PoolIntArray search(const String &in key, int flags, int from_line, int from_column) const {
			return ptr.godot_icall(bindings::id_TextEdit_search, key, flags, from_line, from_column);
		}
		
		void undo() {
			ptr.godot_icall(bindings::id_TextEdit_undo);
		}
		
		void redo() {
			ptr.godot_icall(bindings::id_TextEdit_redo);
		}
		
		void clear_undo_history() {
			ptr.godot_icall(bindings::id_TextEdit_clear_undo_history);
		}
		
		void set_show_line_numbers(bool enable) {
			ptr.godot_icall(bindings::id_TextEdit_set_show_line_numbers, enable);
		}
		
		bool is_show_line_numbers_enabled() const {
			return ptr.godot_icall(bindings::id_TextEdit_is_show_line_numbers_enabled);
		}
		
		void set_hiding_enabled(int enable) {
			ptr.godot_icall(bindings::id_TextEdit_set_hiding_enabled, enable);
		}
		
		int is_hiding_enabled() const {
			return ptr.godot_icall(bindings::id_TextEdit_is_hiding_enabled);
		}
		
		void set_line_as_hidden(int line, bool enable) {
			ptr.godot_icall(bindings::id_TextEdit_set_line_as_hidden, line, enable);
		}
		
		bool is_line_hidden(int line) const {
			return ptr.godot_icall(bindings::id_TextEdit_is_line_hidden, line);
		}
		
		void fold_all_lines() {
			ptr.godot_icall(bindings::id_TextEdit_fold_all_lines);
		}
		
		void unhide_all_lines() {
			ptr.godot_icall(bindings::id_TextEdit_unhide_all_lines);
		}
		
		void fold_line(int line) {
			ptr.godot_icall(bindings::id_TextEdit_fold_line, line);
		}
		
		void unfold_line(int line) {
			ptr.godot_icall(bindings::id_TextEdit_unfold_line, line);
		}
		
		void toggle_fold_line(int line) {
			ptr.godot_icall(bindings::id_TextEdit_toggle_fold_line, line);
		}
		
		bool can_fold(int line) const {
			return ptr.godot_icall(bindings::id_TextEdit_can_fold, line);
		}
		
		bool is_folded(int line) const {
			return ptr.godot_icall(bindings::id_TextEdit_is_folded, line);
		}
		
		void set_highlight_all_occurrences(bool enable) {
			ptr.godot_icall(bindings::id_TextEdit_set_highlight_all_occurrences, enable);
		}
		
		bool is_highlight_all_occurrences_enabled() const {
			return ptr.godot_icall(bindings::id_TextEdit_is_highlight_all_occurrences_enabled);
		}
		
		void set_override_selected_font_color(bool Override) {
			ptr.godot_icall(bindings::id_TextEdit_set_override_selected_font_color, Override);
		}
		
		bool is_overriding_selected_font_color() const {
			return ptr.godot_icall(bindings::id_TextEdit_is_overriding_selected_font_color);
		}
		
		void set_syntax_coloring(bool enable) {
			ptr.godot_icall(bindings::id_TextEdit_set_syntax_coloring, enable);
		}
		
		bool is_syntax_coloring_enabled() const {
			return ptr.godot_icall(bindings::id_TextEdit_is_syntax_coloring_enabled);
		}
		
		void set_highlight_current_line(bool enabled) {
			ptr.godot_icall(bindings::id_TextEdit_set_highlight_current_line, enabled);
		}
		
		bool is_highlight_current_line_enabled() const {
			return ptr.godot_icall(bindings::id_TextEdit_is_highlight_current_line_enabled);
		}
		
		void set_smooth_scroll_enable(bool enable) {
			ptr.godot_icall(bindings::id_TextEdit_set_smooth_scroll_enable, enable);
		}
		
		bool is_smooth_scroll_enabled() const {
			return ptr.godot_icall(bindings::id_TextEdit_is_smooth_scroll_enabled);
		}
		
		void set_v_scroll_speed(float speed) {
			ptr.godot_icall(bindings::id_TextEdit_set_v_scroll_speed, speed);
		}
		
		float get_v_scroll_speed() const {
			return ptr.godot_icall(bindings::id_TextEdit_get_v_scroll_speed);
		}
		
		void add_keyword_color(const String &in keyword, const Color &in color) {
			ptr.godot_icall(bindings::id_TextEdit_add_keyword_color, keyword, color);
		}
		
		void add_color_region(const String &in begin_key, const String &in end_key, const Color &in color, bool line_only) {
			ptr.godot_icall(bindings::id_TextEdit_add_color_region, begin_key, end_key, color, line_only);
		}
		
		void clear_colors() {
			ptr.godot_icall(bindings::id_TextEdit_clear_colors);
		}
		
		void menu_option(int option) {
			ptr.godot_icall(bindings::id_TextEdit_menu_option, option);
		}
		
		PopupMenu@ get_menu() const {
			PopupMenu ret = ptr.godot_icall(bindings::id_TextEdit_get_menu);
			return  ret;
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_TextEdit);
		}
		
	}
	
	class RichTextLabel : Control {
		
		
		protected void _gui_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_RichTextLabel__gui_input, arg0);
		}
		
		protected void _scroll_changed(float arg0) {
			ptr.godot_icall(bindings::id_RichTextLabel__scroll_changed, arg0);
		}
		
		String get_text() {
			return ptr.godot_icall(bindings::id_RichTextLabel_get_text);
		}
		
		void add_text(const String &in text) {
			ptr.godot_icall(bindings::id_RichTextLabel_add_text, text);
		}
		
		void set_text(const String &in text) {
			ptr.godot_icall(bindings::id_RichTextLabel_set_text, text);
		}
		
		void add_image(Texture@ image) {
			ptr.godot_icall(bindings::id_RichTextLabel_add_image, image);
		}
		
		void newline() {
			ptr.godot_icall(bindings::id_RichTextLabel_newline);
		}
		
		bool remove_line(int line) {
			return ptr.godot_icall(bindings::id_RichTextLabel_remove_line, line);
		}
		
		void push_font(Font@ font) {
			ptr.godot_icall(bindings::id_RichTextLabel_push_font, font);
		}
		
		void push_color(const Color &in color) {
			ptr.godot_icall(bindings::id_RichTextLabel_push_color, color);
		}
		
		void push_align(int align) {
			ptr.godot_icall(bindings::id_RichTextLabel_push_align, align);
		}
		
		void push_indent(int level) {
			ptr.godot_icall(bindings::id_RichTextLabel_push_indent, level);
		}
		
		void push_list(int type) {
			ptr.godot_icall(bindings::id_RichTextLabel_push_list, type);
		}
		
		void push_meta(const Variant &in data) {
			ptr.godot_icall(bindings::id_RichTextLabel_push_meta, data);
		}
		
		void push_underline() {
			ptr.godot_icall(bindings::id_RichTextLabel_push_underline);
		}
		
		void push_table(int columns) {
			ptr.godot_icall(bindings::id_RichTextLabel_push_table, columns);
		}
		
		void set_table_column_expand(int column, bool expand, int ratio) {
			ptr.godot_icall(bindings::id_RichTextLabel_set_table_column_expand, column, expand, ratio);
		}
		
		void push_cell() {
			ptr.godot_icall(bindings::id_RichTextLabel_push_cell);
		}
		
		void pop() {
			ptr.godot_icall(bindings::id_RichTextLabel_pop);
		}
		
		void clear() {
			ptr.godot_icall(bindings::id_RichTextLabel_clear);
		}
		
		void set_meta_underline(bool enable) {
			ptr.godot_icall(bindings::id_RichTextLabel_set_meta_underline, enable);
		}
		
		bool is_meta_underlined() const {
			return ptr.godot_icall(bindings::id_RichTextLabel_is_meta_underlined);
		}
		
		void set_override_selected_font_color(bool Override) {
			ptr.godot_icall(bindings::id_RichTextLabel_set_override_selected_font_color, Override);
		}
		
		bool is_overriding_selected_font_color() const {
			return ptr.godot_icall(bindings::id_RichTextLabel_is_overriding_selected_font_color);
		}
		
		void set_scroll_active(bool active) {
			ptr.godot_icall(bindings::id_RichTextLabel_set_scroll_active, active);
		}
		
		bool is_scroll_active() const {
			return ptr.godot_icall(bindings::id_RichTextLabel_is_scroll_active);
		}
		
		void set_scroll_follow(bool follow) {
			ptr.godot_icall(bindings::id_RichTextLabel_set_scroll_follow, follow);
		}
		
		bool is_scroll_following() const {
			return ptr.godot_icall(bindings::id_RichTextLabel_is_scroll_following);
		}
		
		VScrollBar@ get_v_scroll() {
			VScrollBar ret = ptr.godot_icall(bindings::id_RichTextLabel_get_v_scroll);
			return  ret;
		}
		
		void scroll_to_line(int line) {
			ptr.godot_icall(bindings::id_RichTextLabel_scroll_to_line, line);
		}
		
		void set_tab_size(int spaces) {
			ptr.godot_icall(bindings::id_RichTextLabel_set_tab_size, spaces);
		}
		
		int get_tab_size() const {
			return ptr.godot_icall(bindings::id_RichTextLabel_get_tab_size);
		}
		
		void set_selection_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_RichTextLabel_set_selection_enabled, enabled);
		}
		
		bool is_selection_enabled() const {
			return ptr.godot_icall(bindings::id_RichTextLabel_is_selection_enabled);
		}
		
		int parse_bbcode(const String &in bbcode) {
			return ptr.godot_icall(bindings::id_RichTextLabel_parse_bbcode, bbcode);
		}
		
		int append_bbcode(const String &in bbcode) {
			return ptr.godot_icall(bindings::id_RichTextLabel_append_bbcode, bbcode);
		}
		
		void set_bbcode(const String &in text) {
			ptr.godot_icall(bindings::id_RichTextLabel_set_bbcode, text);
		}
		
		String get_bbcode() const {
			return ptr.godot_icall(bindings::id_RichTextLabel_get_bbcode);
		}
		
		void set_visible_characters(int amount) {
			ptr.godot_icall(bindings::id_RichTextLabel_set_visible_characters, amount);
		}
		
		int get_visible_characters() const {
			return ptr.godot_icall(bindings::id_RichTextLabel_get_visible_characters);
		}
		
		void set_percent_visible(float percent_visible) {
			ptr.godot_icall(bindings::id_RichTextLabel_set_percent_visible, percent_visible);
		}
		
		float get_percent_visible() const {
			return ptr.godot_icall(bindings::id_RichTextLabel_get_percent_visible);
		}
		
		int get_total_character_count() const {
			return ptr.godot_icall(bindings::id_RichTextLabel_get_total_character_count);
		}
		
		void set_use_bbcode(bool enable) {
			ptr.godot_icall(bindings::id_RichTextLabel_set_use_bbcode, enable);
		}
		
		bool is_using_bbcode() const {
			return ptr.godot_icall(bindings::id_RichTextLabel_is_using_bbcode);
		}
		
		int get_line_count() const {
			return ptr.godot_icall(bindings::id_RichTextLabel_get_line_count);
		}
		
		int get_visible_line_count() const {
			return ptr.godot_icall(bindings::id_RichTextLabel_get_visible_line_count);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_RichTextLabel);
		}
		
	}
	
	class VisualScriptBuiltinFunc : VisualScriptNode {
		
		
		void set_func(int which) {
			ptr.godot_icall(bindings::id_VisualScriptBuiltinFunc_set_func, which);
		}
		
		int get_func() {
			return ptr.godot_icall(bindings::id_VisualScriptBuiltinFunc_get_func);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptBuiltinFunc)).ptr();
		}
		
	}
	
	class ResourceImporterOGGVorbis : ResourceImporter {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ResourceImporterOGGVorbis)).ptr();
		}
		
	}
	
	class EditorFileSystem : Node {
		
		
		EditorFileSystemDirectory@ get_filesystem() {
			EditorFileSystemDirectory ret = ptr.godot_icall(bindings::id_EditorFileSystem_get_filesystem);
			return  ret;
		}
		
		bool is_scanning() const {
			return ptr.godot_icall(bindings::id_EditorFileSystem_is_scanning);
		}
		
		float get_scanning_progress() const {
			return ptr.godot_icall(bindings::id_EditorFileSystem_get_scanning_progress);
		}
		
		void scan() {
			ptr.godot_icall(bindings::id_EditorFileSystem_scan);
		}
		
		void scan_sources() {
			ptr.godot_icall(bindings::id_EditorFileSystem_scan_sources);
		}
		
		void update_file(const String &in path) {
			ptr.godot_icall(bindings::id_EditorFileSystem_update_file, path);
		}
		
		EditorFileSystemDirectory@ get_filesystem_path(const String &in path) {
			EditorFileSystemDirectory ret = ptr.godot_icall(bindings::id_EditorFileSystem_get_filesystem_path, path);
			return  ret;
		}
		
		String get_file_type(const String &in path) const {
			return ptr.godot_icall(bindings::id_EditorFileSystem_get_file_type, path);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_EditorFileSystem);
		}
		
	}
	
	class ConvexPolygonShape : Shape {
		
		
		void set_points(const PoolVector3Array &in points) {
			ptr.godot_icall(bindings::id_ConvexPolygonShape_set_points, points);
		}
		
		PoolVector3Array get_points() const {
			return ptr.godot_icall(bindings::id_ConvexPolygonShape_get_points);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ConvexPolygonShape)).ptr();
		}
		
	}
	
	class CubeMesh : PrimitiveMesh {
		
		
		void set_size(const Vector3 &in size) {
			ptr.godot_icall(bindings::id_CubeMesh_set_size, size);
		}
		
		Vector3 get_size() const {
			return ptr.godot_icall(bindings::id_CubeMesh_get_size);
		}
		
		void set_subdivide_width(int subdivide) {
			ptr.godot_icall(bindings::id_CubeMesh_set_subdivide_width, subdivide);
		}
		
		int get_subdivide_width() const {
			return ptr.godot_icall(bindings::id_CubeMesh_get_subdivide_width);
		}
		
		void set_subdivide_height(int divisions) {
			ptr.godot_icall(bindings::id_CubeMesh_set_subdivide_height, divisions);
		}
		
		int get_subdivide_height() const {
			return ptr.godot_icall(bindings::id_CubeMesh_get_subdivide_height);
		}
		
		void set_subdivide_depth(int divisions) {
			ptr.godot_icall(bindings::id_CubeMesh_set_subdivide_depth, divisions);
		}
		
		int get_subdivide_depth() const {
			return ptr.godot_icall(bindings::id_CubeMesh_get_subdivide_depth);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_CubeMesh)).ptr();
		}
		
	}
	
	class TileMap : Node2D {
		
		
		void set_tileset(TileSet@ tileset) {
			ptr.godot_icall(bindings::id_TileMap_set_tileset, tileset);
		}
		
		TileSet@ get_tileset() const {
			TileSet ret = ptr.godot_icall(bindings::id_TileMap_get_tileset);
			return  ret;
		}
		
		void set_mode(int mode) {
			ptr.godot_icall(bindings::id_TileMap_set_mode, mode);
		}
		
		int get_mode() const {
			return ptr.godot_icall(bindings::id_TileMap_get_mode);
		}
		
		void set_half_offset(int half_offset) {
			ptr.godot_icall(bindings::id_TileMap_set_half_offset, half_offset);
		}
		
		int get_half_offset() const {
			return ptr.godot_icall(bindings::id_TileMap_get_half_offset);
		}
		
		void set_custom_transform(const Transform2D &in custom_transform) {
			ptr.godot_icall(bindings::id_TileMap_set_custom_transform, custom_transform);
		}
		
		Transform2D get_custom_transform() const {
			return ptr.godot_icall(bindings::id_TileMap_get_custom_transform);
		}
		
		void set_cell_size(const Vector2 &in size) {
			ptr.godot_icall(bindings::id_TileMap_set_cell_size, size);
		}
		
		Vector2 get_cell_size() const {
			return ptr.godot_icall(bindings::id_TileMap_get_cell_size);
		}
		
		protected void _set_old_cell_size(int size) {
			ptr.godot_icall(bindings::id_TileMap__set_old_cell_size, size);
		}
		
		protected int _get_old_cell_size() const {
			return ptr.godot_icall(bindings::id_TileMap__get_old_cell_size);
		}
		
		void set_quadrant_size(int size) {
			ptr.godot_icall(bindings::id_TileMap_set_quadrant_size, size);
		}
		
		int get_quadrant_size() const {
			return ptr.godot_icall(bindings::id_TileMap_get_quadrant_size);
		}
		
		void set_tile_origin(int origin) {
			ptr.godot_icall(bindings::id_TileMap_set_tile_origin, origin);
		}
		
		int get_tile_origin() const {
			return ptr.godot_icall(bindings::id_TileMap_get_tile_origin);
		}
		
		void set_clip_uv(bool enable) {
			ptr.godot_icall(bindings::id_TileMap_set_clip_uv, enable);
		}
		
		bool get_clip_uv() const {
			return ptr.godot_icall(bindings::id_TileMap_get_clip_uv);
		}
		
		void set_y_sort_mode(bool enable) {
			ptr.godot_icall(bindings::id_TileMap_set_y_sort_mode, enable);
		}
		
		bool is_y_sort_mode_enabled() const {
			return ptr.godot_icall(bindings::id_TileMap_is_y_sort_mode_enabled);
		}
		
		void set_collision_use_kinematic(bool use_kinematic) {
			ptr.godot_icall(bindings::id_TileMap_set_collision_use_kinematic, use_kinematic);
		}
		
		bool get_collision_use_kinematic() const {
			return ptr.godot_icall(bindings::id_TileMap_get_collision_use_kinematic);
		}
		
		void set_collision_layer(int layer) {
			ptr.godot_icall(bindings::id_TileMap_set_collision_layer, layer);
		}
		
		int get_collision_layer() const {
			return ptr.godot_icall(bindings::id_TileMap_get_collision_layer);
		}
		
		void set_collision_mask(int mask) {
			ptr.godot_icall(bindings::id_TileMap_set_collision_mask, mask);
		}
		
		int get_collision_mask() const {
			return ptr.godot_icall(bindings::id_TileMap_get_collision_mask);
		}
		
		void set_collision_layer_bit(int bit, bool value) {
			ptr.godot_icall(bindings::id_TileMap_set_collision_layer_bit, bit, value);
		}
		
		bool get_collision_layer_bit(int bit) const {
			return ptr.godot_icall(bindings::id_TileMap_get_collision_layer_bit, bit);
		}
		
		void set_collision_mask_bit(int bit, bool value) {
			ptr.godot_icall(bindings::id_TileMap_set_collision_mask_bit, bit, value);
		}
		
		bool get_collision_mask_bit(int bit) const {
			return ptr.godot_icall(bindings::id_TileMap_get_collision_mask_bit, bit);
		}
		
		void set_collision_friction(float value) {
			ptr.godot_icall(bindings::id_TileMap_set_collision_friction, value);
		}
		
		float get_collision_friction() const {
			return ptr.godot_icall(bindings::id_TileMap_get_collision_friction);
		}
		
		void set_collision_bounce(float value) {
			ptr.godot_icall(bindings::id_TileMap_set_collision_bounce, value);
		}
		
		float get_collision_bounce() const {
			return ptr.godot_icall(bindings::id_TileMap_get_collision_bounce);
		}
		
		void set_occluder_light_mask(int mask) {
			ptr.godot_icall(bindings::id_TileMap_set_occluder_light_mask, mask);
		}
		
		int get_occluder_light_mask() const {
			return ptr.godot_icall(bindings::id_TileMap_get_occluder_light_mask);
		}
		
		void set_cell(int x, int y, int tile, bool flip_x, bool flip_y, bool transpose, const Vector2 &in autotile_coord) {
			ptr.godot_icall(bindings::id_TileMap_set_cell, x, y, tile, flip_x, flip_y, transpose, autotile_coord);
		}
		
		void set_cellv(const Vector2 &in position, int tile, bool flip_x, bool flip_y, bool transpose) {
			ptr.godot_icall(bindings::id_TileMap_set_cellv, position, tile, flip_x, flip_y, transpose);
		}
		
		int get_cell(int x, int y) const {
			return ptr.godot_icall(bindings::id_TileMap_get_cell, x, y);
		}
		
		int get_cellv(const Vector2 &in position) const {
			return ptr.godot_icall(bindings::id_TileMap_get_cellv, position);
		}
		
		bool is_cell_x_flipped(int x, int y) const {
			return ptr.godot_icall(bindings::id_TileMap_is_cell_x_flipped, x, y);
		}
		
		bool is_cell_y_flipped(int x, int y) const {
			return ptr.godot_icall(bindings::id_TileMap_is_cell_y_flipped, x, y);
		}
		
		bool is_cell_transposed(int x, int y) const {
			return ptr.godot_icall(bindings::id_TileMap_is_cell_transposed, x, y);
		}
		
		void clear() {
			ptr.godot_icall(bindings::id_TileMap_clear);
		}
		
		Array get_used_cells() const {
			return ptr.godot_icall(bindings::id_TileMap_get_used_cells);
		}
		
		Array get_used_cells_by_id(int id) const {
			return ptr.godot_icall(bindings::id_TileMap_get_used_cells_by_id, id);
		}
		
		Rect2 get_used_rect() {
			return ptr.godot_icall(bindings::id_TileMap_get_used_rect);
		}
		
		Vector2 map_to_world(const Vector2 &in map_position, bool ignore_half_ofs) const {
			return ptr.godot_icall(bindings::id_TileMap_map_to_world, map_position, ignore_half_ofs);
		}
		
		Vector2 world_to_map(const Vector2 &in world_position) const {
			return ptr.godot_icall(bindings::id_TileMap_world_to_map, world_position);
		}
		
		protected void _clear_quadrants() {
			ptr.godot_icall(bindings::id_TileMap__clear_quadrants);
		}
		
		protected void _recreate_quadrants() {
			ptr.godot_icall(bindings::id_TileMap__recreate_quadrants);
		}
		
		protected void _update_dirty_quadrants() {
			ptr.godot_icall(bindings::id_TileMap__update_dirty_quadrants);
		}
		
		void update_bitmask_area(const Vector2 &in position) {
			ptr.godot_icall(bindings::id_TileMap_update_bitmask_area, position);
		}
		
		void update_bitmask_region(const Vector2 &in start, const Vector2 &in end) {
			ptr.godot_icall(bindings::id_TileMap_update_bitmask_region, start, end);
		}
		
		protected void _set_tile_data(const PoolIntArray &in arg0) {
			ptr.godot_icall(bindings::id_TileMap__set_tile_data, arg0);
		}
		
		protected PoolIntArray _get_tile_data() const {
			return ptr.godot_icall(bindings::id_TileMap__get_tile_data);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_TileMap);
		}
		
	}
	
	class GrooveJoint2D : Joint2D {
		
		
		void set_length(float length) {
			ptr.godot_icall(bindings::id_GrooveJoint2D_set_length, length);
		}
		
		float get_length() const {
			return ptr.godot_icall(bindings::id_GrooveJoint2D_get_length);
		}
		
		void set_initial_offset(float offset) {
			ptr.godot_icall(bindings::id_GrooveJoint2D_set_initial_offset, offset);
		}
		
		float get_initial_offset() const {
			return ptr.godot_icall(bindings::id_GrooveJoint2D_get_initial_offset);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_GrooveJoint2D);
		}
		
	}
	
	class ARVRInterface : Reference {
		
		
		String get_name() const {
			return ptr.godot_icall(bindings::id_ARVRInterface_get_name);
		}
		
		int get_capabilities() const {
			return ptr.godot_icall(bindings::id_ARVRInterface_get_capabilities);
		}
		
		bool is_primary() {
			return ptr.godot_icall(bindings::id_ARVRInterface_is_primary);
		}
		
		void set_is_primary(bool enable) {
			ptr.godot_icall(bindings::id_ARVRInterface_set_is_primary, enable);
		}
		
		bool is_initialized() {
			return ptr.godot_icall(bindings::id_ARVRInterface_is_initialized);
		}
		
		void set_is_initialized(bool initialized) {
			ptr.godot_icall(bindings::id_ARVRInterface_set_is_initialized, initialized);
		}
		
		bool initialize() {
			return ptr.godot_icall(bindings::id_ARVRInterface_initialize);
		}
		
		void uninitialize() {
			ptr.godot_icall(bindings::id_ARVRInterface_uninitialize);
		}
		
		int get_tracking_status() const {
			return ptr.godot_icall(bindings::id_ARVRInterface_get_tracking_status);
		}
		
		Vector2 get_render_targetsize() {
			return ptr.godot_icall(bindings::id_ARVRInterface_get_render_targetsize);
		}
		
		bool is_stereo() {
			return ptr.godot_icall(bindings::id_ARVRInterface_is_stereo);
		}
		
		bool get_anchor_detection_is_enabled() const {
			return ptr.godot_icall(bindings::id_ARVRInterface_get_anchor_detection_is_enabled);
		}
		
		void set_anchor_detection_is_enabled(bool enable) {
			ptr.godot_icall(bindings::id_ARVRInterface_set_anchor_detection_is_enabled, enable);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ARVRInterface)).ptr();
		}
		
	}
	
	class HScrollBar : ScrollBar {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_HScrollBar);
		}
		
	}
	
	class BoxContainer : Container {
		
		
		void add_spacer(bool begin) {
			ptr.godot_icall(bindings::id_BoxContainer_add_spacer, begin);
		}
		
		int get_alignment() const {
			return ptr.godot_icall(bindings::id_BoxContainer_get_alignment);
		}
		
		void set_alignment(int alignment) {
			ptr.godot_icall(bindings::id_BoxContainer_set_alignment, alignment);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_BoxContainer);
		}
		
	}
	
	class Position3D : Spatial {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Position3D);
		}
		
	}
	
	class Physics2DDirectBodyStateSW : Physics2DDirectBodyState {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Physics2DDirectBodyStateSW);
		}
		
	}
	
	class VisualScriptIndexSet : VisualScriptNode {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptIndexSet)).ptr();
		}
		
	}
	
	class RectangleBinPack : Reference {
		
		
		void initialize(const Vector2 &in p_size) {
			ptr.godot_icall(bindings::id_RectangleBinPack_initialize, p_size);
		}
		
		Rect2 insert(const Vector2 &in p_rect_size) {
			return ptr.godot_icall(bindings::id_RectangleBinPack_insert, p_rect_size);
		}
		
		Array insert_array(const PoolVector2Array &in p_rect_size_arr) {
			return ptr.godot_icall(bindings::id_RectangleBinPack_insert_array, p_rect_size_arr);
		}
		
		float occupancy() const {
			return ptr.godot_icall(bindings::id_RectangleBinPack_occupancy);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_RectangleBinPack)).ptr();
		}
		
	}
	
	class NavigationPolygonInstance : Node2D {
		
		
		void set_navigation_polygon(NavigationPolygon@ navpoly) {
			ptr.godot_icall(bindings::id_NavigationPolygonInstance_set_navigation_polygon, navpoly);
		}
		
		NavigationPolygon@ get_navigation_polygon() const {
			NavigationPolygon ret = ptr.godot_icall(bindings::id_NavigationPolygonInstance_get_navigation_polygon);
			return  ret;
		}
		
		void set_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_NavigationPolygonInstance_set_enabled, enabled);
		}
		
		bool is_enabled() const {
			return ptr.godot_icall(bindings::id_NavigationPolygonInstance_is_enabled);
		}
		
		protected void _navpoly_changed() {
			ptr.godot_icall(bindings::id_NavigationPolygonInstance__navpoly_changed);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_NavigationPolygonInstance);
		}
		
	}
	
	class PolygonPathFinder : Resource {
		
		
		void setup(const PoolVector2Array &in points, const PoolIntArray &in connections) {
			ptr.godot_icall(bindings::id_PolygonPathFinder_setup, points, connections);
		}
		
		PoolVector2Array find_path(const Vector2 &in From, const Vector2 &in to) {
			return ptr.godot_icall(bindings::id_PolygonPathFinder_find_path, From, to);
		}
		
		PoolVector2Array get_intersections(const Vector2 &in From, const Vector2 &in to) const {
			return ptr.godot_icall(bindings::id_PolygonPathFinder_get_intersections, From, to);
		}
		
		Vector2 get_closest_point(const Vector2 &in point) const {
			return ptr.godot_icall(bindings::id_PolygonPathFinder_get_closest_point, point);
		}
		
		bool is_point_inside(const Vector2 &in point) const {
			return ptr.godot_icall(bindings::id_PolygonPathFinder_is_point_inside, point);
		}
		
		void set_point_penalty(int idx, float penalty) {
			ptr.godot_icall(bindings::id_PolygonPathFinder_set_point_penalty, idx, penalty);
		}
		
		float get_point_penalty(int idx) const {
			return ptr.godot_icall(bindings::id_PolygonPathFinder_get_point_penalty, idx);
		}
		
		Rect2 get_bounds() const {
			return ptr.godot_icall(bindings::id_PolygonPathFinder_get_bounds);
		}
		
		protected void _set_data(const Dictionary &in arg0) {
			ptr.godot_icall(bindings::id_PolygonPathFinder__set_data, arg0);
		}
		
		protected Dictionary _get_data() const {
			return ptr.godot_icall(bindings::id_PolygonPathFinder__get_data);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_PolygonPathFinder)).ptr();
		}
		
	}
	
	class RayCast2D : Node2D {
		
		
		void set_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_RayCast2D_set_enabled, enabled);
		}
		
		bool is_enabled() const {
			return ptr.godot_icall(bindings::id_RayCast2D_is_enabled);
		}
		
		void set_cast_to(const Vector2 &in local_point) {
			ptr.godot_icall(bindings::id_RayCast2D_set_cast_to, local_point);
		}
		
		Vector2 get_cast_to() const {
			return ptr.godot_icall(bindings::id_RayCast2D_get_cast_to);
		}
		
		bool is_colliding() const {
			return ptr.godot_icall(bindings::id_RayCast2D_is_colliding);
		}
		
		void force_raycast_update() {
			ptr.godot_icall(bindings::id_RayCast2D_force_raycast_update);
		}
		
		Object@ get_collider() const {
			Object ret = ptr.godot_icall(bindings::id_RayCast2D_get_collider);
			return  ret;
		}
		
		int get_collider_shape() const {
			return ptr.godot_icall(bindings::id_RayCast2D_get_collider_shape);
		}
		
		Vector2 get_collision_point() const {
			return ptr.godot_icall(bindings::id_RayCast2D_get_collision_point);
		}
		
		Vector2 get_collision_normal() const {
			return ptr.godot_icall(bindings::id_RayCast2D_get_collision_normal);
		}
		
		void add_exception_rid(const RID &in rid) {
			ptr.godot_icall(bindings::id_RayCast2D_add_exception_rid, rid);
		}
		
		void add_exception(Object@ node) {
			ptr.godot_icall(bindings::id_RayCast2D_add_exception, node);
		}
		
		void remove_exception_rid(const RID &in rid) {
			ptr.godot_icall(bindings::id_RayCast2D_remove_exception_rid, rid);
		}
		
		void remove_exception(Object@ node) {
			ptr.godot_icall(bindings::id_RayCast2D_remove_exception, node);
		}
		
		void clear_exceptions() {
			ptr.godot_icall(bindings::id_RayCast2D_clear_exceptions);
		}
		
		void set_collision_mask(int mask) {
			ptr.godot_icall(bindings::id_RayCast2D_set_collision_mask, mask);
		}
		
		int get_collision_mask() const {
			return ptr.godot_icall(bindings::id_RayCast2D_get_collision_mask);
		}
		
		void set_collision_mask_bit(int bit, bool value) {
			ptr.godot_icall(bindings::id_RayCast2D_set_collision_mask_bit, bit, value);
		}
		
		bool get_collision_mask_bit(int bit) const {
			return ptr.godot_icall(bindings::id_RayCast2D_get_collision_mask_bit, bit);
		}
		
		void set_exclude_parent_body(bool mask) {
			ptr.godot_icall(bindings::id_RayCast2D_set_exclude_parent_body, mask);
		}
		
		bool get_exclude_parent_body() const {
			return ptr.godot_icall(bindings::id_RayCast2D_get_exclude_parent_body);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_RayCast2D);
		}
		
	}
	
	class PhysicsDirectBodyState : Object {
		
		
		Vector3 get_total_gravity() const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_total_gravity);
		}
		
		float get_total_linear_damp() const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_total_linear_damp);
		}
		
		float get_total_angular_damp() const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_total_angular_damp);
		}
		
		Vector3 get_center_of_mass() const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_center_of_mass);
		}
		
		Basis get_principal_inertia_axes() const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_principal_inertia_axes);
		}
		
		float get_inverse_mass() const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_inverse_mass);
		}
		
		Vector3 get_inverse_inertia() const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_inverse_inertia);
		}
		
		void set_linear_velocity(const Vector3 &in velocity) {
			ptr.godot_icall(bindings::id_PhysicsDirectBodyState_set_linear_velocity, velocity);
		}
		
		Vector3 get_linear_velocity() const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_linear_velocity);
		}
		
		void set_angular_velocity(const Vector3 &in velocity) {
			ptr.godot_icall(bindings::id_PhysicsDirectBodyState_set_angular_velocity, velocity);
		}
		
		Vector3 get_angular_velocity() const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_angular_velocity);
		}
		
		void set_transform(const Transform &in transform) {
			ptr.godot_icall(bindings::id_PhysicsDirectBodyState_set_transform, transform);
		}
		
		Transform get_transform() const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_transform);
		}
		
		void add_force(const Vector3 &in force, const Vector3 &in position) {
			ptr.godot_icall(bindings::id_PhysicsDirectBodyState_add_force, force, position);
		}
		
		void apply_impulse(const Vector3 &in position, const Vector3 &in j) {
			ptr.godot_icall(bindings::id_PhysicsDirectBodyState_apply_impulse, position, j);
		}
		
		void apply_torqe_impulse(const Vector3 &in j) {
			ptr.godot_icall(bindings::id_PhysicsDirectBodyState_apply_torqe_impulse, j);
		}
		
		void set_sleep_state(bool enabled) {
			ptr.godot_icall(bindings::id_PhysicsDirectBodyState_set_sleep_state, enabled);
		}
		
		bool is_sleeping() const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_is_sleeping);
		}
		
		int get_contact_count() const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_contact_count);
		}
		
		Vector3 get_contact_local_position(int contact_idx) const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_contact_local_position, contact_idx);
		}
		
		Vector3 get_contact_local_normal(int contact_idx) const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_contact_local_normal, contact_idx);
		}
		
		int get_contact_local_shape(int contact_idx) const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_contact_local_shape, contact_idx);
		}
		
		RID get_contact_collider(int contact_idx) const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_contact_collider, contact_idx);
		}
		
		Vector3 get_contact_collider_position(int contact_idx) const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_contact_collider_position, contact_idx);
		}
		
		int get_contact_collider_id(int contact_idx) const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_contact_collider_id, contact_idx);
		}
		
		Object@ get_contact_collider_object(int contact_idx) const {
			Object ret = ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_contact_collider_object, contact_idx);
			return  ret;
		}
		
		int get_contact_collider_shape(int contact_idx) const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_contact_collider_shape, contact_idx);
		}
		
		Vector3 get_contact_collider_velocity_at_position(int contact_idx) const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_contact_collider_velocity_at_position, contact_idx);
		}
		
		float get_step() const {
			return ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_step);
		}
		
		void integrate_forces() {
			ptr.godot_icall(bindings::id_PhysicsDirectBodyState_integrate_forces);
		}
		
		PhysicsDirectSpaceState@ get_space_state() {
			PhysicsDirectSpaceState ret = ptr.godot_icall(bindings::id_PhysicsDirectBodyState_get_space_state);
			return  ret;
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_PhysicsDirectBodyState);
		}
		
	}
	
	class AnimationPlayer : Node {
		
		
		protected void _node_removed(Node@ arg0) {
			ptr.godot_icall(bindings::id_AnimationPlayer__node_removed, arg0);
		}
		
		protected void _animation_changed() {
			ptr.godot_icall(bindings::id_AnimationPlayer__animation_changed);
		}
		
		int add_animation(const String &in name, Animation@ animation) {
			return ptr.godot_icall(bindings::id_AnimationPlayer_add_animation, name, animation);
		}
		
		void remove_animation(const String &in name) {
			ptr.godot_icall(bindings::id_AnimationPlayer_remove_animation, name);
		}
		
		void rename_animation(const String &in name, const String &in newname) {
			ptr.godot_icall(bindings::id_AnimationPlayer_rename_animation, name, newname);
		}
		
		bool has_animation(const String &in name) const {
			return ptr.godot_icall(bindings::id_AnimationPlayer_has_animation, name);
		}
		
		Animation@ get_animation(const String &in name) const {
			Animation ret = ptr.godot_icall(bindings::id_AnimationPlayer_get_animation, name);
			return  ret;
		}
		
		PoolStringArray get_animation_list() const {
			return ptr.godot_icall(bindings::id_AnimationPlayer_get_animation_list);
		}
		
		void animation_set_next(const String &in anim_from, const String &in anim_to) {
			ptr.godot_icall(bindings::id_AnimationPlayer_animation_set_next, anim_from, anim_to);
		}
		
		String animation_get_next(const String &in anim_from) const {
			return ptr.godot_icall(bindings::id_AnimationPlayer_animation_get_next, anim_from);
		}
		
		void set_blend_time(const String &in anim_from, const String &in anim_to, float sec) {
			ptr.godot_icall(bindings::id_AnimationPlayer_set_blend_time, anim_from, anim_to, sec);
		}
		
		float get_blend_time(const String &in anim_from, const String &in anim_to) const {
			return ptr.godot_icall(bindings::id_AnimationPlayer_get_blend_time, anim_from, anim_to);
		}
		
		void set_default_blend_time(float sec) {
			ptr.godot_icall(bindings::id_AnimationPlayer_set_default_blend_time, sec);
		}
		
		float get_default_blend_time() const {
			return ptr.godot_icall(bindings::id_AnimationPlayer_get_default_blend_time);
		}
		
		void play(const String &in name, float custom_blend, float custom_speed, bool from_end) {
			ptr.godot_icall(bindings::id_AnimationPlayer_play, name, custom_blend, custom_speed, from_end);
		}
		
		void play_backwards(const String &in name, float custom_blend) {
			ptr.godot_icall(bindings::id_AnimationPlayer_play_backwards, name, custom_blend);
		}
		
		void stop(bool reset) {
			ptr.godot_icall(bindings::id_AnimationPlayer_stop, reset);
		}
		
		bool is_playing() const {
			return ptr.godot_icall(bindings::id_AnimationPlayer_is_playing);
		}
		
		void set_current_animation(const String &in anim) {
			ptr.godot_icall(bindings::id_AnimationPlayer_set_current_animation, anim);
		}
		
		String get_current_animation() const {
			return ptr.godot_icall(bindings::id_AnimationPlayer_get_current_animation);
		}
		
		void set_assigned_animation(const String &in anim) {
			ptr.godot_icall(bindings::id_AnimationPlayer_set_assigned_animation, anim);
		}
		
		String get_assigned_animation() const {
			return ptr.godot_icall(bindings::id_AnimationPlayer_get_assigned_animation);
		}
		
		void queue(const String &in name) {
			ptr.godot_icall(bindings::id_AnimationPlayer_queue, name);
		}
		
		void clear_queue() {
			ptr.godot_icall(bindings::id_AnimationPlayer_clear_queue);
		}
		
		void set_active(bool active) {
			ptr.godot_icall(bindings::id_AnimationPlayer_set_active, active);
		}
		
		bool is_active() const {
			return ptr.godot_icall(bindings::id_AnimationPlayer_is_active);
		}
		
		void set_speed_scale(float speed) {
			ptr.godot_icall(bindings::id_AnimationPlayer_set_speed_scale, speed);
		}
		
		float get_speed_scale() const {
			return ptr.godot_icall(bindings::id_AnimationPlayer_get_speed_scale);
		}
		
		void set_autoplay(const String &in name) {
			ptr.godot_icall(bindings::id_AnimationPlayer_set_autoplay, name);
		}
		
		String get_autoplay() const {
			return ptr.godot_icall(bindings::id_AnimationPlayer_get_autoplay);
		}
		
		void set_root(const NodePath &in path) {
			ptr.godot_icall(bindings::id_AnimationPlayer_set_root, path);
		}
		
		NodePath get_root() const {
			return ptr.godot_icall(bindings::id_AnimationPlayer_get_root);
		}
		
		String find_animation(Animation@ animation) const {
			return ptr.godot_icall(bindings::id_AnimationPlayer_find_animation, animation);
		}
		
		void clear_caches() {
			ptr.godot_icall(bindings::id_AnimationPlayer_clear_caches);
		}
		
		void set_animation_process_mode(int mode) {
			ptr.godot_icall(bindings::id_AnimationPlayer_set_animation_process_mode, mode);
		}
		
		int get_animation_process_mode() const {
			return ptr.godot_icall(bindings::id_AnimationPlayer_get_animation_process_mode);
		}
		
		float get_current_animation_position() const {
			return ptr.godot_icall(bindings::id_AnimationPlayer_get_current_animation_position);
		}
		
		float get_current_animation_length() const {
			return ptr.godot_icall(bindings::id_AnimationPlayer_get_current_animation_length);
		}
		
		void seek(float seconds, bool update) {
			ptr.godot_icall(bindings::id_AnimationPlayer_seek, seconds, update);
		}
		
		void advance(float delta) {
			ptr.godot_icall(bindings::id_AnimationPlayer_advance, delta);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_AnimationPlayer);
		}
		
	}
	
	class BoneAttachment : Spatial {
		
		
		void set_bone_name(const String &in bone_name) {
			ptr.godot_icall(bindings::id_BoneAttachment_set_bone_name, bone_name);
		}
		
		String get_bone_name() const {
			return ptr.godot_icall(bindings::id_BoneAttachment_get_bone_name);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_BoneAttachment);
		}
		
	}
	
	class BakedLightmap : VisualInstance {
		
		
		void set_light_data(BakedLightmapData@ data) {
			ptr.godot_icall(bindings::id_BakedLightmap_set_light_data, data);
		}
		
		BakedLightmapData@ get_light_data() const {
			BakedLightmapData ret = ptr.godot_icall(bindings::id_BakedLightmap_get_light_data);
			return  ret;
		}
		
		void set_bake_cell_size(float bake_cell_size) {
			ptr.godot_icall(bindings::id_BakedLightmap_set_bake_cell_size, bake_cell_size);
		}
		
		float get_bake_cell_size() const {
			return ptr.godot_icall(bindings::id_BakedLightmap_get_bake_cell_size);
		}
		
		void set_capture_cell_size(float capture_cell_size) {
			ptr.godot_icall(bindings::id_BakedLightmap_set_capture_cell_size, capture_cell_size);
		}
		
		float get_capture_cell_size() const {
			return ptr.godot_icall(bindings::id_BakedLightmap_get_capture_cell_size);
		}
		
		void set_bake_quality(int bake_quality) {
			ptr.godot_icall(bindings::id_BakedLightmap_set_bake_quality, bake_quality);
		}
		
		int get_bake_quality() const {
			return ptr.godot_icall(bindings::id_BakedLightmap_get_bake_quality);
		}
		
		void set_bake_mode(int bake_mode) {
			ptr.godot_icall(bindings::id_BakedLightmap_set_bake_mode, bake_mode);
		}
		
		int get_bake_mode() const {
			return ptr.godot_icall(bindings::id_BakedLightmap_get_bake_mode);
		}
		
		void set_extents(const Vector3 &in extents) {
			ptr.godot_icall(bindings::id_BakedLightmap_set_extents, extents);
		}
		
		Vector3 get_extents() const {
			return ptr.godot_icall(bindings::id_BakedLightmap_get_extents);
		}
		
		void set_propagation(float propagation) {
			ptr.godot_icall(bindings::id_BakedLightmap_set_propagation, propagation);
		}
		
		float get_propagation() const {
			return ptr.godot_icall(bindings::id_BakedLightmap_get_propagation);
		}
		
		void set_energy(float energy) {
			ptr.godot_icall(bindings::id_BakedLightmap_set_energy, energy);
		}
		
		float get_energy() const {
			return ptr.godot_icall(bindings::id_BakedLightmap_get_energy);
		}
		
		void set_hdr(bool hdr) {
			ptr.godot_icall(bindings::id_BakedLightmap_set_hdr, hdr);
		}
		
		bool is_hdr() const {
			return ptr.godot_icall(bindings::id_BakedLightmap_is_hdr);
		}
		
		void set_image_path(const String &in image_path) {
			ptr.godot_icall(bindings::id_BakedLightmap_set_image_path, image_path);
		}
		
		String get_image_path() const {
			return ptr.godot_icall(bindings::id_BakedLightmap_get_image_path);
		}
		
		int bake(Node@ from_node, bool create_visual_debug) {
			return ptr.godot_icall(bindings::id_BakedLightmap_bake, from_node, create_visual_debug);
		}
		
		void debug_bake() {
			ptr.godot_icall(bindings::id_BakedLightmap_debug_bake);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_BakedLightmap);
		}
		
	}
	
	class VideoStreamWebm : VideoStream {
		
		
		void set_file(const String &in file) {
			ptr.godot_icall(bindings::id_VideoStreamWebm_set_file, file);
		}
		
		String get_file() {
			return ptr.godot_icall(bindings::id_VideoStreamWebm_get_file);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VideoStreamWebm)).ptr();
		}
		
	}
	
	class Light2D : Node2D {
		
		
		void set_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_Light2D_set_enabled, enabled);
		}
		
		bool is_enabled() const {
			return ptr.godot_icall(bindings::id_Light2D_is_enabled);
		}
		
		void set_editor_only(bool editor_only) {
			ptr.godot_icall(bindings::id_Light2D_set_editor_only, editor_only);
		}
		
		bool is_editor_only() const {
			return ptr.godot_icall(bindings::id_Light2D_is_editor_only);
		}
		
		void set_texture(Texture@ texture) {
			ptr.godot_icall(bindings::id_Light2D_set_texture, texture);
		}
		
		Texture@ get_texture() const {
			Texture ret = ptr.godot_icall(bindings::id_Light2D_get_texture);
			return  ret;
		}
		
		void set_texture_offset(const Vector2 &in texture_offset) {
			ptr.godot_icall(bindings::id_Light2D_set_texture_offset, texture_offset);
		}
		
		Vector2 get_texture_offset() const {
			return ptr.godot_icall(bindings::id_Light2D_get_texture_offset);
		}
		
		void set_color(const Color &in color) {
			ptr.godot_icall(bindings::id_Light2D_set_color, color);
		}
		
		Color get_color() const {
			return ptr.godot_icall(bindings::id_Light2D_get_color);
		}
		
		void set_height(float height) {
			ptr.godot_icall(bindings::id_Light2D_set_height, height);
		}
		
		float get_height() const {
			return ptr.godot_icall(bindings::id_Light2D_get_height);
		}
		
		void set_energy(float energy) {
			ptr.godot_icall(bindings::id_Light2D_set_energy, energy);
		}
		
		float get_energy() const {
			return ptr.godot_icall(bindings::id_Light2D_get_energy);
		}
		
		void set_texture_scale(float texture_scale) {
			ptr.godot_icall(bindings::id_Light2D_set_texture_scale, texture_scale);
		}
		
		float get_texture_scale() const {
			return ptr.godot_icall(bindings::id_Light2D_get_texture_scale);
		}
		
		void set_z_range_min(int z) {
			ptr.godot_icall(bindings::id_Light2D_set_z_range_min, z);
		}
		
		int get_z_range_min() const {
			return ptr.godot_icall(bindings::id_Light2D_get_z_range_min);
		}
		
		void set_z_range_max(int z) {
			ptr.godot_icall(bindings::id_Light2D_set_z_range_max, z);
		}
		
		int get_z_range_max() const {
			return ptr.godot_icall(bindings::id_Light2D_get_z_range_max);
		}
		
		void set_layer_range_min(int layer) {
			ptr.godot_icall(bindings::id_Light2D_set_layer_range_min, layer);
		}
		
		int get_layer_range_min() const {
			return ptr.godot_icall(bindings::id_Light2D_get_layer_range_min);
		}
		
		void set_layer_range_max(int layer) {
			ptr.godot_icall(bindings::id_Light2D_set_layer_range_max, layer);
		}
		
		int get_layer_range_max() const {
			return ptr.godot_icall(bindings::id_Light2D_get_layer_range_max);
		}
		
		void set_item_cull_mask(int item_cull_mask) {
			ptr.godot_icall(bindings::id_Light2D_set_item_cull_mask, item_cull_mask);
		}
		
		int get_item_cull_mask() const {
			return ptr.godot_icall(bindings::id_Light2D_get_item_cull_mask);
		}
		
		void set_item_shadow_cull_mask(int item_shadow_cull_mask) {
			ptr.godot_icall(bindings::id_Light2D_set_item_shadow_cull_mask, item_shadow_cull_mask);
		}
		
		int get_item_shadow_cull_mask() const {
			return ptr.godot_icall(bindings::id_Light2D_get_item_shadow_cull_mask);
		}
		
		void set_mode(int mode) {
			ptr.godot_icall(bindings::id_Light2D_set_mode, mode);
		}
		
		int get_mode() const {
			return ptr.godot_icall(bindings::id_Light2D_get_mode);
		}
		
		void set_shadow_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_Light2D_set_shadow_enabled, enabled);
		}
		
		bool is_shadow_enabled() const {
			return ptr.godot_icall(bindings::id_Light2D_is_shadow_enabled);
		}
		
		void set_shadow_buffer_size(int size) {
			ptr.godot_icall(bindings::id_Light2D_set_shadow_buffer_size, size);
		}
		
		int get_shadow_buffer_size() const {
			return ptr.godot_icall(bindings::id_Light2D_get_shadow_buffer_size);
		}
		
		void set_shadow_smooth(float smooth) {
			ptr.godot_icall(bindings::id_Light2D_set_shadow_smooth, smooth);
		}
		
		float get_shadow_smooth() const {
			return ptr.godot_icall(bindings::id_Light2D_get_shadow_smooth);
		}
		
		void set_shadow_gradient_length(float multiplier) {
			ptr.godot_icall(bindings::id_Light2D_set_shadow_gradient_length, multiplier);
		}
		
		float get_shadow_gradient_length() const {
			return ptr.godot_icall(bindings::id_Light2D_get_shadow_gradient_length);
		}
		
		void set_shadow_filter(int filter) {
			ptr.godot_icall(bindings::id_Light2D_set_shadow_filter, filter);
		}
		
		int get_shadow_filter() const {
			return ptr.godot_icall(bindings::id_Light2D_get_shadow_filter);
		}
		
		void set_shadow_color(const Color &in shadow_color) {
			ptr.godot_icall(bindings::id_Light2D_set_shadow_color, shadow_color);
		}
		
		Color get_shadow_color() const {
			return ptr.godot_icall(bindings::id_Light2D_get_shadow_color);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Light2D);
		}
		
	}
	
	class AudioEffectDistortion : AudioEffect {
		
		
		void set_mode(int mode) {
			ptr.godot_icall(bindings::id_AudioEffectDistortion_set_mode, mode);
		}
		
		int get_mode() const {
			return ptr.godot_icall(bindings::id_AudioEffectDistortion_get_mode);
		}
		
		void set_pre_gain(float pre_gain) {
			ptr.godot_icall(bindings::id_AudioEffectDistortion_set_pre_gain, pre_gain);
		}
		
		float get_pre_gain() const {
			return ptr.godot_icall(bindings::id_AudioEffectDistortion_get_pre_gain);
		}
		
		void set_keep_hf_hz(float keep_hf_hz) {
			ptr.godot_icall(bindings::id_AudioEffectDistortion_set_keep_hf_hz, keep_hf_hz);
		}
		
		float get_keep_hf_hz() const {
			return ptr.godot_icall(bindings::id_AudioEffectDistortion_get_keep_hf_hz);
		}
		
		void set_drive(float drive) {
			ptr.godot_icall(bindings::id_AudioEffectDistortion_set_drive, drive);
		}
		
		float get_drive() const {
			return ptr.godot_icall(bindings::id_AudioEffectDistortion_get_drive);
		}
		
		void set_post_gain(float post_gain) {
			ptr.godot_icall(bindings::id_AudioEffectDistortion_set_post_gain, post_gain);
		}
		
		float get_post_gain() const {
			return ptr.godot_icall(bindings::id_AudioEffectDistortion_get_post_gain);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectDistortion)).ptr();
		}
		
	}
	
	class AudioEffectLowPassFilter : AudioEffectFilter {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectLowPassFilter)).ptr();
		}
		
	}
	
	class InputMap : Object {
		
		
		bool has_action(const String &in action) const {
			return ptr.godot_icall(bindings::id_InputMap_has_action, action);
		}
		
		Array get_actions() {
			return ptr.godot_icall(bindings::id_InputMap_get_actions);
		}
		
		void add_action(const String &in action) {
			ptr.godot_icall(bindings::id_InputMap_add_action, action);
		}
		
		void erase_action(const String &in action) {
			ptr.godot_icall(bindings::id_InputMap_erase_action, action);
		}
		
		void action_add_event(const String &in action, InputEvent@ event) {
			ptr.godot_icall(bindings::id_InputMap_action_add_event, action, event);
		}
		
		bool action_has_event(const String &in action, InputEvent@ event) {
			return ptr.godot_icall(bindings::id_InputMap_action_has_event, action, event);
		}
		
		void action_erase_event(const String &in action, InputEvent@ event) {
			ptr.godot_icall(bindings::id_InputMap_action_erase_event, action, event);
		}
		
		Array get_action_list(const String &in action) {
			return ptr.godot_icall(bindings::id_InputMap_get_action_list, action);
		}
		
		bool event_is_action(InputEvent@ event, const String &in action) const {
			return ptr.godot_icall(bindings::id_InputMap_event_is_action, event, action);
		}
		
		void load_from_globals() {
			ptr.godot_icall(bindings::id_InputMap_load_from_globals);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_InputMap);
		}
		
	}
	
	class Sprite3D : SpriteBase3D {
		
		
		void set_texture(Texture@ texture) {
			ptr.godot_icall(bindings::id_Sprite3D_set_texture, texture);
		}
		
		Texture@ get_texture() const {
			Texture ret = ptr.godot_icall(bindings::id_Sprite3D_get_texture);
			return  ret;
		}
		
		void set_region(bool enabled) {
			ptr.godot_icall(bindings::id_Sprite3D_set_region, enabled);
		}
		
		bool is_region() const {
			return ptr.godot_icall(bindings::id_Sprite3D_is_region);
		}
		
		void set_region_rect(const Rect2 &in rect) {
			ptr.godot_icall(bindings::id_Sprite3D_set_region_rect, rect);
		}
		
		Rect2 get_region_rect() const {
			return ptr.godot_icall(bindings::id_Sprite3D_get_region_rect);
		}
		
		void set_frame(int frame) {
			ptr.godot_icall(bindings::id_Sprite3D_set_frame, frame);
		}
		
		int get_frame() const {
			return ptr.godot_icall(bindings::id_Sprite3D_get_frame);
		}
		
		void set_vframes(int vframes) {
			ptr.godot_icall(bindings::id_Sprite3D_set_vframes, vframes);
		}
		
		int get_vframes() const {
			return ptr.godot_icall(bindings::id_Sprite3D_get_vframes);
		}
		
		void set_hframes(int hframes) {
			ptr.godot_icall(bindings::id_Sprite3D_set_hframes, hframes);
		}
		
		int get_hframes() const {
			return ptr.godot_icall(bindings::id_Sprite3D_get_hframes);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Sprite3D);
		}
		
	}
	
	class VehicleBody : RigidBody {
		
		
		void set_engine_force(float engine_force) {
			ptr.godot_icall(bindings::id_VehicleBody_set_engine_force, engine_force);
		}
		
		float get_engine_force() const {
			return ptr.godot_icall(bindings::id_VehicleBody_get_engine_force);
		}
		
		void set_brake(float brake) {
			ptr.godot_icall(bindings::id_VehicleBody_set_brake, brake);
		}
		
		float get_brake() const {
			return ptr.godot_icall(bindings::id_VehicleBody_get_brake);
		}
		
		void set_steering(float steering) {
			ptr.godot_icall(bindings::id_VehicleBody_set_steering, steering);
		}
		
		float get_steering() const {
			return ptr.godot_icall(bindings::id_VehicleBody_get_steering);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_VehicleBody);
		}
		
	}
	
	class VisualScriptConstructor : VisualScriptNode {
		
		
		void set_constructor_type(int type) {
			ptr.godot_icall(bindings::id_VisualScriptConstructor_set_constructor_type, type);
		}
		
		int get_constructor_type() const {
			return ptr.godot_icall(bindings::id_VisualScriptConstructor_get_constructor_type);
		}
		
		void set_constructor(const Dictionary &in constructor) {
			ptr.godot_icall(bindings::id_VisualScriptConstructor_set_constructor, constructor);
		}
		
		Dictionary get_constructor() const {
			return ptr.godot_icall(bindings::id_VisualScriptConstructor_get_constructor);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptConstructor)).ptr();
		}
		
	}
	
	class VisualScriptSubCall : VisualScriptNode {
		
		
		protected void _subcall(const Variant &in arguments) {
			
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptSubCall)).ptr();
		}
		
	}
	
	class VisualScriptFunction : VisualScriptNode {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptFunction)).ptr();
		}
		
	}
	
	class OccluderPolygon2D : Resource {
		
		
		void set_closed(bool closed) {
			ptr.godot_icall(bindings::id_OccluderPolygon2D_set_closed, closed);
		}
		
		bool is_closed() const {
			return ptr.godot_icall(bindings::id_OccluderPolygon2D_is_closed);
		}
		
		void set_cull_mode(int cull_mode) {
			ptr.godot_icall(bindings::id_OccluderPolygon2D_set_cull_mode, cull_mode);
		}
		
		int get_cull_mode() const {
			return ptr.godot_icall(bindings::id_OccluderPolygon2D_get_cull_mode);
		}
		
		void set_polygon(const PoolVector2Array &in polygon) {
			ptr.godot_icall(bindings::id_OccluderPolygon2D_set_polygon, polygon);
		}
		
		PoolVector2Array get_polygon() const {
			return ptr.godot_icall(bindings::id_OccluderPolygon2D_get_polygon);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_OccluderPolygon2D)).ptr();
		}
		
	}
	
	class Area2D : CollisionObject2D {
		
		
		protected void _body_enter_tree(int id) {
			ptr.godot_icall(bindings::id_Area2D__body_enter_tree, id);
		}
		
		protected void _body_exit_tree(int id) {
			ptr.godot_icall(bindings::id_Area2D__body_exit_tree, id);
		}
		
		protected void _area_enter_tree(int id) {
			ptr.godot_icall(bindings::id_Area2D__area_enter_tree, id);
		}
		
		protected void _area_exit_tree(int id) {
			ptr.godot_icall(bindings::id_Area2D__area_exit_tree, id);
		}
		
		void set_space_override_mode(int space_override_mode) {
			ptr.godot_icall(bindings::id_Area2D_set_space_override_mode, space_override_mode);
		}
		
		int get_space_override_mode() const {
			return ptr.godot_icall(bindings::id_Area2D_get_space_override_mode);
		}
		
		void set_gravity_is_point(bool enable) {
			ptr.godot_icall(bindings::id_Area2D_set_gravity_is_point, enable);
		}
		
		bool is_gravity_a_point() const {
			return ptr.godot_icall(bindings::id_Area2D_is_gravity_a_point);
		}
		
		void set_gravity_distance_scale(float distance_scale) {
			ptr.godot_icall(bindings::id_Area2D_set_gravity_distance_scale, distance_scale);
		}
		
		float get_gravity_distance_scale() const {
			return ptr.godot_icall(bindings::id_Area2D_get_gravity_distance_scale);
		}
		
		void set_gravity_vector(const Vector2 &in vector) {
			ptr.godot_icall(bindings::id_Area2D_set_gravity_vector, vector);
		}
		
		Vector2 get_gravity_vector() const {
			return ptr.godot_icall(bindings::id_Area2D_get_gravity_vector);
		}
		
		void set_gravity(float gravity) {
			ptr.godot_icall(bindings::id_Area2D_set_gravity, gravity);
		}
		
		float get_gravity() const {
			return ptr.godot_icall(bindings::id_Area2D_get_gravity);
		}
		
		void set_linear_damp(float linear_damp) {
			ptr.godot_icall(bindings::id_Area2D_set_linear_damp, linear_damp);
		}
		
		float get_linear_damp() const {
			return ptr.godot_icall(bindings::id_Area2D_get_linear_damp);
		}
		
		void set_angular_damp(float angular_damp) {
			ptr.godot_icall(bindings::id_Area2D_set_angular_damp, angular_damp);
		}
		
		float get_angular_damp() const {
			return ptr.godot_icall(bindings::id_Area2D_get_angular_damp);
		}
		
		void set_priority(float priority) {
			ptr.godot_icall(bindings::id_Area2D_set_priority, priority);
		}
		
		float get_priority() const {
			return ptr.godot_icall(bindings::id_Area2D_get_priority);
		}
		
		void set_collision_mask(int collision_mask) {
			ptr.godot_icall(bindings::id_Area2D_set_collision_mask, collision_mask);
		}
		
		int get_collision_mask() const {
			return ptr.godot_icall(bindings::id_Area2D_get_collision_mask);
		}
		
		void set_collision_layer(int collision_layer) {
			ptr.godot_icall(bindings::id_Area2D_set_collision_layer, collision_layer);
		}
		
		int get_collision_layer() const {
			return ptr.godot_icall(bindings::id_Area2D_get_collision_layer);
		}
		
		void set_collision_mask_bit(int bit, bool value) {
			ptr.godot_icall(bindings::id_Area2D_set_collision_mask_bit, bit, value);
		}
		
		bool get_collision_mask_bit(int bit) const {
			return ptr.godot_icall(bindings::id_Area2D_get_collision_mask_bit, bit);
		}
		
		void set_collision_layer_bit(int bit, bool value) {
			ptr.godot_icall(bindings::id_Area2D_set_collision_layer_bit, bit, value);
		}
		
		bool get_collision_layer_bit(int bit) const {
			return ptr.godot_icall(bindings::id_Area2D_get_collision_layer_bit, bit);
		}
		
		void set_monitoring(bool enable) {
			ptr.godot_icall(bindings::id_Area2D_set_monitoring, enable);
		}
		
		bool is_monitoring() const {
			return ptr.godot_icall(bindings::id_Area2D_is_monitoring);
		}
		
		void set_monitorable(bool enable) {
			ptr.godot_icall(bindings::id_Area2D_set_monitorable, enable);
		}
		
		bool is_monitorable() const {
			return ptr.godot_icall(bindings::id_Area2D_is_monitorable);
		}
		
		Array get_overlapping_bodies() const {
			return ptr.godot_icall(bindings::id_Area2D_get_overlapping_bodies);
		}
		
		Array get_overlapping_areas() const {
			return ptr.godot_icall(bindings::id_Area2D_get_overlapping_areas);
		}
		
		bool overlaps_body(Node@ body) const {
			return ptr.godot_icall(bindings::id_Area2D_overlaps_body, body);
		}
		
		bool overlaps_area(Node@ area) const {
			return ptr.godot_icall(bindings::id_Area2D_overlaps_area, area);
		}
		
		void set_audio_bus_name(const String &in name) {
			ptr.godot_icall(bindings::id_Area2D_set_audio_bus_name, name);
		}
		
		String get_audio_bus_name() const {
			return ptr.godot_icall(bindings::id_Area2D_get_audio_bus_name);
		}
		
		void set_audio_bus_override(bool enable) {
			ptr.godot_icall(bindings::id_Area2D_set_audio_bus_override, enable);
		}
		
		bool is_overriding_audio_bus() const {
			return ptr.godot_icall(bindings::id_Area2D_is_overriding_audio_bus);
		}
		
		protected void _body_inout(int arg0, const RID &in arg1, int arg2, int arg3, int arg4) {
			ptr.godot_icall(bindings::id_Area2D__body_inout, arg0, arg1, arg2, arg3, arg4);
		}
		
		protected void _area_inout(int arg0, const RID &in arg1, int arg2, int arg3, int arg4) {
			ptr.godot_icall(bindings::id_Area2D__area_inout, arg0, arg1, arg2, arg3, arg4);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Area2D);
		}
		
	}
	
	class Reference : Object {
		
		
		bool init_ref() {
			return ptr.godot_icall(bindings::id_Reference_init_ref);
		}
		
		bool reference() {
			return ptr.godot_icall(bindings::id_Reference_reference);
		}
		
		bool unreference() {
			return ptr.godot_icall(bindings::id_Reference_unreference);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Reference)).ptr();
		}
		
		Variant opImplConv() const {
			return ref;
		}

		void opAssign(const Variant &in ref) {
			@ptr = (this.ref = ref).ptr();
		}

		protected REF ref;
	
	}
	
	class SplitContainer : Container {
		
		
		protected void _gui_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_SplitContainer__gui_input, arg0);
		}
		
		void set_split_offset(int offset) {
			ptr.godot_icall(bindings::id_SplitContainer_set_split_offset, offset);
		}
		
		int get_split_offset() const {
			return ptr.godot_icall(bindings::id_SplitContainer_get_split_offset);
		}
		
		void set_collapsed(bool collapsed) {
			ptr.godot_icall(bindings::id_SplitContainer_set_collapsed, collapsed);
		}
		
		bool is_collapsed() const {
			return ptr.godot_icall(bindings::id_SplitContainer_is_collapsed);
		}
		
		void set_dragger_visibility(int mode) {
			ptr.godot_icall(bindings::id_SplitContainer_set_dragger_visibility, mode);
		}
		
		int get_dragger_visibility() const {
			return ptr.godot_icall(bindings::id_SplitContainer_get_dragger_visibility);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_SplitContainer);
		}
		
	}
	
	class HingeJoint : Joint {
		
		
		void set_param(int param, float value) {
			ptr.godot_icall(bindings::id_HingeJoint_set_param, param, value);
		}
		
		float get_param(int param) const {
			return ptr.godot_icall(bindings::id_HingeJoint_get_param, param);
		}
		
		void set_flag(int flag, bool enabled) {
			ptr.godot_icall(bindings::id_HingeJoint_set_flag, flag, enabled);
		}
		
		bool get_flag(int flag) const {
			return ptr.godot_icall(bindings::id_HingeJoint_get_flag, flag);
		}
		
		protected void _set_upper_limit(float upper_limit) {
			ptr.godot_icall(bindings::id_HingeJoint__set_upper_limit, upper_limit);
		}
		
		protected float _get_upper_limit() const {
			return ptr.godot_icall(bindings::id_HingeJoint__get_upper_limit);
		}
		
		protected void _set_lower_limit(float lower_limit) {
			ptr.godot_icall(bindings::id_HingeJoint__set_lower_limit, lower_limit);
		}
		
		protected float _get_lower_limit() const {
			return ptr.godot_icall(bindings::id_HingeJoint__get_lower_limit);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_HingeJoint);
		}
		
	}
	
	class Material : Resource {
		
		
		void set_next_pass(Material@ next_pass) {
			ptr.godot_icall(bindings::id_Material_set_next_pass, next_pass);
		}
		
		Material@ get_next_pass() const {
			Material ret = ptr.godot_icall(bindings::id_Material_get_next_pass);
			return  ret;
		}
		
		void set_render_priority(int priority) {
			ptr.godot_icall(bindings::id_Material_set_render_priority, priority);
		}
		
		int get_render_priority() const {
			return ptr.godot_icall(bindings::id_Material_get_render_priority);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Material)).ptr();
		}
		
	}
	
	class VisualScriptCondition : VisualScriptNode {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptCondition)).ptr();
		}
		
	}
	
	class VisualScriptPreload : VisualScriptNode {
		
		
		void set_preload(Resource@ resource) {
			ptr.godot_icall(bindings::id_VisualScriptPreload_set_preload, resource);
		}
		
		Resource@ get_preload() const {
			Resource ret = ptr.godot_icall(bindings::id_VisualScriptPreload_get_preload);
			return  ret;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptPreload)).ptr();
		}
		
	}
	
	class VisualScriptFunctionState : Reference {
		
		
		void connect_to_signal(Object@ obj, const String &in signals, const Array &in args) {
			ptr.godot_icall(bindings::id_VisualScriptFunctionState_connect_to_signal, obj, signals, args);
		}
		
		Variant resume(const Array &in args) {
			return ptr.godot_icall(bindings::id_VisualScriptFunctionState_resume, args);
		}
		
		bool is_valid() const {
			return ptr.godot_icall(bindings::id_VisualScriptFunctionState_is_valid);
		}
		
		protected Variant _signal_callback() {
			return ptr.godot_icall(bindings::id_VisualScriptFunctionState__signal_callback);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptFunctionState)).ptr();
		}
		
	}
	
	class AudioStreamOGGVorbis : AudioStream {
		
		
		protected void _set_data(const PoolByteArray &in data) {
			ptr.godot_icall(bindings::id_AudioStreamOGGVorbis__set_data, data);
		}
		
		protected PoolByteArray _get_data() const {
			return ptr.godot_icall(bindings::id_AudioStreamOGGVorbis__get_data);
		}
		
		void set_loop(bool enable) {
			ptr.godot_icall(bindings::id_AudioStreamOGGVorbis_set_loop, enable);
		}
		
		bool has_loop() const {
			return ptr.godot_icall(bindings::id_AudioStreamOGGVorbis_has_loop);
		}
		
		void set_loop_offset(float seconds) {
			ptr.godot_icall(bindings::id_AudioStreamOGGVorbis_set_loop_offset, seconds);
		}
		
		float get_loop_offset() const {
			return ptr.godot_icall(bindings::id_AudioStreamOGGVorbis_get_loop_offset);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioStreamOGGVorbis)).ptr();
		}
		
	}
	
	class Physics2DServer : Object {
		
		
		RID line_shape_create() {
			return ptr.godot_icall(bindings::id_Physics2DServer_line_shape_create);
		}
		
		RID ray_shape_create() {
			return ptr.godot_icall(bindings::id_Physics2DServer_ray_shape_create);
		}
		
		RID segment_shape_create() {
			return ptr.godot_icall(bindings::id_Physics2DServer_segment_shape_create);
		}
		
		RID circle_shape_create() {
			return ptr.godot_icall(bindings::id_Physics2DServer_circle_shape_create);
		}
		
		RID rectangle_shape_create() {
			return ptr.godot_icall(bindings::id_Physics2DServer_rectangle_shape_create);
		}
		
		RID capsule_shape_create() {
			return ptr.godot_icall(bindings::id_Physics2DServer_capsule_shape_create);
		}
		
		RID convex_polygon_shape_create() {
			return ptr.godot_icall(bindings::id_Physics2DServer_convex_polygon_shape_create);
		}
		
		RID concave_polygon_shape_create() {
			return ptr.godot_icall(bindings::id_Physics2DServer_concave_polygon_shape_create);
		}
		
		void shape_set_data(const RID &in shape, const Variant &in data) {
			ptr.godot_icall(bindings::id_Physics2DServer_shape_set_data, shape, data);
		}
		
		int shape_get_type(const RID &in shape) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_shape_get_type, shape);
		}
		
		Variant shape_get_data(const RID &in shape) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_shape_get_data, shape);
		}
		
		RID space_create() {
			return ptr.godot_icall(bindings::id_Physics2DServer_space_create);
		}
		
		void space_set_active(const RID &in space, bool active) {
			ptr.godot_icall(bindings::id_Physics2DServer_space_set_active, space, active);
		}
		
		bool space_is_active(const RID &in space) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_space_is_active, space);
		}
		
		void space_set_param(const RID &in space, int param, float value) {
			ptr.godot_icall(bindings::id_Physics2DServer_space_set_param, space, param, value);
		}
		
		float space_get_param(const RID &in space, int param) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_space_get_param, space, param);
		}
		
		Physics2DDirectSpaceState@ space_get_direct_state(const RID &in space) {
			Physics2DDirectSpaceState ret = ptr.godot_icall(bindings::id_Physics2DServer_space_get_direct_state, space);
			return  ret;
		}
		
		RID area_create() {
			return ptr.godot_icall(bindings::id_Physics2DServer_area_create);
		}
		
		void area_set_space(const RID &in area, const RID &in space) {
			ptr.godot_icall(bindings::id_Physics2DServer_area_set_space, area, space);
		}
		
		RID area_get_space(const RID &in area) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_area_get_space, area);
		}
		
		void area_set_space_override_mode(const RID &in area, int mode) {
			ptr.godot_icall(bindings::id_Physics2DServer_area_set_space_override_mode, area, mode);
		}
		
		int area_get_space_override_mode(const RID &in area) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_area_get_space_override_mode, area);
		}
		
		void area_add_shape(const RID &in area, const RID &in shape, const Transform2D &in transform) {
			ptr.godot_icall(bindings::id_Physics2DServer_area_add_shape, area, shape, transform);
		}
		
		void area_set_shape(const RID &in area, int shape_idx, const RID &in shape) {
			ptr.godot_icall(bindings::id_Physics2DServer_area_set_shape, area, shape_idx, shape);
		}
		
		void area_set_shape_transform(const RID &in area, int shape_idx, const Transform2D &in transform) {
			ptr.godot_icall(bindings::id_Physics2DServer_area_set_shape_transform, area, shape_idx, transform);
		}
		
		void area_set_shape_disabled(const RID &in area, int shape_idx, bool disable) {
			ptr.godot_icall(bindings::id_Physics2DServer_area_set_shape_disabled, area, shape_idx, disable);
		}
		
		int area_get_shape_count(const RID &in area) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_area_get_shape_count, area);
		}
		
		RID area_get_shape(const RID &in area, int shape_idx) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_area_get_shape, area, shape_idx);
		}
		
		Transform2D area_get_shape_transform(const RID &in area, int shape_idx) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_area_get_shape_transform, area, shape_idx);
		}
		
		void area_remove_shape(const RID &in area, int shape_idx) {
			ptr.godot_icall(bindings::id_Physics2DServer_area_remove_shape, area, shape_idx);
		}
		
		void area_clear_shapes(const RID &in area) {
			ptr.godot_icall(bindings::id_Physics2DServer_area_clear_shapes, area);
		}
		
		void area_set_collision_layer(const RID &in area, int layer) {
			ptr.godot_icall(bindings::id_Physics2DServer_area_set_collision_layer, area, layer);
		}
		
		void area_set_collision_mask(const RID &in area, int mask) {
			ptr.godot_icall(bindings::id_Physics2DServer_area_set_collision_mask, area, mask);
		}
		
		void area_set_param(const RID &in area, int param, const Variant &in value) {
			ptr.godot_icall(bindings::id_Physics2DServer_area_set_param, area, param, value);
		}
		
		void area_set_transform(const RID &in area, const Transform2D &in transform) {
			ptr.godot_icall(bindings::id_Physics2DServer_area_set_transform, area, transform);
		}
		
		Variant area_get_param(const RID &in area, int param) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_area_get_param, area, param);
		}
		
		Transform2D area_get_transform(const RID &in area) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_area_get_transform, area);
		}
		
		void area_attach_object_instance_id(const RID &in area, int id) {
			ptr.godot_icall(bindings::id_Physics2DServer_area_attach_object_instance_id, area, id);
		}
		
		int area_get_object_instance_id(const RID &in area) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_area_get_object_instance_id, area);
		}
		
		void area_set_monitor_callback(const RID &in area, Object@ receiver, const String &in method) {
			ptr.godot_icall(bindings::id_Physics2DServer_area_set_monitor_callback, area, receiver, method);
		}
		
		RID body_create() {
			return ptr.godot_icall(bindings::id_Physics2DServer_body_create);
		}
		
		void body_set_space(const RID &in body, const RID &in space) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_set_space, body, space);
		}
		
		RID body_get_space(const RID &in body) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_body_get_space, body);
		}
		
		void body_set_mode(const RID &in body, int mode) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_set_mode, body, mode);
		}
		
		int body_get_mode(const RID &in body) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_body_get_mode, body);
		}
		
		void body_add_shape(const RID &in body, const RID &in shape, const Transform2D &in transform) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_add_shape, body, shape, transform);
		}
		
		void body_set_shape(const RID &in body, int shape_idx, const RID &in shape) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_set_shape, body, shape_idx, shape);
		}
		
		void body_set_shape_transform(const RID &in body, int shape_idx, const Transform2D &in transform) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_set_shape_transform, body, shape_idx, transform);
		}
		
		void body_set_shape_metadata(const RID &in body, int shape_idx, const Variant &in metadata) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_set_shape_metadata, body, shape_idx, metadata);
		}
		
		int body_get_shape_count(const RID &in body) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_body_get_shape_count, body);
		}
		
		RID body_get_shape(const RID &in body, int shape_idx) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_body_get_shape, body, shape_idx);
		}
		
		Transform2D body_get_shape_transform(const RID &in body, int shape_idx) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_body_get_shape_transform, body, shape_idx);
		}
		
		Variant body_get_shape_metadata(const RID &in body, int shape_idx) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_body_get_shape_metadata, body, shape_idx);
		}
		
		void body_remove_shape(const RID &in body, int shape_idx) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_remove_shape, body, shape_idx);
		}
		
		void body_clear_shapes(const RID &in body) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_clear_shapes, body);
		}
		
		void body_set_shape_disabled(const RID &in body, int shape_idx, bool disable) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_set_shape_disabled, body, shape_idx, disable);
		}
		
		void body_set_shape_as_one_way_collision(const RID &in body, int shape_idx, bool enable) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_set_shape_as_one_way_collision, body, shape_idx, enable);
		}
		
		void body_attach_object_instance_id(const RID &in body, int id) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_attach_object_instance_id, body, id);
		}
		
		int body_get_object_instance_id(const RID &in body) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_body_get_object_instance_id, body);
		}
		
		void body_set_continuous_collision_detection_mode(const RID &in body, int mode) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_set_continuous_collision_detection_mode, body, mode);
		}
		
		int body_get_continuous_collision_detection_mode(const RID &in body) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_body_get_continuous_collision_detection_mode, body);
		}
		
		void body_set_collision_layer(const RID &in body, int layer) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_set_collision_layer, body, layer);
		}
		
		int body_get_collision_layer(const RID &in body) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_body_get_collision_layer, body);
		}
		
		void body_set_collision_mask(const RID &in body, int mask) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_set_collision_mask, body, mask);
		}
		
		int body_get_collision_mask(const RID &in body) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_body_get_collision_mask, body);
		}
		
		void body_set_param(const RID &in body, int param, float value) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_set_param, body, param, value);
		}
		
		float body_get_param(const RID &in body, int param) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_body_get_param, body, param);
		}
		
		void body_set_state(const RID &in body, int state, const Variant &in value) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_set_state, body, state, value);
		}
		
		Variant body_get_state(const RID &in body, int state) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_body_get_state, body, state);
		}
		
		void body_apply_impulse(const RID &in body, const Vector2 &in position, const Vector2 &in impulse) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_apply_impulse, body, position, impulse);
		}
		
		void body_add_force(const RID &in body, const Vector2 &in offset, const Vector2 &in force) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_add_force, body, offset, force);
		}
		
		void body_set_axis_velocity(const RID &in body, const Vector2 &in axis_velocity) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_set_axis_velocity, body, axis_velocity);
		}
		
		void body_add_collision_exception(const RID &in body, const RID &in excepted_body) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_add_collision_exception, body, excepted_body);
		}
		
		void body_remove_collision_exception(const RID &in body, const RID &in excepted_body) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_remove_collision_exception, body, excepted_body);
		}
		
		void body_set_max_contacts_reported(const RID &in body, int amount) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_set_max_contacts_reported, body, amount);
		}
		
		int body_get_max_contacts_reported(const RID &in body) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_body_get_max_contacts_reported, body);
		}
		
		void body_set_omit_force_integration(const RID &in body, bool enable) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_set_omit_force_integration, body, enable);
		}
		
		bool body_is_omitting_force_integration(const RID &in body) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_body_is_omitting_force_integration, body);
		}
		
		void body_set_force_integration_callback(const RID &in body, Object@ receiver, const String &in method, const Variant &in userdata) {
			ptr.godot_icall(bindings::id_Physics2DServer_body_set_force_integration_callback, body, receiver, method, userdata);
		}
		
		bool body_test_motion(const RID &in body, const Transform2D &in From, const Vector2 &in motion, float margin, Physics2DTestMotionResult@ result) {
			return ptr.godot_icall(bindings::id_Physics2DServer_body_test_motion, body, From, motion, margin, result);
		}
		
		Physics2DDirectBodyState@ body_get_direct_state(const RID &in body) {
			Physics2DDirectBodyState ret = ptr.godot_icall(bindings::id_Physics2DServer_body_get_direct_state, body);
			return  ret;
		}
		
		void joint_set_param(const RID &in joint, int param, float value) {
			ptr.godot_icall(bindings::id_Physics2DServer_joint_set_param, joint, param, value);
		}
		
		float joint_get_param(const RID &in joint, int param) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_joint_get_param, joint, param);
		}
		
		RID pin_joint_create(const Vector2 &in anchor, const RID &in body_a, const RID &in body_b) {
			return ptr.godot_icall(bindings::id_Physics2DServer_pin_joint_create, anchor, body_a, body_b);
		}
		
		RID groove_joint_create(const Vector2 &in groove1_a, const Vector2 &in groove2_a, const Vector2 &in anchor_b, const RID &in body_a, const RID &in body_b) {
			return ptr.godot_icall(bindings::id_Physics2DServer_groove_joint_create, groove1_a, groove2_a, anchor_b, body_a, body_b);
		}
		
		RID damped_spring_joint_create(const Vector2 &in anchor_a, const Vector2 &in anchor_b, const RID &in body_a, const RID &in body_b) {
			return ptr.godot_icall(bindings::id_Physics2DServer_damped_spring_joint_create, anchor_a, anchor_b, body_a, body_b);
		}
		
		void damped_string_joint_set_param(const RID &in joint, int param, float value) {
			ptr.godot_icall(bindings::id_Physics2DServer_damped_string_joint_set_param, joint, param, value);
		}
		
		float damped_string_joint_get_param(const RID &in joint, int param) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_damped_string_joint_get_param, joint, param);
		}
		
		int joint_get_type(const RID &in joint) const {
			return ptr.godot_icall(bindings::id_Physics2DServer_joint_get_type, joint);
		}
		
		void free_rid(const RID &in rid) {
			ptr.godot_icall(bindings::id_Physics2DServer_free_rid, rid);
		}
		
		void set_active(bool active) {
			ptr.godot_icall(bindings::id_Physics2DServer_set_active, active);
		}
		
		int get_process_info(int process_info) {
			return ptr.godot_icall(bindings::id_Physics2DServer_get_process_info, process_info);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Physics2DServer);
		}
		
	}
	
	class InputEventScreenDrag : InputEvent {
		
		
		void set_index(int index) {
			ptr.godot_icall(bindings::id_InputEventScreenDrag_set_index, index);
		}
		
		int get_index() const {
			return ptr.godot_icall(bindings::id_InputEventScreenDrag_get_index);
		}
		
		void set_position(const Vector2 &in position) {
			ptr.godot_icall(bindings::id_InputEventScreenDrag_set_position, position);
		}
		
		Vector2 get_position() const {
			return ptr.godot_icall(bindings::id_InputEventScreenDrag_get_position);
		}
		
		void set_relative(const Vector2 &in relative) {
			ptr.godot_icall(bindings::id_InputEventScreenDrag_set_relative, relative);
		}
		
		Vector2 get_relative() const {
			return ptr.godot_icall(bindings::id_InputEventScreenDrag_get_relative);
		}
		
		void set_speed(const Vector2 &in speed) {
			ptr.godot_icall(bindings::id_InputEventScreenDrag_set_speed, speed);
		}
		
		Vector2 get_speed() const {
			return ptr.godot_icall(bindings::id_InputEventScreenDrag_get_speed);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_InputEventScreenDrag)).ptr();
		}
		
	}
	
	class PacketPeerStream : PacketPeer {
		
		
		void set_stream_peer(StreamPeer@ peer) {
			ptr.godot_icall(bindings::id_PacketPeerStream_set_stream_peer, peer);
		}
		
		StreamPeer@ get_stream_peer() const {
			StreamPeer ret = ptr.godot_icall(bindings::id_PacketPeerStream_get_stream_peer);
			return  ret;
		}
		
		void set_input_buffer_max_size(int max_size_bytes) {
			ptr.godot_icall(bindings::id_PacketPeerStream_set_input_buffer_max_size, max_size_bytes);
		}
		
		void set_output_buffer_max_size(int max_size_bytes) {
			ptr.godot_icall(bindings::id_PacketPeerStream_set_output_buffer_max_size, max_size_bytes);
		}
		
		int get_input_buffer_max_size() const {
			return ptr.godot_icall(bindings::id_PacketPeerStream_get_input_buffer_max_size);
		}
		
		int get_output_buffer_max_size() const {
			return ptr.godot_icall(bindings::id_PacketPeerStream_get_output_buffer_max_size);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_PacketPeerStream)).ptr();
		}
		
	}
	
	class Tree : Control {
		
		
		protected void _range_click_timeout() {
			ptr.godot_icall(bindings::id_Tree__range_click_timeout);
		}
		
		protected void _gui_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_Tree__gui_input, arg0);
		}
		
		protected void _popup_select(int arg0) {
			ptr.godot_icall(bindings::id_Tree__popup_select, arg0);
		}
		
		protected void _text_editor_enter(const String &in arg0) {
			ptr.godot_icall(bindings::id_Tree__text_editor_enter, arg0);
		}
		
		protected void _text_editor_modal_close() {
			ptr.godot_icall(bindings::id_Tree__text_editor_modal_close);
		}
		
		protected void _value_editor_changed(float arg0) {
			ptr.godot_icall(bindings::id_Tree__value_editor_changed, arg0);
		}
		
		protected void _scroll_moved(float arg0) {
			ptr.godot_icall(bindings::id_Tree__scroll_moved, arg0);
		}
		
		void clear() {
			ptr.godot_icall(bindings::id_Tree_clear);
		}
		
		Object@ create_item(Object@ parent, int idx) {
			Object ret = ptr.godot_icall(bindings::id_Tree_create_item, parent, idx);
			return  ret;
		}
		
		TreeItem@ get_root() {
			TreeItem ret = ptr.godot_icall(bindings::id_Tree_get_root);
			return  ret;
		}
		
		void set_column_min_width(int column, int min_width) {
			ptr.godot_icall(bindings::id_Tree_set_column_min_width, column, min_width);
		}
		
		void set_column_expand(int column, bool expand) {
			ptr.godot_icall(bindings::id_Tree_set_column_expand, column, expand);
		}
		
		int get_column_width(int column) const {
			return ptr.godot_icall(bindings::id_Tree_get_column_width, column);
		}
		
		void set_hide_root(bool enable) {
			ptr.godot_icall(bindings::id_Tree_set_hide_root, enable);
		}
		
		bool is_root_hidden() const {
			return ptr.godot_icall(bindings::id_Tree_is_root_hidden);
		}
		
		TreeItem@ get_next_selected(Object@ From) {
			TreeItem ret = ptr.godot_icall(bindings::id_Tree_get_next_selected, From);
			return  ret;
		}
		
		TreeItem@ get_selected() const {
			TreeItem ret = ptr.godot_icall(bindings::id_Tree_get_selected);
			return  ret;
		}
		
		int get_selected_column() const {
			return ptr.godot_icall(bindings::id_Tree_get_selected_column);
		}
		
		int get_pressed_button() const {
			return ptr.godot_icall(bindings::id_Tree_get_pressed_button);
		}
		
		void set_select_mode(int mode) {
			ptr.godot_icall(bindings::id_Tree_set_select_mode, mode);
		}
		
		int get_select_mode() const {
			return ptr.godot_icall(bindings::id_Tree_get_select_mode);
		}
		
		void set_columns(int amount) {
			ptr.godot_icall(bindings::id_Tree_set_columns, amount);
		}
		
		int get_columns() const {
			return ptr.godot_icall(bindings::id_Tree_get_columns);
		}
		
		TreeItem@ get_edited() const {
			TreeItem ret = ptr.godot_icall(bindings::id_Tree_get_edited);
			return  ret;
		}
		
		int get_edited_column() const {
			return ptr.godot_icall(bindings::id_Tree_get_edited_column);
		}
		
		Rect2 get_custom_popup_rect() const {
			return ptr.godot_icall(bindings::id_Tree_get_custom_popup_rect);
		}
		
		Rect2 get_item_area_rect(Object@ item, int column) const {
			return ptr.godot_icall(bindings::id_Tree_get_item_area_rect, item, column);
		}
		
		TreeItem@ get_item_at_position(const Vector2 &in position) const {
			TreeItem ret = ptr.godot_icall(bindings::id_Tree_get_item_at_position, position);
			return  ret;
		}
		
		int get_column_at_position(const Vector2 &in position) const {
			return ptr.godot_icall(bindings::id_Tree_get_column_at_position, position);
		}
		
		int get_drop_section_at_position(const Vector2 &in position) const {
			return ptr.godot_icall(bindings::id_Tree_get_drop_section_at_position, position);
		}
		
		void ensure_cursor_is_visible() {
			ptr.godot_icall(bindings::id_Tree_ensure_cursor_is_visible);
		}
		
		void set_column_titles_visible(bool visible) {
			ptr.godot_icall(bindings::id_Tree_set_column_titles_visible, visible);
		}
		
		bool are_column_titles_visible() const {
			return ptr.godot_icall(bindings::id_Tree_are_column_titles_visible);
		}
		
		void set_column_title(int column, const String &in title) {
			ptr.godot_icall(bindings::id_Tree_set_column_title, column, title);
		}
		
		String get_column_title(int column) const {
			return ptr.godot_icall(bindings::id_Tree_get_column_title, column);
		}
		
		Vector2 get_scroll() const {
			return ptr.godot_icall(bindings::id_Tree_get_scroll);
		}
		
		void set_hide_folding(bool hide) {
			ptr.godot_icall(bindings::id_Tree_set_hide_folding, hide);
		}
		
		bool is_folding_hidden() const {
			return ptr.godot_icall(bindings::id_Tree_is_folding_hidden);
		}
		
		void set_drop_mode_flags(int flags) {
			ptr.godot_icall(bindings::id_Tree_set_drop_mode_flags, flags);
		}
		
		int get_drop_mode_flags() const {
			return ptr.godot_icall(bindings::id_Tree_get_drop_mode_flags);
		}
		
		void set_allow_rmb_select(bool allow) {
			ptr.godot_icall(bindings::id_Tree_set_allow_rmb_select, allow);
		}
		
		bool get_allow_rmb_select() const {
			return ptr.godot_icall(bindings::id_Tree_get_allow_rmb_select);
		}
		
		void set_allow_reselect(bool allow) {
			ptr.godot_icall(bindings::id_Tree_set_allow_reselect, allow);
		}
		
		bool get_allow_reselect() const {
			return ptr.godot_icall(bindings::id_Tree_get_allow_reselect);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Tree);
		}
		
	}
	
	class Generic6DOFJoint : Joint {
		
		
		protected void _set_angular_hi_limit_x(float angle) {
			ptr.godot_icall(bindings::id_Generic6DOFJoint__set_angular_hi_limit_x, angle);
		}
		
		protected float _get_angular_hi_limit_x() const {
			return ptr.godot_icall(bindings::id_Generic6DOFJoint__get_angular_hi_limit_x);
		}
		
		protected void _set_angular_lo_limit_x(float angle) {
			ptr.godot_icall(bindings::id_Generic6DOFJoint__set_angular_lo_limit_x, angle);
		}
		
		protected float _get_angular_lo_limit_x() const {
			return ptr.godot_icall(bindings::id_Generic6DOFJoint__get_angular_lo_limit_x);
		}
		
		protected void _set_angular_hi_limit_y(float angle) {
			ptr.godot_icall(bindings::id_Generic6DOFJoint__set_angular_hi_limit_y, angle);
		}
		
		protected float _get_angular_hi_limit_y() const {
			return ptr.godot_icall(bindings::id_Generic6DOFJoint__get_angular_hi_limit_y);
		}
		
		protected void _set_angular_lo_limit_y(float angle) {
			ptr.godot_icall(bindings::id_Generic6DOFJoint__set_angular_lo_limit_y, angle);
		}
		
		protected float _get_angular_lo_limit_y() const {
			return ptr.godot_icall(bindings::id_Generic6DOFJoint__get_angular_lo_limit_y);
		}
		
		protected void _set_angular_hi_limit_z(float angle) {
			ptr.godot_icall(bindings::id_Generic6DOFJoint__set_angular_hi_limit_z, angle);
		}
		
		protected float _get_angular_hi_limit_z() const {
			return ptr.godot_icall(bindings::id_Generic6DOFJoint__get_angular_hi_limit_z);
		}
		
		protected void _set_angular_lo_limit_z(float angle) {
			ptr.godot_icall(bindings::id_Generic6DOFJoint__set_angular_lo_limit_z, angle);
		}
		
		protected float _get_angular_lo_limit_z() const {
			return ptr.godot_icall(bindings::id_Generic6DOFJoint__get_angular_lo_limit_z);
		}
		
		void set_param_x(int param, float value) {
			ptr.godot_icall(bindings::id_Generic6DOFJoint_set_param_x, param, value);
		}
		
		float get_param_x(int param) const {
			return ptr.godot_icall(bindings::id_Generic6DOFJoint_get_param_x, param);
		}
		
		void set_param_y(int param, float value) {
			ptr.godot_icall(bindings::id_Generic6DOFJoint_set_param_y, param, value);
		}
		
		float get_param_y(int param) const {
			return ptr.godot_icall(bindings::id_Generic6DOFJoint_get_param_y, param);
		}
		
		void set_param_z(int param, float value) {
			ptr.godot_icall(bindings::id_Generic6DOFJoint_set_param_z, param, value);
		}
		
		float get_param_z(int param) const {
			return ptr.godot_icall(bindings::id_Generic6DOFJoint_get_param_z, param);
		}
		
		void set_flag_x(int flag, bool value) {
			ptr.godot_icall(bindings::id_Generic6DOFJoint_set_flag_x, flag, value);
		}
		
		bool get_flag_x(int flag) const {
			return ptr.godot_icall(bindings::id_Generic6DOFJoint_get_flag_x, flag);
		}
		
		void set_flag_y(int flag, bool value) {
			ptr.godot_icall(bindings::id_Generic6DOFJoint_set_flag_y, flag, value);
		}
		
		bool get_flag_y(int flag) const {
			return ptr.godot_icall(bindings::id_Generic6DOFJoint_get_flag_y, flag);
		}
		
		void set_flag_z(int flag, bool value) {
			ptr.godot_icall(bindings::id_Generic6DOFJoint_set_flag_z, flag, value);
		}
		
		bool get_flag_z(int flag) const {
			return ptr.godot_icall(bindings::id_Generic6DOFJoint_get_flag_z, flag);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Generic6DOFJoint);
		}
		
	}
	
	class EditorResourcePreview : Node {
		
		
		protected void _preview_ready(const String &in arg0, Texture@ arg1, int arg2, const String &in arg3, const Variant &in arg4) {
			ptr.godot_icall(bindings::id_EditorResourcePreview__preview_ready, arg0, arg1, arg2, arg3, arg4);
		}
		
		void queue_resource_preview(const String &in path, Object@ receiver, const String &in receiver_func, const Variant &in userdata) {
			ptr.godot_icall(bindings::id_EditorResourcePreview_queue_resource_preview, path, receiver, receiver_func, userdata);
		}
		
		void queue_edited_resource_preview(Resource@ resource, Object@ receiver, const String &in receiver_func, const Variant &in userdata) {
			ptr.godot_icall(bindings::id_EditorResourcePreview_queue_edited_resource_preview, resource, receiver, receiver_func, userdata);
		}
		
		void add_preview_generator(EditorResourcePreviewGenerator@ generator) {
			ptr.godot_icall(bindings::id_EditorResourcePreview_add_preview_generator, generator);
		}
		
		void remove_preview_generator(EditorResourcePreviewGenerator@ generator) {
			ptr.godot_icall(bindings::id_EditorResourcePreview_remove_preview_generator, generator);
		}
		
		void check_for_invalidation(const String &in path) {
			ptr.godot_icall(bindings::id_EditorResourcePreview_check_for_invalidation, path);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_EditorResourcePreview);
		}
		
	}
	
	class ViewportTexture : Texture {
		
		
		void set_viewport_path_in_scene(const NodePath &in path) {
			ptr.godot_icall(bindings::id_ViewportTexture_set_viewport_path_in_scene, path);
		}
		
		NodePath get_viewport_path_in_scene() const {
			return ptr.godot_icall(bindings::id_ViewportTexture_get_viewport_path_in_scene);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ViewportTexture)).ptr();
		}
		
	}
	
	class Texture : Resource {
		
		
		int get_width() const {
			return ptr.godot_icall(bindings::id_Texture_get_width);
		}
		
		int get_height() const {
			return ptr.godot_icall(bindings::id_Texture_get_height);
		}
		
		Vector2 get_size() const {
			return ptr.godot_icall(bindings::id_Texture_get_size);
		}
		
		bool has_alpha() const {
			return ptr.godot_icall(bindings::id_Texture_has_alpha);
		}
		
		void set_flags(int flags) {
			ptr.godot_icall(bindings::id_Texture_set_flags, flags);
		}
		
		int get_flags() const {
			return ptr.godot_icall(bindings::id_Texture_get_flags);
		}
		
		void draw(const RID &in canvas_item, const Vector2 &in position, const Color &in modulate, bool transpose, Texture@ normal_map) const {
			ptr.godot_icall(bindings::id_Texture_draw, canvas_item, position, modulate, transpose, normal_map);
		}
		
		void draw_rect(const RID &in canvas_item, const Rect2 &in rect, bool tile, const Color &in modulate, bool transpose, Texture@ normal_map) const {
			ptr.godot_icall(bindings::id_Texture_draw_rect, canvas_item, rect, tile, modulate, transpose, normal_map);
		}
		
		void draw_rect_region(const RID &in canvas_item, const Rect2 &in rect, const Rect2 &in src_rect, const Color &in modulate, bool transpose, Texture@ normal_map, bool clip_uv) const {
			ptr.godot_icall(bindings::id_Texture_draw_rect_region, canvas_item, rect, src_rect, modulate, transpose, normal_map, clip_uv);
		}
		
		Image@ get_data() const {
			Image ret = ptr.godot_icall(bindings::id_Texture_get_data);
			return  ret;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Texture)).ptr();
		}
		
	}
	
	class InputEvent : Resource {
		
		
		void set_device(int device) {
			ptr.godot_icall(bindings::id_InputEvent_set_device, device);
		}
		
		int get_device() const {
			return ptr.godot_icall(bindings::id_InputEvent_get_device);
		}
		
		bool is_pressed() const {
			return ptr.godot_icall(bindings::id_InputEvent_is_pressed);
		}
		
		bool is_action(const String &in action) const {
			return ptr.godot_icall(bindings::id_InputEvent_is_action, action);
		}
		
		bool is_action_pressed(const String &in action) const {
			return ptr.godot_icall(bindings::id_InputEvent_is_action_pressed, action);
		}
		
		bool is_action_released(const String &in action) const {
			return ptr.godot_icall(bindings::id_InputEvent_is_action_released, action);
		}
		
		bool is_echo() const {
			return ptr.godot_icall(bindings::id_InputEvent_is_echo);
		}
		
		String as_text() const {
			return ptr.godot_icall(bindings::id_InputEvent_as_text);
		}
		
		bool action_match(InputEvent@ event) const {
			return ptr.godot_icall(bindings::id_InputEvent_action_match, event);
		}
		
		bool shortcut_match(InputEvent@ event) const {
			return ptr.godot_icall(bindings::id_InputEvent_shortcut_match, event);
		}
		
		bool is_action_type() const {
			return ptr.godot_icall(bindings::id_InputEvent_is_action_type);
		}
		
		InputEvent@ xformed_by(const Transform2D &in xform, const Vector2 &in local_ofs) const {
			InputEvent ret = ptr.godot_icall(bindings::id_InputEvent_xformed_by, xform, local_ofs);
			return  ret;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_InputEvent)).ptr();
		}
		
	}
	
	class Performance : Object {
		
		
		float get_monitor(int monitor) const {
			return ptr.godot_icall(bindings::id_Performance_get_monitor, monitor);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Performance);
		}
		
	}
	
	class VisualScriptSelf : VisualScriptNode {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptSelf)).ptr();
		}
		
	}
	
	class VisualScriptConstant : VisualScriptNode {
		
		
		void set_constant_type(int type) {
			ptr.godot_icall(bindings::id_VisualScriptConstant_set_constant_type, type);
		}
		
		int get_constant_type() const {
			return ptr.godot_icall(bindings::id_VisualScriptConstant_get_constant_type);
		}
		
		void set_constant_value(const Variant &in value) {
			ptr.godot_icall(bindings::id_VisualScriptConstant_set_constant_value, value);
		}
		
		Variant get_constant_value() const {
			return ptr.godot_icall(bindings::id_VisualScriptConstant_get_constant_value);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptConstant)).ptr();
		}
		
	}
	
	class RayShape2D : Shape2D {
		
		
		void set_length(float length) {
			ptr.godot_icall(bindings::id_RayShape2D_set_length, length);
		}
		
		float get_length() const {
			return ptr.godot_icall(bindings::id_RayShape2D_get_length);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_RayShape2D)).ptr();
		}
		
	}
	
	class Theme : Resource {
		
		
		void set_icon(const String &in name, const String &in type, Texture@ texture) {
			ptr.godot_icall(bindings::id_Theme_set_icon, name, type, texture);
		}
		
		Texture@ get_icon(const String &in name, const String &in type) const {
			Texture tex = ptr.godot_icall(bindings::id_Theme_get_icon, name, type);
			return tex;
		}
		
		bool has_icon(const String &in name, const String &in type) const {
			return ptr.godot_icall(bindings::id_Theme_has_icon, name, type);
		}
		
		void clear_icon(const String &in name, const String &in type) {
			ptr.godot_icall(bindings::id_Theme_clear_icon, name, type);
		}
		
		PoolStringArray get_icon_list(const String &in type) const {
			return ptr.godot_icall(bindings::id_Theme_get_icon_list, type);
		}
		
		void set_stylebox(const String &in name, const String &in type, StyleBox@ texture) {
			ptr.godot_icall(bindings::id_Theme_set_stylebox, name, type, texture);
		}
		
		StyleBox@ get_stylebox(const String &in name, const String &in type) const {
			StyleBox ret = ptr.godot_icall(bindings::id_Theme_get_stylebox, name, type);
			return  ret;
		}
		
		bool has_stylebox(const String &in name, const String &in type) const {
			return ptr.godot_icall(bindings::id_Theme_has_stylebox, name, type);
		}
		
		void clear_stylebox(const String &in name, const String &in type) {
			ptr.godot_icall(bindings::id_Theme_clear_stylebox, name, type);
		}
		
		PoolStringArray get_stylebox_list(const String &in type) const {
			return ptr.godot_icall(bindings::id_Theme_get_stylebox_list, type);
		}
		
		PoolStringArray get_stylebox_types() const {
			return ptr.godot_icall(bindings::id_Theme_get_stylebox_types);
		}
		
		void set_font(const String &in name, const String &in type, Font@ font) {
			ptr.godot_icall(bindings::id_Theme_set_font, name, type, font);
		}
		
		Font@ get_font(const String &in name, const String &in type) const {
			Font ret = ptr.godot_icall(bindings::id_Theme_get_font, name, type);
			return  ret;
		}
		
		bool has_font(const String &in name, const String &in type) const {
			return ptr.godot_icall(bindings::id_Theme_has_font, name, type);
		}
		
		void clear_font(const String &in name, const String &in type) {
			ptr.godot_icall(bindings::id_Theme_clear_font, name, type);
		}
		
		PoolStringArray get_font_list(const String &in type) const {
			return ptr.godot_icall(bindings::id_Theme_get_font_list, type);
		}
		
		void set_color(const String &in name, const String &in type, const Color &in color) {
			ptr.godot_icall(bindings::id_Theme_set_color, name, type, color);
		}
		
		Color get_color(const String &in name, const String &in type) const {
			return ptr.godot_icall(bindings::id_Theme_get_color, name, type);
		}
		
		bool has_color(const String &in name, const String &in type) const {
			return ptr.godot_icall(bindings::id_Theme_has_color, name, type);
		}
		
		void clear_color(const String &in name, const String &in type) {
			ptr.godot_icall(bindings::id_Theme_clear_color, name, type);
		}
		
		PoolStringArray get_color_list(const String &in type) const {
			return ptr.godot_icall(bindings::id_Theme_get_color_list, type);
		}
		
		void set_constant(const String &in name, const String &in type, int constant) {
			ptr.godot_icall(bindings::id_Theme_set_constant, name, type, constant);
		}
		
		int get_constant(const String &in name, const String &in type) const {
			return ptr.godot_icall(bindings::id_Theme_get_constant, name, type);
		}
		
		bool has_constant(const String &in name, const String &in type) const {
			return ptr.godot_icall(bindings::id_Theme_has_constant, name, type);
		}
		
		void clear_constant(const String &in name, const String &in type) {
			ptr.godot_icall(bindings::id_Theme_clear_constant, name, type);
		}
		
		PoolStringArray get_constant_list(const String &in type) const {
			return ptr.godot_icall(bindings::id_Theme_get_constant_list, type);
		}
		
		void set_default_font(Font@ font) {
			ptr.godot_icall(bindings::id_Theme_set_default_font, font);
		}
		
		Font@ get_default_font() const {
			Font ret = ptr.godot_icall(bindings::id_Theme_get_default_font);
			return  ret;
		}
		
		PoolStringArray get_type_list(const String &in type) const {
			return ptr.godot_icall(bindings::id_Theme_get_type_list, type);
		}
		
		protected void _emit_theme_changed() {
			ptr.godot_icall(bindings::id_Theme__emit_theme_changed);
		}
		
		void copy_default_theme() {
			ptr.godot_icall(bindings::id_Theme_copy_default_theme);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Theme)).ptr();
		}
		
	}
	
	class ProxyTexture : Texture {
		
		
		void set_base(Texture@ base) {
			ptr.godot_icall(bindings::id_ProxyTexture_set_base, base);
		}
		
		Texture@ get_base() const {
			Texture ret = ptr.godot_icall(bindings::id_ProxyTexture_get_base);
			return  ret;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ProxyTexture)).ptr();
		}
		
	}
	
	class CollisionShape2D : Node2D {
		
		
		void set_shape(Shape2D@ shape) {
			ptr.godot_icall(bindings::id_CollisionShape2D_set_shape, shape);
		}
		
		Shape2D@ get_shape() const {
			Shape2D ret = ptr.godot_icall(bindings::id_CollisionShape2D_get_shape);
			return  ret;
		}
		
		void set_disabled(bool disabled) {
			ptr.godot_icall(bindings::id_CollisionShape2D_set_disabled, disabled);
		}
		
		bool is_disabled() const {
			return ptr.godot_icall(bindings::id_CollisionShape2D_is_disabled);
		}
		
		void set_one_way_collision(bool enabled) {
			ptr.godot_icall(bindings::id_CollisionShape2D_set_one_way_collision, enabled);
		}
		
		bool is_one_way_collision_enabled() const {
			return ptr.godot_icall(bindings::id_CollisionShape2D_is_one_way_collision_enabled);
		}
		
		protected void _shape_changed() {
			ptr.godot_icall(bindings::id_CollisionShape2D__shape_changed);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_CollisionShape2D);
		}
		
	}
	
	class AudioEffectChorus : AudioEffect {
		
		
		void set_voice_count(int voices) {
			ptr.godot_icall(bindings::id_AudioEffectChorus_set_voice_count, voices);
		}
		
		int get_voice_count() const {
			return ptr.godot_icall(bindings::id_AudioEffectChorus_get_voice_count);
		}
		
		void set_voice_delay_ms(int voice_idx, float delay_ms) {
			ptr.godot_icall(bindings::id_AudioEffectChorus_set_voice_delay_ms, voice_idx, delay_ms);
		}
		
		float get_voice_delay_ms(int voice_idx) const {
			return ptr.godot_icall(bindings::id_AudioEffectChorus_get_voice_delay_ms, voice_idx);
		}
		
		void set_voice_rate_hz(int voice_idx, float rate_hz) {
			ptr.godot_icall(bindings::id_AudioEffectChorus_set_voice_rate_hz, voice_idx, rate_hz);
		}
		
		float get_voice_rate_hz(int voice_idx) const {
			return ptr.godot_icall(bindings::id_AudioEffectChorus_get_voice_rate_hz, voice_idx);
		}
		
		void set_voice_depth_ms(int voice_idx, float depth_ms) {
			ptr.godot_icall(bindings::id_AudioEffectChorus_set_voice_depth_ms, voice_idx, depth_ms);
		}
		
		float get_voice_depth_ms(int voice_idx) const {
			return ptr.godot_icall(bindings::id_AudioEffectChorus_get_voice_depth_ms, voice_idx);
		}
		
		void set_voice_level_db(int voice_idx, float level_db) {
			ptr.godot_icall(bindings::id_AudioEffectChorus_set_voice_level_db, voice_idx, level_db);
		}
		
		float get_voice_level_db(int voice_idx) const {
			return ptr.godot_icall(bindings::id_AudioEffectChorus_get_voice_level_db, voice_idx);
		}
		
		void set_voice_cutoff_hz(int voice_idx, float cutoff_hz) {
			ptr.godot_icall(bindings::id_AudioEffectChorus_set_voice_cutoff_hz, voice_idx, cutoff_hz);
		}
		
		float get_voice_cutoff_hz(int voice_idx) const {
			return ptr.godot_icall(bindings::id_AudioEffectChorus_get_voice_cutoff_hz, voice_idx);
		}
		
		void set_voice_pan(int voice_idx, float pan) {
			ptr.godot_icall(bindings::id_AudioEffectChorus_set_voice_pan, voice_idx, pan);
		}
		
		float get_voice_pan(int voice_idx) const {
			return ptr.godot_icall(bindings::id_AudioEffectChorus_get_voice_pan, voice_idx);
		}
		
		void set_wet(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectChorus_set_wet, amount);
		}
		
		float get_wet() const {
			return ptr.godot_icall(bindings::id_AudioEffectChorus_get_wet);
		}
		
		void set_dry(float amount) {
			ptr.godot_icall(bindings::id_AudioEffectChorus_set_dry, amount);
		}
		
		float get_dry() const {
			return ptr.godot_icall(bindings::id_AudioEffectChorus_get_dry);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectChorus)).ptr();
		}
		
	}
	
	class PanelContainer : Container {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_PanelContainer);
		}
		
	}
	
	class Physics2DShapeQueryParameters : Reference {
		
		
		void set_shape(Resource@ shape) {
			ptr.godot_icall(bindings::id_Physics2DShapeQueryParameters_set_shape, shape);
		}
		
		void set_shape_rid(const RID &in shape) {
			ptr.godot_icall(bindings::id_Physics2DShapeQueryParameters_set_shape_rid, shape);
		}
		
		RID get_shape_rid() const {
			return ptr.godot_icall(bindings::id_Physics2DShapeQueryParameters_get_shape_rid);
		}
		
		void set_transform(const Transform2D &in transform) {
			ptr.godot_icall(bindings::id_Physics2DShapeQueryParameters_set_transform, transform);
		}
		
		Transform2D get_transform() const {
			return ptr.godot_icall(bindings::id_Physics2DShapeQueryParameters_get_transform);
		}
		
		void set_motion(const Vector2 &in motion) {
			ptr.godot_icall(bindings::id_Physics2DShapeQueryParameters_set_motion, motion);
		}
		
		Vector2 get_motion() const {
			return ptr.godot_icall(bindings::id_Physics2DShapeQueryParameters_get_motion);
		}
		
		void set_margin(float margin) {
			ptr.godot_icall(bindings::id_Physics2DShapeQueryParameters_set_margin, margin);
		}
		
		float get_margin() const {
			return ptr.godot_icall(bindings::id_Physics2DShapeQueryParameters_get_margin);
		}
		
		void set_collision_layer(int collision_layer) {
			ptr.godot_icall(bindings::id_Physics2DShapeQueryParameters_set_collision_layer, collision_layer);
		}
		
		int get_collision_layer() const {
			return ptr.godot_icall(bindings::id_Physics2DShapeQueryParameters_get_collision_layer);
		}
		
		void set_exclude(const Array &in exclude) {
			ptr.godot_icall(bindings::id_Physics2DShapeQueryParameters_set_exclude, exclude);
		}
		
		Array get_exclude() const {
			return ptr.godot_icall(bindings::id_Physics2DShapeQueryParameters_get_exclude);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Physics2DShapeQueryParameters)).ptr();
		}
		
	}
	
	class _Directory : Reference {
		
		
		int open(const String &in path) {
			return ptr.godot_icall(bindings::id__Directory_open, path);
		}
		
		int list_dir_begin(bool skip_navigational, bool skip_hidden) {
			return ptr.godot_icall(bindings::id__Directory_list_dir_begin, skip_navigational, skip_hidden);
		}
		
		String get_next() {
			return ptr.godot_icall(bindings::id__Directory_get_next);
		}
		
		bool current_is_dir() const {
			return ptr.godot_icall(bindings::id__Directory_current_is_dir);
		}
		
		void list_dir_end() {
			ptr.godot_icall(bindings::id__Directory_list_dir_end);
		}
		
		int get_drive_count() {
			return ptr.godot_icall(bindings::id__Directory_get_drive_count);
		}
		
		String get_drive(int idx) {
			return ptr.godot_icall(bindings::id__Directory_get_drive, idx);
		}
		
		int get_current_drive() {
			return ptr.godot_icall(bindings::id__Directory_get_current_drive);
		}
		
		int change_dir(const String &in todir) {
			return ptr.godot_icall(bindings::id__Directory_change_dir, todir);
		}
		
		String get_current_dir() {
			return ptr.godot_icall(bindings::id__Directory_get_current_dir);
		}
		
		int make_dir(const String &in path) {
			return ptr.godot_icall(bindings::id__Directory_make_dir, path);
		}
		
		int make_dir_recursive(const String &in path) {
			return ptr.godot_icall(bindings::id__Directory_make_dir_recursive, path);
		}
		
		bool file_exists(const String &in path) {
			return ptr.godot_icall(bindings::id__Directory_file_exists, path);
		}
		
		bool dir_exists(const String &in path) {
			return ptr.godot_icall(bindings::id__Directory_dir_exists, path);
		}
		
		int get_space_left() {
			return ptr.godot_icall(bindings::id__Directory_get_space_left);
		}
		
		int copy(const String &in From, const String &in to) {
			return ptr.godot_icall(bindings::id__Directory_copy, From, to);
		}
		
		int rename(const String &in From, const String &in to) {
			return ptr.godot_icall(bindings::id__Directory_rename, From, to);
		}
		
		int remove(const String &in path) {
			return ptr.godot_icall(bindings::id__Directory_remove, path);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id__Directory)).ptr();
		}
		
	}
	
	class PCKPacker : Reference {
		
		
		int pck_start(const String &in pck_name, int alignment) {
			return ptr.godot_icall(bindings::id_PCKPacker_pck_start, pck_name, alignment);
		}
		
		int add_file(const String &in pck_path, const String &in source_path) {
			return ptr.godot_icall(bindings::id_PCKPacker_add_file, pck_path, source_path);
		}
		
		int flush(bool verbose) {
			return ptr.godot_icall(bindings::id_PCKPacker_flush, verbose);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_PCKPacker)).ptr();
		}
		
	}
	
	class Popup : Control {
		
		
		void popup_centered(const Vector2 &in size) {
			ptr.godot_icall(bindings::id_Popup_popup_centered, size);
		}
		
		void popup_centered_ratio(float ratio) {
			ptr.godot_icall(bindings::id_Popup_popup_centered_ratio, ratio);
		}
		
		void popup_centered_minsize(const Vector2 &in minsize) {
			ptr.godot_icall(bindings::id_Popup_popup_centered_minsize, minsize);
		}
		
		void popup(const Rect2 &in bounds) {
			ptr.godot_icall(bindings::id_Popup_popup, bounds);
		}
		
		void set_exclusive(bool enable) {
			ptr.godot_icall(bindings::id_Popup_set_exclusive, enable);
		}
		
		bool is_exclusive() const {
			return ptr.godot_icall(bindings::id_Popup_is_exclusive);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Popup);
		}
		
	}
	
	class SpatialGizmo : Reference {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_SpatialGizmo)).ptr();
		}
		
	}
	
	class InterpolatedCamera : Camera {
		
		
		void set_target_path(const NodePath &in target_path) {
			ptr.godot_icall(bindings::id_InterpolatedCamera_set_target_path, target_path);
		}
		
		NodePath get_target_path() const {
			return ptr.godot_icall(bindings::id_InterpolatedCamera_get_target_path);
		}
		
		void set_target(Object@ target) {
			ptr.godot_icall(bindings::id_InterpolatedCamera_set_target, target);
		}
		
		void set_speed(float speed) {
			ptr.godot_icall(bindings::id_InterpolatedCamera_set_speed, speed);
		}
		
		float get_speed() const {
			return ptr.godot_icall(bindings::id_InterpolatedCamera_get_speed);
		}
		
		void set_interpolation_enabled(bool target_path) {
			ptr.godot_icall(bindings::id_InterpolatedCamera_set_interpolation_enabled, target_path);
		}
		
		bool is_interpolation_enabled() const {
			return ptr.godot_icall(bindings::id_InterpolatedCamera_is_interpolation_enabled);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_InterpolatedCamera);
		}
		
	}
	
	class BulletPhysicsDirectBodyState : PhysicsDirectBodyState {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_BulletPhysicsDirectBodyState);
		}
		
	}
	
	class ParallaxBackground : CanvasLayer {
		
		
		protected void _camera_moved(const Transform2D &in arg0, const Vector2 &in arg1) {
			ptr.godot_icall(bindings::id_ParallaxBackground__camera_moved, arg0, arg1);
		}
		
		void set_scroll_offset(const Vector2 &in ofs) {
			ptr.godot_icall(bindings::id_ParallaxBackground_set_scroll_offset, ofs);
		}
		
		Vector2 get_scroll_offset() const {
			return ptr.godot_icall(bindings::id_ParallaxBackground_get_scroll_offset);
		}
		
		void set_scroll_base_offset(const Vector2 &in ofs) {
			ptr.godot_icall(bindings::id_ParallaxBackground_set_scroll_base_offset, ofs);
		}
		
		Vector2 get_scroll_base_offset() const {
			return ptr.godot_icall(bindings::id_ParallaxBackground_get_scroll_base_offset);
		}
		
		void set_scroll_base_scale(const Vector2 &in scale) {
			ptr.godot_icall(bindings::id_ParallaxBackground_set_scroll_base_scale, scale);
		}
		
		Vector2 get_scroll_base_scale() const {
			return ptr.godot_icall(bindings::id_ParallaxBackground_get_scroll_base_scale);
		}
		
		void set_limit_begin(const Vector2 &in ofs) {
			ptr.godot_icall(bindings::id_ParallaxBackground_set_limit_begin, ofs);
		}
		
		Vector2 get_limit_begin() const {
			return ptr.godot_icall(bindings::id_ParallaxBackground_get_limit_begin);
		}
		
		void set_limit_end(const Vector2 &in ofs) {
			ptr.godot_icall(bindings::id_ParallaxBackground_set_limit_end, ofs);
		}
		
		Vector2 get_limit_end() const {
			return ptr.godot_icall(bindings::id_ParallaxBackground_get_limit_end);
		}
		
		void set_ignore_camera_zoom(bool ignore) {
			ptr.godot_icall(bindings::id_ParallaxBackground_set_ignore_camera_zoom, ignore);
		}
		
		bool is_ignore_camera_zoom() {
			return ptr.godot_icall(bindings::id_ParallaxBackground_is_ignore_camera_zoom);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ParallaxBackground);
		}
		
	}
	
	class InputDefault : Input {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_InputDefault);
		}
		
	}
	
	class InputEventJoypadButton : InputEvent {
		
		
		void set_button_index(int button_index) {
			ptr.godot_icall(bindings::id_InputEventJoypadButton_set_button_index, button_index);
		}
		
		int get_button_index() const {
			return ptr.godot_icall(bindings::id_InputEventJoypadButton_get_button_index);
		}
		
		void set_pressure(float pressure) {
			ptr.godot_icall(bindings::id_InputEventJoypadButton_set_pressure, pressure);
		}
		
		float get_pressure() const {
			return ptr.godot_icall(bindings::id_InputEventJoypadButton_get_pressure);
		}
		
		void set_pressed(bool pressed) {
			ptr.godot_icall(bindings::id_InputEventJoypadButton_set_pressed, pressed);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_InputEventJoypadButton)).ptr();
		}
		
	}
	
	class InputEventScreenTouch : InputEvent {
		
		
		void set_index(int index) {
			ptr.godot_icall(bindings::id_InputEventScreenTouch_set_index, index);
		}
		
		int get_index() const {
			return ptr.godot_icall(bindings::id_InputEventScreenTouch_get_index);
		}
		
		void set_position(const Vector2 &in position) {
			ptr.godot_icall(bindings::id_InputEventScreenTouch_set_position, position);
		}
		
		Vector2 get_position() const {
			return ptr.godot_icall(bindings::id_InputEventScreenTouch_get_position);
		}
		
		void set_pressed(bool pressed) {
			ptr.godot_icall(bindings::id_InputEventScreenTouch_set_pressed, pressed);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_InputEventScreenTouch)).ptr();
		}
		
	}
	
	class SpriteFrames : Resource {
		
		
		void add_animation(const String &in anim) {
			ptr.godot_icall(bindings::id_SpriteFrames_add_animation, anim);
		}
		
		bool has_animation(const String &in anim) const {
			return ptr.godot_icall(bindings::id_SpriteFrames_has_animation, anim);
		}
		
		void remove_animation(const String &in anim) {
			ptr.godot_icall(bindings::id_SpriteFrames_remove_animation, anim);
		}
		
		void rename_animation(const String &in anim, const String &in newname) {
			ptr.godot_icall(bindings::id_SpriteFrames_rename_animation, anim, newname);
		}
		
		void set_animation_speed(const String &in anim, float speed) {
			ptr.godot_icall(bindings::id_SpriteFrames_set_animation_speed, anim, speed);
		}
		
		float get_animation_speed(const String &in anim) const {
			return ptr.godot_icall(bindings::id_SpriteFrames_get_animation_speed, anim);
		}
		
		void set_animation_loop(const String &in anim, bool loop) {
			ptr.godot_icall(bindings::id_SpriteFrames_set_animation_loop, anim, loop);
		}
		
		bool get_animation_loop(const String &in anim) const {
			return ptr.godot_icall(bindings::id_SpriteFrames_get_animation_loop, anim);
		}
		
		void add_frame(const String &in anim, Texture@ frame, int at_position) {
			ptr.godot_icall(bindings::id_SpriteFrames_add_frame, anim, frame, at_position);
		}
		
		int get_frame_count(const String &in anim) const {
			return ptr.godot_icall(bindings::id_SpriteFrames_get_frame_count, anim);
		}
		
		Texture@ get_frame(const String &in anim, int idx) const {
			Texture ret = ptr.godot_icall(bindings::id_SpriteFrames_get_frame, anim, idx);
			return  ret;
		}
		
		void set_frame(const String &in anim, int idx, Texture@ txt) {
			ptr.godot_icall(bindings::id_SpriteFrames_set_frame, anim, idx, txt);
		}
		
		void remove_frame(const String &in anim, int idx) {
			ptr.godot_icall(bindings::id_SpriteFrames_remove_frame, anim, idx);
		}
		
		void clear(const String &in anim) {
			ptr.godot_icall(bindings::id_SpriteFrames_clear, anim);
		}
		
		void clear_all() {
			ptr.godot_icall(bindings::id_SpriteFrames_clear_all);
		}
		
		protected void _set_frames(const Array &in arg0) {
			ptr.godot_icall(bindings::id_SpriteFrames__set_frames, arg0);
		}
		
		protected Array _get_frames() const {
			return ptr.godot_icall(bindings::id_SpriteFrames__get_frames);
		}
		
		protected void _set_animations(const Array &in arg0) {
			ptr.godot_icall(bindings::id_SpriteFrames__set_animations, arg0);
		}
		
		protected Array _get_animations() const {
			return ptr.godot_icall(bindings::id_SpriteFrames__get_animations);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_SpriteFrames)).ptr();
		}
		
	}
	
	class VisualScriptTypeCast : VisualScriptNode {
		
		
		void set_base_type(const String &in type) {
			ptr.godot_icall(bindings::id_VisualScriptTypeCast_set_base_type, type);
		}
		
		String get_base_type() const {
			return ptr.godot_icall(bindings::id_VisualScriptTypeCast_get_base_type);
		}
		
		void set_base_script(const String &in path) {
			ptr.godot_icall(bindings::id_VisualScriptTypeCast_set_base_script, path);
		}
		
		String get_base_script() const {
			return ptr.godot_icall(bindings::id_VisualScriptTypeCast_get_base_script);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptTypeCast)).ptr();
		}
		
	}
	
	class NativeColorDialog : GDNativeDialog {
		
		
		void set_color(const Color &in color) {
			ptr.godot_icall(bindings::id_NativeColorDialog_set_color, color);
		}
		
		Color get_color() const {
			return ptr.godot_icall(bindings::id_NativeColorDialog_get_color);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_NativeColorDialog)).ptr();
		}
		
	}
	
	class EditorScenePostImport : Reference {
		
		
		void post_import(Object@ scene) {
			
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_EditorScenePostImport)).ptr();
		}
		
	}
	
	class EditorPlugin : Node {
		
		
		bool forward_canvas_gui_input(InputEvent@ event) {
			return false;
		}
		
		void forward_draw_over_viewport(Control@ overlay) {
			
		}
		
		void forward_force_draw_over_viewport(Control@ overlay) {
			
		}
		
		bool forward_spatial_gui_input(Camera@ camera, InputEvent@ event) {
			return false;
		}
		
		Variant create_spatial_gizmo(Spatial@ for_spatial) {
			return Variant();
		}
		
		String get_plugin_name() {
			return String();
		}
		
		Variant get_plugin_icon() {
			return Variant();
		}
		
		bool has_main_screen() {
			return false;
		}
		
		void make_visible(bool visible) {
			
		}
		
		void edit(Object@ object) {
			
		}
		
		bool handles(Object@ object) {
			return false;
		}
		
		Dictionary get_state() {
			return Dictionary();
		}
		
		void set_state(const Dictionary &in state) {
			
		}
		
		void clear() {
			
		}
		
		void save_external_data() {
			
		}
		
		void apply_changes() {
			
		}
		
		PoolStringArray get_breakpoints() {
			return PoolStringArray();
		}
		
		void set_window_layout(ConfigFile@ layout) {
			
		}
		
		void get_window_layout(ConfigFile@ layout) {
			
		}
		
		void add_control_to_container(int container, Control@ control) {
			ptr.godot_icall(bindings::id_EditorPlugin_add_control_to_container, container, control);
		}
		
		ToolButton@ add_control_to_bottom_panel(Control@ control, const String &in title) {
			ToolButton ret = ptr.godot_icall(bindings::id_EditorPlugin_add_control_to_bottom_panel, control, title);
			return  ret;
		}
		
		void add_control_to_dock(int slot, Control@ control) {
			ptr.godot_icall(bindings::id_EditorPlugin_add_control_to_dock, slot, control);
		}
		
		void remove_control_from_docks(Control@ control) {
			ptr.godot_icall(bindings::id_EditorPlugin_remove_control_from_docks, control);
		}
		
		void remove_control_from_bottom_panel(Control@ control) {
			ptr.godot_icall(bindings::id_EditorPlugin_remove_control_from_bottom_panel, control);
		}
		
		void add_tool_submenu_item(const String &in name, Object@ submenu) {
			ptr.godot_icall(bindings::id_EditorPlugin_add_tool_submenu_item, name, submenu);
		}
		
		void add_custom_type(const String &in type, const String &in base, Script@ script, Texture@ icon) {
			ptr.godot_icall(bindings::id_EditorPlugin_add_custom_type, type, base, script, icon);
		}
		
		void remove_custom_type(const String &in type) {
			ptr.godot_icall(bindings::id_EditorPlugin_remove_custom_type, type);
		}
		
		int update_overlays() const {
			return ptr.godot_icall(bindings::id_EditorPlugin_update_overlays);
		}
		
		void make_bottom_panel_item_visible(Control@ item) {
			ptr.godot_icall(bindings::id_EditorPlugin_make_bottom_panel_item_visible, item);
		}
		
		void hide_bottom_panel() {
			ptr.godot_icall(bindings::id_EditorPlugin_hide_bottom_panel);
		}
		
		UndoRedo@ get_undo_redo() {
			UndoRedo ret = ptr.godot_icall(bindings::id_EditorPlugin_get_undo_redo);
			return  ret;
		}
		
		void queue_save_layout() const {
			ptr.godot_icall(bindings::id_EditorPlugin_queue_save_layout);
		}
		
		void add_import_plugin(EditorImportPlugin@ importer) {
			ptr.godot_icall(bindings::id_EditorPlugin_add_import_plugin, importer);
		}
		
		void remove_import_plugin(EditorImportPlugin@ importer) {
			ptr.godot_icall(bindings::id_EditorPlugin_remove_import_plugin, importer);
		}
		
		void add_scene_import_plugin(EditorSceneImporter@ scene_importer) {
			ptr.godot_icall(bindings::id_EditorPlugin_add_scene_import_plugin, scene_importer);
		}
		
		void remove_scene_import_plugin(EditorSceneImporter@ scene_importer) {
			ptr.godot_icall(bindings::id_EditorPlugin_remove_scene_import_plugin, scene_importer);
		}
		
		void add_export_plugin(EditorExportPlugin@ exporter) {
			ptr.godot_icall(bindings::id_EditorPlugin_add_export_plugin, exporter);
		}
		
		void remove_export_plugin(EditorExportPlugin@ exporter) {
			ptr.godot_icall(bindings::id_EditorPlugin_remove_export_plugin, exporter);
		}
		
		void set_input_event_forwarding_always_enabled() {
			ptr.godot_icall(bindings::id_EditorPlugin_set_input_event_forwarding_always_enabled);
		}
		
		void set_force_draw_over_forwarding_enabled() {
			ptr.godot_icall(bindings::id_EditorPlugin_set_force_draw_over_forwarding_enabled);
		}
		
		EditorInterface@ get_editor_interface() {
			EditorInterface ret = ptr.godot_icall(bindings::id_EditorPlugin_get_editor_interface);
			return  ret;
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_EditorPlugin);
		}
		
	}
	
	class PackedScene : Resource {
		
		
		int pack(Node@ path) {
			return ptr.godot_icall(bindings::id_PackedScene_pack, path);
		}
		
		Node@ instance(int edit_state) const {
			Node ret = ptr.godot_icall(bindings::id_PackedScene_instance, edit_state);
			return  ret;
		}
		
		bool can_instance() const {
			return ptr.godot_icall(bindings::id_PackedScene_can_instance);
		}
		
		protected void _set_bundled_scene(const Dictionary &in arg0) {
			ptr.godot_icall(bindings::id_PackedScene__set_bundled_scene, arg0);
		}
		
		protected Dictionary _get_bundled_scene() const {
			return ptr.godot_icall(bindings::id_PackedScene__get_bundled_scene);
		}
		
		SceneState@ get_state() {
			SceneState ret = ptr.godot_icall(bindings::id_PackedScene_get_state);
			return  ret;
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_PackedScene)).ptr();
		}
		
	}
	
	class VisualScriptBasicTypeConstant : VisualScriptNode {
		
		
		void set_basic_type(int name) {
			ptr.godot_icall(bindings::id_VisualScriptBasicTypeConstant_set_basic_type, name);
		}
		
		int get_basic_type() const {
			return ptr.godot_icall(bindings::id_VisualScriptBasicTypeConstant_get_basic_type);
		}
		
		void set_basic_type_constant(const String &in name) {
			ptr.godot_icall(bindings::id_VisualScriptBasicTypeConstant_set_basic_type_constant, name);
		}
		
		String get_basic_type_constant() const {
			return ptr.godot_icall(bindings::id_VisualScriptBasicTypeConstant_get_basic_type_constant);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptBasicTypeConstant)).ptr();
		}
		
	}
	
	class NativeFileDialog : GDNativeDialog {
		
		
		void set_mode(int mode) {
			ptr.godot_icall(bindings::id_NativeFileDialog_set_mode, mode);
		}
		
		int get_mode() const {
			return ptr.godot_icall(bindings::id_NativeFileDialog_get_mode);
		}
		
		void set_default_path(const String &in buttons) {
			ptr.godot_icall(bindings::id_NativeFileDialog_set_default_path, buttons);
		}
		
		String get_default_path() const {
			return ptr.godot_icall(bindings::id_NativeFileDialog_get_default_path);
		}
		
		void add_filter(const String &in title, const String &in extentions) {
			ptr.godot_icall(bindings::id_NativeFileDialog_add_filter, title, extentions);
		}
		
		void clear_filters() {
			ptr.godot_icall(bindings::id_NativeFileDialog_clear_filters);
		}
		
		void cleanup() {
			ptr.godot_icall(bindings::id_NativeFileDialog_cleanup);
		}
		
		PoolStringArray get_selected_pathes() const {
			return ptr.godot_icall(bindings::id_NativeFileDialog_get_selected_pathes);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_NativeFileDialog)).ptr();
		}
		
	}
	
	class Sky : Resource {
		
		
		void set_radiance_size(int size) {
			ptr.godot_icall(bindings::id_Sky_set_radiance_size, size);
		}
		
		int get_radiance_size() const {
			return ptr.godot_icall(bindings::id_Sky_get_radiance_size);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Sky)).ptr();
		}
		
	}
	
	class VisibilityEnabler2D : VisibilityNotifier2D {
		
		
		void set_enabler(int enabler, bool enabled) {
			ptr.godot_icall(bindings::id_VisibilityEnabler2D_set_enabler, enabler, enabled);
		}
		
		bool is_enabler_enabled(int enabler) const {
			return ptr.godot_icall(bindings::id_VisibilityEnabler2D_is_enabler_enabled, enabler);
		}
		
		protected void _node_removed(Node@ arg0) {
			ptr.godot_icall(bindings::id_VisibilityEnabler2D__node_removed, arg0);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_VisibilityEnabler2D);
		}
		
	}
	
	class KinematicCollision2D : Reference {
		
		
		Vector2 get_position() const {
			return ptr.godot_icall(bindings::id_KinematicCollision2D_get_position);
		}
		
		Vector2 get_normal() const {
			return ptr.godot_icall(bindings::id_KinematicCollision2D_get_normal);
		}
		
		Vector2 get_travel() const {
			return ptr.godot_icall(bindings::id_KinematicCollision2D_get_travel);
		}
		
		Vector2 get_remainder() const {
			return ptr.godot_icall(bindings::id_KinematicCollision2D_get_remainder);
		}
		
		Object@ get_local_shape() const {
			Object ret = ptr.godot_icall(bindings::id_KinematicCollision2D_get_local_shape);
			return  ret;
		}
		
		Object@ get_collider() const {
			Object ret = ptr.godot_icall(bindings::id_KinematicCollision2D_get_collider);
			return  ret;
		}
		
		int get_collider_id() const {
			return ptr.godot_icall(bindings::id_KinematicCollision2D_get_collider_id);
		}
		
		Object@ get_collider_shape() const {
			Object ret = ptr.godot_icall(bindings::id_KinematicCollision2D_get_collider_shape);
			return  ret;
		}
		
		int get_collider_shape_index() const {
			return ptr.godot_icall(bindings::id_KinematicCollision2D_get_collider_shape_index);
		}
		
		Vector2 get_collider_velocity() const {
			return ptr.godot_icall(bindings::id_KinematicCollision2D_get_collider_velocity);
		}
		
		Variant get_collider_metadata() const {
			return ptr.godot_icall(bindings::id_KinematicCollision2D_get_collider_metadata);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_KinematicCollision2D)).ptr();
		}
		
	}
	
	class BaseButton : Control {
		
		
		protected void _pressed() {
			
		}
		
		protected void _toggled(bool button_pressed) {
			
		}
		
		protected void _gui_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_BaseButton__gui_input, arg0);
		}
		
		protected void _unhandled_input(InputEvent@ arg0) {
			ptr.godot_icall(bindings::id_BaseButton__unhandled_input, arg0);
		}
		
		void set_pressed(bool pressed) {
			ptr.godot_icall(bindings::id_BaseButton_set_pressed, pressed);
		}
		
		bool is_pressed() const {
			return ptr.godot_icall(bindings::id_BaseButton_is_pressed);
		}
		
		bool is_hovered() const {
			return ptr.godot_icall(bindings::id_BaseButton_is_hovered);
		}
		
		void set_toggle_mode(bool enabled) {
			ptr.godot_icall(bindings::id_BaseButton_set_toggle_mode, enabled);
		}
		
		bool is_toggle_mode() const {
			return ptr.godot_icall(bindings::id_BaseButton_is_toggle_mode);
		}
		
		void set_disabled(bool disabled) {
			ptr.godot_icall(bindings::id_BaseButton_set_disabled, disabled);
		}
		
		bool is_disabled() const {
			return ptr.godot_icall(bindings::id_BaseButton_is_disabled);
		}
		
		void set_action_mode(int mode) {
			ptr.godot_icall(bindings::id_BaseButton_set_action_mode, mode);
		}
		
		int get_action_mode() const {
			return ptr.godot_icall(bindings::id_BaseButton_get_action_mode);
		}
		
		int get_draw_mode() const {
			return ptr.godot_icall(bindings::id_BaseButton_get_draw_mode);
		}
		
		void set_enabled_focus_mode(int mode) {
			ptr.godot_icall(bindings::id_BaseButton_set_enabled_focus_mode, mode);
		}
		
		int get_enabled_focus_mode() const {
			return ptr.godot_icall(bindings::id_BaseButton_get_enabled_focus_mode);
		}
		
		void set_shortcut(ShortCut@ shortcut) {
			ptr.godot_icall(bindings::id_BaseButton_set_shortcut, shortcut);
		}
		
		ShortCut@ get_shortcut() const {
			ShortCut ret = ptr.godot_icall(bindings::id_BaseButton_get_shortcut);
			return  ret;
		}
		
		void set_button_group(ButtonGroup@ button_group) {
			ptr.godot_icall(bindings::id_BaseButton_set_button_group, button_group);
		}
		
		ButtonGroup@ get_button_group() const {
			ButtonGroup ret = ptr.godot_icall(bindings::id_BaseButton_get_button_group);
			return  ret;
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_BaseButton);
		}
		
	}
	
	class CanvasModulate : Node2D {
		
		
		void set_color(const Color &in color) {
			ptr.godot_icall(bindings::id_CanvasModulate_set_color, color);
		}
		
		Color get_color() const {
			return ptr.godot_icall(bindings::id_CanvasModulate_get_color);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_CanvasModulate);
		}
		
	}
	
	class AudioEffectHighShelfFilter : AudioEffectFilter {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectHighShelfFilter)).ptr();
		}
		
	}
	
	class AudioStreamRandomPitch : AudioStream {
		
		
		void set_audio_stream(AudioStream@ stream) {
			ptr.godot_icall(bindings::id_AudioStreamRandomPitch_set_audio_stream, stream);
		}
		
		AudioStream@ get_audio_stream() const {
			AudioStream ret = ptr.godot_icall(bindings::id_AudioStreamRandomPitch_get_audio_stream);
			return  ret;
		}
		
		void set_random_pitch(float scale) {
			ptr.godot_icall(bindings::id_AudioStreamRandomPitch_set_random_pitch, scale);
		}
		
		float get_random_pitch() const {
			return ptr.godot_icall(bindings::id_AudioStreamRandomPitch_get_random_pitch);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioStreamRandomPitch)).ptr();
		}
		
	}
	
	class InputEventMouseButton : InputEventMouse {
		
		
		void set_factor(float factor) {
			ptr.godot_icall(bindings::id_InputEventMouseButton_set_factor, factor);
		}
		
		float get_factor() {
			return ptr.godot_icall(bindings::id_InputEventMouseButton_get_factor);
		}
		
		void set_button_index(int button_index) {
			ptr.godot_icall(bindings::id_InputEventMouseButton_set_button_index, button_index);
		}
		
		int get_button_index() const {
			return ptr.godot_icall(bindings::id_InputEventMouseButton_get_button_index);
		}
		
		void set_pressed(bool pressed) {
			ptr.godot_icall(bindings::id_InputEventMouseButton_set_pressed, pressed);
		}
		
		void set_doubleclick(bool doubleclick) {
			ptr.godot_icall(bindings::id_InputEventMouseButton_set_doubleclick, doubleclick);
		}
		
		bool is_doubleclick() const {
			return ptr.godot_icall(bindings::id_InputEventMouseButton_is_doubleclick);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_InputEventMouseButton)).ptr();
		}
		
	}
	
	class _Thread : Reference {
		
		
		int start(Object@ instance, const String &in method, const Variant &in userdata, int priority) {
			return ptr.godot_icall(bindings::id__Thread_start, instance, method, userdata, priority);
		}
		
		String get_id() const {
			return ptr.godot_icall(bindings::id__Thread_get_id);
		}
		
		bool is_active() const {
			return ptr.godot_icall(bindings::id__Thread_is_active);
		}
		
		Variant wait_to_finish() {
			return ptr.godot_icall(bindings::id__Thread_wait_to_finish);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id__Thread)).ptr();
		}
		
	}
	
	class RayCast : Spatial {
		
		
		void set_enabled(bool enabled) {
			ptr.godot_icall(bindings::id_RayCast_set_enabled, enabled);
		}
		
		bool is_enabled() const {
			return ptr.godot_icall(bindings::id_RayCast_is_enabled);
		}
		
		void set_cast_to(const Vector3 &in local_point) {
			ptr.godot_icall(bindings::id_RayCast_set_cast_to, local_point);
		}
		
		Vector3 get_cast_to() const {
			return ptr.godot_icall(bindings::id_RayCast_get_cast_to);
		}
		
		bool is_colliding() const {
			return ptr.godot_icall(bindings::id_RayCast_is_colliding);
		}
		
		void force_raycast_update() {
			ptr.godot_icall(bindings::id_RayCast_force_raycast_update);
		}
		
		Object@ get_collider() const {
			Object ret = ptr.godot_icall(bindings::id_RayCast_get_collider);
			return  ret;
		}
		
		int get_collider_shape() const {
			return ptr.godot_icall(bindings::id_RayCast_get_collider_shape);
		}
		
		Vector3 get_collision_point() const {
			return ptr.godot_icall(bindings::id_RayCast_get_collision_point);
		}
		
		Vector3 get_collision_normal() const {
			return ptr.godot_icall(bindings::id_RayCast_get_collision_normal);
		}
		
		void add_exception_rid(const RID &in rid) {
			ptr.godot_icall(bindings::id_RayCast_add_exception_rid, rid);
		}
		
		void add_exception(Object@ node) {
			ptr.godot_icall(bindings::id_RayCast_add_exception, node);
		}
		
		void remove_exception_rid(const RID &in rid) {
			ptr.godot_icall(bindings::id_RayCast_remove_exception_rid, rid);
		}
		
		void remove_exception(Object@ node) {
			ptr.godot_icall(bindings::id_RayCast_remove_exception, node);
		}
		
		void clear_exceptions() {
			ptr.godot_icall(bindings::id_RayCast_clear_exceptions);
		}
		
		void set_collision_mask(int mask) {
			ptr.godot_icall(bindings::id_RayCast_set_collision_mask, mask);
		}
		
		int get_collision_mask() const {
			return ptr.godot_icall(bindings::id_RayCast_get_collision_mask);
		}
		
		void set_collision_mask_bit(int bit, bool value) {
			ptr.godot_icall(bindings::id_RayCast_set_collision_mask_bit, bit, value);
		}
		
		bool get_collision_mask_bit(int bit) const {
			return ptr.godot_icall(bindings::id_RayCast_get_collision_mask_bit, bit);
		}
		
		void set_exclude_parent_body(bool mask) {
			ptr.godot_icall(bindings::id_RayCast_set_exclude_parent_body, mask);
		}
		
		bool get_exclude_parent_body() const {
			return ptr.godot_icall(bindings::id_RayCast_get_exclude_parent_body);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_RayCast);
		}
		
	}
	
	class Shader : Resource {
		
		
		int get_mode() const {
			return ptr.godot_icall(bindings::id_Shader_get_mode);
		}
		
		void set_code(const String &in code) {
			ptr.godot_icall(bindings::id_Shader_set_code, code);
		}
		
		String get_code() const {
			return ptr.godot_icall(bindings::id_Shader_get_code);
		}
		
		void set_default_texture_param(const String &in param, Texture@ texture) {
			ptr.godot_icall(bindings::id_Shader_set_default_texture_param, param, texture);
		}
		
		Texture@ get_default_texture_param(const String &in param) const {
			Texture ret = ptr.godot_icall(bindings::id_Shader_get_default_texture_param, param);
			return  ret;
		}
		
		bool has_param(const String &in name) const {
			return ptr.godot_icall(bindings::id_Shader_has_param, name);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_Shader)).ptr();
		}
		
	}
	
	class EditorSettings : Resource {
		
		
		bool has_setting(const String &in name) const {
			return ptr.godot_icall(bindings::id_EditorSettings_has_setting, name);
		}
		
		void set_setting(const String &in name, const Variant &in value) {
			ptr.godot_icall(bindings::id_EditorSettings_set_setting, name, value);
		}
		
		Variant get_setting(const String &in name) const {
			return ptr.godot_icall(bindings::id_EditorSettings_get_setting, name);
		}
		
		void erase(const String &in property) {
			ptr.godot_icall(bindings::id_EditorSettings_erase, property);
		}
		
		void set_initial_value(const String &in name, const Variant &in value, bool update_current) {
			ptr.godot_icall(bindings::id_EditorSettings_set_initial_value, name, value, update_current);
		}
		
		bool property_can_revert(const String &in name) {
			return ptr.godot_icall(bindings::id_EditorSettings_property_can_revert, name);
		}
		
		Variant property_get_revert(const String &in name) {
			return ptr.godot_icall(bindings::id_EditorSettings_property_get_revert, name);
		}
		
		void add_property_info(const Dictionary &in info) {
			ptr.godot_icall(bindings::id_EditorSettings_add_property_info, info);
		}
		
		String get_settings_dir() const {
			return ptr.godot_icall(bindings::id_EditorSettings_get_settings_dir);
		}
		
		String get_project_settings_dir() const {
			return ptr.godot_icall(bindings::id_EditorSettings_get_project_settings_dir);
		}
		
		void set_favorite_dirs(const PoolStringArray &in dirs) {
			ptr.godot_icall(bindings::id_EditorSettings_set_favorite_dirs, dirs);
		}
		
		PoolStringArray get_favorite_dirs() const {
			return ptr.godot_icall(bindings::id_EditorSettings_get_favorite_dirs);
		}
		
		void set_recent_dirs(const PoolStringArray &in dirs) {
			ptr.godot_icall(bindings::id_EditorSettings_set_recent_dirs, dirs);
		}
		
		PoolStringArray get_recent_dirs() const {
			return ptr.godot_icall(bindings::id_EditorSettings_get_recent_dirs);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_EditorSettings)).ptr();
		}
		
	}
	
	class NavigationPolygon : Resource {
		
		
		void set_vertices(const PoolVector2Array &in vertices) {
			ptr.godot_icall(bindings::id_NavigationPolygon_set_vertices, vertices);
		}
		
		PoolVector2Array get_vertices() const {
			return ptr.godot_icall(bindings::id_NavigationPolygon_get_vertices);
		}
		
		void add_polygon(const PoolIntArray &in polygon) {
			ptr.godot_icall(bindings::id_NavigationPolygon_add_polygon, polygon);
		}
		
		int get_polygon_count() const {
			return ptr.godot_icall(bindings::id_NavigationPolygon_get_polygon_count);
		}
		
		PoolIntArray get_polygon(int idx) {
			return ptr.godot_icall(bindings::id_NavigationPolygon_get_polygon, idx);
		}
		
		void clear_polygons() {
			ptr.godot_icall(bindings::id_NavigationPolygon_clear_polygons);
		}
		
		void add_outline(const PoolVector2Array &in outline) {
			ptr.godot_icall(bindings::id_NavigationPolygon_add_outline, outline);
		}
		
		void add_outline_at_index(const PoolVector2Array &in outline, int index) {
			ptr.godot_icall(bindings::id_NavigationPolygon_add_outline_at_index, outline, index);
		}
		
		int get_outline_count() const {
			return ptr.godot_icall(bindings::id_NavigationPolygon_get_outline_count);
		}
		
		void set_outline(int idx, const PoolVector2Array &in outline) {
			ptr.godot_icall(bindings::id_NavigationPolygon_set_outline, idx, outline);
		}
		
		PoolVector2Array get_outline(int idx) const {
			return ptr.godot_icall(bindings::id_NavigationPolygon_get_outline, idx);
		}
		
		void remove_outline(int idx) {
			ptr.godot_icall(bindings::id_NavigationPolygon_remove_outline, idx);
		}
		
		void clear_outlines() {
			ptr.godot_icall(bindings::id_NavigationPolygon_clear_outlines);
		}
		
		void make_polygons_from_outlines() {
			ptr.godot_icall(bindings::id_NavigationPolygon_make_polygons_from_outlines);
		}
		
		protected void _set_polygons(const Array &in polygons) {
			ptr.godot_icall(bindings::id_NavigationPolygon__set_polygons, polygons);
		}
		
		protected Array _get_polygons() const {
			return ptr.godot_icall(bindings::id_NavigationPolygon__get_polygons);
		}
		
		protected void _set_outlines(const Array &in outlines) {
			ptr.godot_icall(bindings::id_NavigationPolygon__set_outlines, outlines);
		}
		
		protected Array _get_outlines() const {
			return ptr.godot_icall(bindings::id_NavigationPolygon__get_outlines);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_NavigationPolygon)).ptr();
		}
		
	}
	
	class SphereShape : Shape {
		
		
		void set_radius(float radius) {
			ptr.godot_icall(bindings::id_SphereShape_set_radius, radius);
		}
		
		float get_radius() const {
			return ptr.godot_icall(bindings::id_SphereShape_get_radius);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_SphereShape)).ptr();
		}
		
	}
	
	class AudioEffectEQ21 : AudioEffectEQ {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectEQ21)).ptr();
		}
		
	}
	
	class Light : VisualInstance {
		
		
		void set_editor_only(bool editor_only) {
			ptr.godot_icall(bindings::id_Light_set_editor_only, editor_only);
		}
		
		bool is_editor_only() const {
			return ptr.godot_icall(bindings::id_Light_is_editor_only);
		}
		
		void set_param(int param, float value) {
			ptr.godot_icall(bindings::id_Light_set_param, param, value);
		}
		
		float get_param(int param) const {
			return ptr.godot_icall(bindings::id_Light_get_param, param);
		}
		
		void set_shadow(bool enabled) {
			ptr.godot_icall(bindings::id_Light_set_shadow, enabled);
		}
		
		bool has_shadow() const {
			return ptr.godot_icall(bindings::id_Light_has_shadow);
		}
		
		void set_negative(bool enabled) {
			ptr.godot_icall(bindings::id_Light_set_negative, enabled);
		}
		
		bool is_negative() const {
			return ptr.godot_icall(bindings::id_Light_is_negative);
		}
		
		void set_cull_mask(int cull_mask) {
			ptr.godot_icall(bindings::id_Light_set_cull_mask, cull_mask);
		}
		
		int get_cull_mask() const {
			return ptr.godot_icall(bindings::id_Light_get_cull_mask);
		}
		
		void set_color(const Color &in color) {
			ptr.godot_icall(bindings::id_Light_set_color, color);
		}
		
		Color get_color() const {
			return ptr.godot_icall(bindings::id_Light_get_color);
		}
		
		void set_shadow_reverse_cull_face(bool enable) {
			ptr.godot_icall(bindings::id_Light_set_shadow_reverse_cull_face, enable);
		}
		
		bool get_shadow_reverse_cull_face() const {
			return ptr.godot_icall(bindings::id_Light_get_shadow_reverse_cull_face);
		}
		
		void set_shadow_color(const Color &in shadow_color) {
			ptr.godot_icall(bindings::id_Light_set_shadow_color, shadow_color);
		}
		
		Color get_shadow_color() const {
			return ptr.godot_icall(bindings::id_Light_get_shadow_color);
		}
		
		void set_bake_mode(int bake_mode) {
			ptr.godot_icall(bindings::id_Light_set_bake_mode, bake_mode);
		}
		
		int get_bake_mode() const {
			return ptr.godot_icall(bindings::id_Light_get_bake_mode);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Light);
		}
		
	}
	
	class VisualScriptExpression : VisualScriptNode {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_VisualScriptExpression)).ptr();
		}
		
	}
	
	class CircleShape2D : Shape2D {
		
		
		void set_radius(float radius) {
			ptr.godot_icall(bindings::id_CircleShape2D_set_radius, radius);
		}
		
		float get_radius() const {
			return ptr.godot_icall(bindings::id_CircleShape2D_get_radius);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_CircleShape2D)).ptr();
		}
		
	}
	
	class KinematicBody2D : PhysicsBody2D {
		
		
		KinematicCollision2D@ move_and_collide(const Vector2 &in rel_vec) {
			KinematicCollision2D ret = ptr.godot_icall(bindings::id_KinematicBody2D_move_and_collide, rel_vec);
			return  ret;
		}
		
		Vector2 move_and_slide(const Vector2 &in linear_velocity, const Vector2 &in floor_normal, float slope_stop_min_velocity, int max_bounces, float floor_max_angle) {
			return ptr.godot_icall(bindings::id_KinematicBody2D_move_and_slide, linear_velocity, floor_normal, slope_stop_min_velocity, max_bounces, floor_max_angle);
		}
		
		bool test_move(const Transform2D &in From, const Vector2 &in rel_vec) {
			return ptr.godot_icall(bindings::id_KinematicBody2D_test_move, From, rel_vec);
		}
		
		bool is_on_floor() const {
			return ptr.godot_icall(bindings::id_KinematicBody2D_is_on_floor);
		}
		
		bool is_on_ceiling() const {
			return ptr.godot_icall(bindings::id_KinematicBody2D_is_on_ceiling);
		}
		
		bool is_on_wall() const {
			return ptr.godot_icall(bindings::id_KinematicBody2D_is_on_wall);
		}
		
		Vector2 get_floor_velocity() const {
			return ptr.godot_icall(bindings::id_KinematicBody2D_get_floor_velocity);
		}
		
		void set_safe_margin(float pixels) {
			ptr.godot_icall(bindings::id_KinematicBody2D_set_safe_margin, pixels);
		}
		
		float get_safe_margin() const {
			return ptr.godot_icall(bindings::id_KinematicBody2D_get_safe_margin);
		}
		
		int get_slide_count() const {
			return ptr.godot_icall(bindings::id_KinematicBody2D_get_slide_count);
		}
		
		KinematicCollision2D@ get_slide_collision(int slide_idx) {
			KinematicCollision2D ret = ptr.godot_icall(bindings::id_KinematicBody2D_get_slide_collision, slide_idx);
			return  ret;
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_KinematicBody2D);
		}
		
	}
	
	class CollisionObject2D : Node2D {
		
		
		protected void _input_event(Object@ viewport, InputEvent@ event, int shape_idx) {
			
		}
		
		RID get_rid() const {
			return ptr.godot_icall(bindings::id_CollisionObject2D_get_rid);
		}
		
		void set_pickable(bool enabled) {
			ptr.godot_icall(bindings::id_CollisionObject2D_set_pickable, enabled);
		}
		
		bool is_pickable() const {
			return ptr.godot_icall(bindings::id_CollisionObject2D_is_pickable);
		}
		
		int create_shape_owner(Object@ owner) {
			return ptr.godot_icall(bindings::id_CollisionObject2D_create_shape_owner, owner);
		}
		
		void remove_shape_owner(int owner_id) {
			ptr.godot_icall(bindings::id_CollisionObject2D_remove_shape_owner, owner_id);
		}
		
		Array get_shape_owners() {
			return ptr.godot_icall(bindings::id_CollisionObject2D_get_shape_owners);
		}
		
		void shape_owner_set_transform(int owner_id, const Transform2D &in transform) {
			ptr.godot_icall(bindings::id_CollisionObject2D_shape_owner_set_transform, owner_id, transform);
		}
		
		Transform2D shape_owner_get_transform(int owner_id) const {
			return ptr.godot_icall(bindings::id_CollisionObject2D_shape_owner_get_transform, owner_id);
		}
		
		Object@ shape_owner_get_owner(int owner_id) const {
			Object ret = ptr.godot_icall(bindings::id_CollisionObject2D_shape_owner_get_owner, owner_id);
			return  ret;
		}
		
		void shape_owner_set_disabled(int owner_id, bool disabled) {
			ptr.godot_icall(bindings::id_CollisionObject2D_shape_owner_set_disabled, owner_id, disabled);
		}
		
		bool is_shape_owner_disabled(int owner_id) const {
			return ptr.godot_icall(bindings::id_CollisionObject2D_is_shape_owner_disabled, owner_id);
		}
		
		void shape_owner_set_one_way_collision(int owner_id, bool enable) {
			ptr.godot_icall(bindings::id_CollisionObject2D_shape_owner_set_one_way_collision, owner_id, enable);
		}
		
		bool is_shape_owner_one_way_collision_enabled(int owner_id) const {
			return ptr.godot_icall(bindings::id_CollisionObject2D_is_shape_owner_one_way_collision_enabled, owner_id);
		}
		
		void shape_owner_add_shape(int owner_id, Shape2D@ shape) {
			ptr.godot_icall(bindings::id_CollisionObject2D_shape_owner_add_shape, owner_id, shape);
		}
		
		int shape_owner_get_shape_count(int owner_id) const {
			return ptr.godot_icall(bindings::id_CollisionObject2D_shape_owner_get_shape_count, owner_id);
		}
		
		Shape2D@ shape_owner_get_shape(int owner_id, int shape_id) const {
			Shape2D ret = ptr.godot_icall(bindings::id_CollisionObject2D_shape_owner_get_shape, owner_id, shape_id);
			return  ret;
		}
		
		int shape_owner_get_shape_index(int owner_id, int shape_id) const {
			return ptr.godot_icall(bindings::id_CollisionObject2D_shape_owner_get_shape_index, owner_id, shape_id);
		}
		
		void shape_owner_remove_shape(int owner_id, int shape_id) {
			ptr.godot_icall(bindings::id_CollisionObject2D_shape_owner_remove_shape, owner_id, shape_id);
		}
		
		void shape_owner_clear_shapes(int owner_id) {
			ptr.godot_icall(bindings::id_CollisionObject2D_shape_owner_clear_shapes, owner_id);
		}
		
		int shape_find_owner(int shape_index) const {
			return ptr.godot_icall(bindings::id_CollisionObject2D_shape_find_owner, shape_index);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_CollisionObject2D);
		}
		
	}
	
	class CanvasLayer : Node {
		
		
		void set_layer(int layer) {
			ptr.godot_icall(bindings::id_CanvasLayer_set_layer, layer);
		}
		
		int get_layer() const {
			return ptr.godot_icall(bindings::id_CanvasLayer_get_layer);
		}
		
		void set_transform(const Transform2D &in transform) {
			ptr.godot_icall(bindings::id_CanvasLayer_set_transform, transform);
		}
		
		Transform2D get_transform() const {
			return ptr.godot_icall(bindings::id_CanvasLayer_get_transform);
		}
		
		void set_offset(const Vector2 &in offset) {
			ptr.godot_icall(bindings::id_CanvasLayer_set_offset, offset);
		}
		
		Vector2 get_offset() const {
			return ptr.godot_icall(bindings::id_CanvasLayer_get_offset);
		}
		
		void set_rotation(float radians) {
			ptr.godot_icall(bindings::id_CanvasLayer_set_rotation, radians);
		}
		
		float get_rotation() const {
			return ptr.godot_icall(bindings::id_CanvasLayer_get_rotation);
		}
		
		void set_rotation_degrees(float degrees) {
			ptr.godot_icall(bindings::id_CanvasLayer_set_rotation_degrees, degrees);
		}
		
		float get_rotation_degrees() const {
			return ptr.godot_icall(bindings::id_CanvasLayer_get_rotation_degrees);
		}
		
		void set_scale(const Vector2 &in scale) {
			ptr.godot_icall(bindings::id_CanvasLayer_set_scale, scale);
		}
		
		Vector2 get_scale() const {
			return ptr.godot_icall(bindings::id_CanvasLayer_get_scale);
		}
		
		void set_custom_viewport(Node@ viewport) {
			ptr.godot_icall(bindings::id_CanvasLayer_set_custom_viewport, viewport);
		}
		
		Node@ get_custom_viewport() const {
			Node ret = ptr.godot_icall(bindings::id_CanvasLayer_get_custom_viewport);
			return  ret;
		}
		
		World2D@ get_world_2d() const {
			World2D ret = ptr.godot_icall(bindings::id_CanvasLayer_get_world_2d);
			return  ret;
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_CanvasLayer);
		}
		
	}
	
	class AudioEffectBandLimitFilter : AudioEffectFilter {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioEffectBandLimitFilter)).ptr();
		}
		
	}
	
	class IP : Object {
		
		
		String resolve_hostname(const String &in host, int ip_type) {
			return ptr.godot_icall(bindings::id_IP_resolve_hostname, host, ip_type);
		}
		
		int resolve_hostname_queue_item(const String &in host, int ip_type) {
			return ptr.godot_icall(bindings::id_IP_resolve_hostname_queue_item, host, ip_type);
		}
		
		int get_resolve_item_status(int id) const {
			return ptr.godot_icall(bindings::id_IP_get_resolve_item_status, id);
		}
		
		String get_resolve_item_address(int id) const {
			return ptr.godot_icall(bindings::id_IP_get_resolve_item_address, id);
		}
		
		void erase_resolve_item(int id) {
			ptr.godot_icall(bindings::id_IP_erase_resolve_item, id);
		}
		
		Array get_local_addresses() const {
			return ptr.godot_icall(bindings::id_IP_get_local_addresses);
		}
		
		void clear_cache(const String &in hostname) {
			ptr.godot_icall(bindings::id_IP_clear_cache, hostname);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_IP);
		}
		
	}
	
	class VSlider : Slider {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_VSlider);
		}
		
	}
	
	class HSeparator : Separator {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_HSeparator);
		}
		
	}
	
	class ConfirmationDialog : AcceptDialog {
		
		
		Button@ get_cancel() {
			Button ret = ptr.godot_icall(bindings::id_ConfirmationDialog_get_cancel);
			return  ret;
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_ConfirmationDialog);
		}
		
	}
	
	class Area : CollisionObject {
		
		
		protected void _body_enter_tree(int id) {
			ptr.godot_icall(bindings::id_Area__body_enter_tree, id);
		}
		
		protected void _body_exit_tree(int id) {
			ptr.godot_icall(bindings::id_Area__body_exit_tree, id);
		}
		
		protected void _area_enter_tree(int id) {
			ptr.godot_icall(bindings::id_Area__area_enter_tree, id);
		}
		
		protected void _area_exit_tree(int id) {
			ptr.godot_icall(bindings::id_Area__area_exit_tree, id);
		}
		
		void set_space_override_mode(int enable) {
			ptr.godot_icall(bindings::id_Area_set_space_override_mode, enable);
		}
		
		int get_space_override_mode() const {
			return ptr.godot_icall(bindings::id_Area_get_space_override_mode);
		}
		
		void set_gravity_is_point(bool enable) {
			ptr.godot_icall(bindings::id_Area_set_gravity_is_point, enable);
		}
		
		bool is_gravity_a_point() const {
			return ptr.godot_icall(bindings::id_Area_is_gravity_a_point);
		}
		
		void set_gravity_distance_scale(float distance_scale) {
			ptr.godot_icall(bindings::id_Area_set_gravity_distance_scale, distance_scale);
		}
		
		float get_gravity_distance_scale() const {
			return ptr.godot_icall(bindings::id_Area_get_gravity_distance_scale);
		}
		
		void set_gravity_vector(const Vector3 &in vector) {
			ptr.godot_icall(bindings::id_Area_set_gravity_vector, vector);
		}
		
		Vector3 get_gravity_vector() const {
			return ptr.godot_icall(bindings::id_Area_get_gravity_vector);
		}
		
		void set_gravity(float gravity) {
			ptr.godot_icall(bindings::id_Area_set_gravity, gravity);
		}
		
		float get_gravity() const {
			return ptr.godot_icall(bindings::id_Area_get_gravity);
		}
		
		void set_angular_damp(float angular_damp) {
			ptr.godot_icall(bindings::id_Area_set_angular_damp, angular_damp);
		}
		
		float get_angular_damp() const {
			return ptr.godot_icall(bindings::id_Area_get_angular_damp);
		}
		
		void set_linear_damp(float linear_damp) {
			ptr.godot_icall(bindings::id_Area_set_linear_damp, linear_damp);
		}
		
		float get_linear_damp() const {
			return ptr.godot_icall(bindings::id_Area_get_linear_damp);
		}
		
		void set_priority(float priority) {
			ptr.godot_icall(bindings::id_Area_set_priority, priority);
		}
		
		float get_priority() const {
			return ptr.godot_icall(bindings::id_Area_get_priority);
		}
		
		void set_collision_mask(int collision_mask) {
			ptr.godot_icall(bindings::id_Area_set_collision_mask, collision_mask);
		}
		
		int get_collision_mask() const {
			return ptr.godot_icall(bindings::id_Area_get_collision_mask);
		}
		
		void set_collision_layer(int collision_layer) {
			ptr.godot_icall(bindings::id_Area_set_collision_layer, collision_layer);
		}
		
		int get_collision_layer() const {
			return ptr.godot_icall(bindings::id_Area_get_collision_layer);
		}
		
		void set_collision_mask_bit(int bit, bool value) {
			ptr.godot_icall(bindings::id_Area_set_collision_mask_bit, bit, value);
		}
		
		bool get_collision_mask_bit(int bit) const {
			return ptr.godot_icall(bindings::id_Area_get_collision_mask_bit, bit);
		}
		
		void set_collision_layer_bit(int bit, bool value) {
			ptr.godot_icall(bindings::id_Area_set_collision_layer_bit, bit, value);
		}
		
		bool get_collision_layer_bit(int bit) const {
			return ptr.godot_icall(bindings::id_Area_get_collision_layer_bit, bit);
		}
		
		void set_monitorable(bool enable) {
			ptr.godot_icall(bindings::id_Area_set_monitorable, enable);
		}
		
		bool is_monitorable() const {
			return ptr.godot_icall(bindings::id_Area_is_monitorable);
		}
		
		void set_monitoring(bool enable) {
			ptr.godot_icall(bindings::id_Area_set_monitoring, enable);
		}
		
		bool is_monitoring() const {
			return ptr.godot_icall(bindings::id_Area_is_monitoring);
		}
		
		Array get_overlapping_bodies() const {
			return ptr.godot_icall(bindings::id_Area_get_overlapping_bodies);
		}
		
		Array get_overlapping_areas() const {
			return ptr.godot_icall(bindings::id_Area_get_overlapping_areas);
		}
		
		bool overlaps_body(Node@ body) const {
			return ptr.godot_icall(bindings::id_Area_overlaps_body, body);
		}
		
		bool overlaps_area(Node@ area) const {
			return ptr.godot_icall(bindings::id_Area_overlaps_area, area);
		}
		
		protected void _body_inout(int arg0, const RID &in arg1, int arg2, int arg3, int arg4) {
			ptr.godot_icall(bindings::id_Area__body_inout, arg0, arg1, arg2, arg3, arg4);
		}
		
		protected void _area_inout(int arg0, const RID &in arg1, int arg2, int arg3, int arg4) {
			ptr.godot_icall(bindings::id_Area__area_inout, arg0, arg1, arg2, arg3, arg4);
		}
		
		void set_audio_bus_override(bool enable) {
			ptr.godot_icall(bindings::id_Area_set_audio_bus_override, enable);
		}
		
		bool is_overriding_audio_bus() const {
			return ptr.godot_icall(bindings::id_Area_is_overriding_audio_bus);
		}
		
		void set_audio_bus(const String &in name) {
			ptr.godot_icall(bindings::id_Area_set_audio_bus, name);
		}
		
		String get_audio_bus() const {
			return ptr.godot_icall(bindings::id_Area_get_audio_bus);
		}
		
		void set_use_reverb_bus(bool enable) {
			ptr.godot_icall(bindings::id_Area_set_use_reverb_bus, enable);
		}
		
		bool is_using_reverb_bus() const {
			return ptr.godot_icall(bindings::id_Area_is_using_reverb_bus);
		}
		
		void set_reverb_bus(const String &in name) {
			ptr.godot_icall(bindings::id_Area_set_reverb_bus, name);
		}
		
		String get_reverb_bus() const {
			return ptr.godot_icall(bindings::id_Area_get_reverb_bus);
		}
		
		void set_reverb_amount(float amount) {
			ptr.godot_icall(bindings::id_Area_set_reverb_amount, amount);
		}
		
		float get_reverb_amount() const {
			return ptr.godot_icall(bindings::id_Area_get_reverb_amount);
		}
		
		void set_reverb_uniformity(float amount) {
			ptr.godot_icall(bindings::id_Area_set_reverb_uniformity, amount);
		}
		
		float get_reverb_uniformity() const {
			return ptr.godot_icall(bindings::id_Area_get_reverb_uniformity);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Area);
		}
		
	}
	
	class Physics2DServerSW : Physics2DServer {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Physics2DServerSW);
		}
		
	}
	
	class ResourceImporter : Reference {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_ResourceImporter)).ptr();
		}
		
	}
	
	class StyleBox : Resource {
		
		
		bool test_mask(const Vector2 &in point, const Rect2 &in rect) const {
			return ptr.godot_icall(bindings::id_StyleBox_test_mask, point, rect);
		}
		
		void set_default_margin(int margin, float offset) {
			ptr.godot_icall(bindings::id_StyleBox_set_default_margin, margin, offset);
		}
		
		float get_default_margin(int margin) const {
			return ptr.godot_icall(bindings::id_StyleBox_get_default_margin, margin);
		}
		
		float get_margin(int margin) const {
			return ptr.godot_icall(bindings::id_StyleBox_get_margin, margin);
		}
		
		Vector2 get_minimum_size() const {
			return ptr.godot_icall(bindings::id_StyleBox_get_minimum_size);
		}
		
		Vector2 get_center_size() const {
			return ptr.godot_icall(bindings::id_StyleBox_get_center_size);
		}
		
		Vector2 get_offset() const {
			return ptr.godot_icall(bindings::id_StyleBox_get_offset);
		}
		
		void draw(const RID &in canvas_item, const Rect2 &in rect) const {
			ptr.godot_icall(bindings::id_StyleBox_draw, canvas_item, rect);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_StyleBox)).ptr();
		}
		
	}
	
	class CapsuleMesh : PrimitiveMesh {
		
		
		void set_radius(float radius) {
			ptr.godot_icall(bindings::id_CapsuleMesh_set_radius, radius);
		}
		
		float get_radius() const {
			return ptr.godot_icall(bindings::id_CapsuleMesh_get_radius);
		}
		
		void set_mid_height(float mid_height) {
			ptr.godot_icall(bindings::id_CapsuleMesh_set_mid_height, mid_height);
		}
		
		float get_mid_height() const {
			return ptr.godot_icall(bindings::id_CapsuleMesh_get_mid_height);
		}
		
		void set_radial_segments(int segments) {
			ptr.godot_icall(bindings::id_CapsuleMesh_set_radial_segments, segments);
		}
		
		int get_radial_segments() const {
			return ptr.godot_icall(bindings::id_CapsuleMesh_get_radial_segments);
		}
		
		void set_rings(int rings) {
			ptr.godot_icall(bindings::id_CapsuleMesh_set_rings, rings);
		}
		
		int get_rings() const {
			return ptr.godot_icall(bindings::id_CapsuleMesh_get_rings);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_CapsuleMesh)).ptr();
		}
		
	}
	
	class TileSet : Resource {
		
		
		protected bool _is_tile_bound(int drawn_id, int neighbor_id) {
			return false;
		}
		
		protected Vector2 _forward_subtile_selection(int autotile_id, int bitmask, Object@ tilemap, const Vector2 &in tile_location) {
			return Vector2();
		}
		
		void create_tile(int id) {
			ptr.godot_icall(bindings::id_TileSet_create_tile, id);
		}
		
		void autotile_set_bitmask_mode(int id, int mode) {
			ptr.godot_icall(bindings::id_TileSet_autotile_set_bitmask_mode, id, mode);
		}
		
		int autotile_get_bitmask_mode(int id) const {
			return ptr.godot_icall(bindings::id_TileSet_autotile_get_bitmask_mode, id);
		}
		
		void tile_set_name(int id, const String &in name) {
			ptr.godot_icall(bindings::id_TileSet_tile_set_name, id, name);
		}
		
		String tile_get_name(int id) const {
			return ptr.godot_icall(bindings::id_TileSet_tile_get_name, id);
		}
		
		void tile_set_texture(int id, Texture@ texture) {
			ptr.godot_icall(bindings::id_TileSet_tile_set_texture, id, texture);
		}
		
		Texture@ tile_get_texture(int id) const {
			Texture ret = ptr.godot_icall(bindings::id_TileSet_tile_get_texture, id);
			return  ret;
		}
		
		void tile_set_normal_map(int id, Texture@ normal_map) {
			ptr.godot_icall(bindings::id_TileSet_tile_set_normal_map, id, normal_map);
		}
		
		Texture@ tile_get_normal_map(int id) const {
			Texture ret = ptr.godot_icall(bindings::id_TileSet_tile_get_normal_map, id);
			return  ret;
		}
		
		void tile_set_material(int id, ShaderMaterial@ material) {
			ptr.godot_icall(bindings::id_TileSet_tile_set_material, id, material);
		}
		
		ShaderMaterial@ tile_get_material(int id) const {
			ShaderMaterial ret = ptr.godot_icall(bindings::id_TileSet_tile_get_material, id);
			return  ret;
		}
		
		void tile_set_texture_offset(int id, const Vector2 &in texture_offset) {
			ptr.godot_icall(bindings::id_TileSet_tile_set_texture_offset, id, texture_offset);
		}
		
		Vector2 tile_get_texture_offset(int id) const {
			return ptr.godot_icall(bindings::id_TileSet_tile_get_texture_offset, id);
		}
		
		void tile_set_region(int id, const Rect2 &in region) {
			ptr.godot_icall(bindings::id_TileSet_tile_set_region, id, region);
		}
		
		Rect2 tile_get_region(int id) const {
			return ptr.godot_icall(bindings::id_TileSet_tile_get_region, id);
		}
		
		void tile_set_shape(int id, int shape_id, Shape2D@ shape) {
			ptr.godot_icall(bindings::id_TileSet_tile_set_shape, id, shape_id, shape);
		}
		
		Shape2D@ tile_get_shape(int id, int shape_id) const {
			Shape2D ret = ptr.godot_icall(bindings::id_TileSet_tile_get_shape, id, shape_id);
			return  ret;
		}
		
		void tile_set_shape_transform(int id, int shape_id, const Transform2D &in shape_transform) {
			ptr.godot_icall(bindings::id_TileSet_tile_set_shape_transform, id, shape_id, shape_transform);
		}
		
		Transform2D tile_get_shape_transform(int id, int shape_id) const {
			return ptr.godot_icall(bindings::id_TileSet_tile_get_shape_transform, id, shape_id);
		}
		
		void tile_set_shape_one_way(int id, int shape_id, bool one_way) {
			ptr.godot_icall(bindings::id_TileSet_tile_set_shape_one_way, id, shape_id, one_way);
		}
		
		bool tile_get_shape_one_way(int id, int shape_id) const {
			return ptr.godot_icall(bindings::id_TileSet_tile_get_shape_one_way, id, shape_id);
		}
		
		void tile_add_shape(int id, Shape2D@ shape, const Transform2D &in shape_transform, bool one_way, const Vector2 &in autotile_coord) {
			ptr.godot_icall(bindings::id_TileSet_tile_add_shape, id, shape, shape_transform, one_way, autotile_coord);
		}
		
		int tile_get_shape_count(int id) const {
			return ptr.godot_icall(bindings::id_TileSet_tile_get_shape_count, id);
		}
		
		void tile_set_shapes(int id, const Array &in shapes) {
			ptr.godot_icall(bindings::id_TileSet_tile_set_shapes, id, shapes);
		}
		
		Array tile_get_shapes(int id) const {
			return ptr.godot_icall(bindings::id_TileSet_tile_get_shapes, id);
		}
		
		void tile_set_navigation_polygon(int id, NavigationPolygon@ navigation_polygon) {
			ptr.godot_icall(bindings::id_TileSet_tile_set_navigation_polygon, id, navigation_polygon);
		}
		
		NavigationPolygon@ tile_get_navigation_polygon(int id) const {
			NavigationPolygon ret = ptr.godot_icall(bindings::id_TileSet_tile_get_navigation_polygon, id);
			return  ret;
		}
		
		void tile_set_navigation_polygon_offset(int id, const Vector2 &in navigation_polygon_offset) {
			ptr.godot_icall(bindings::id_TileSet_tile_set_navigation_polygon_offset, id, navigation_polygon_offset);
		}
		
		Vector2 tile_get_navigation_polygon_offset(int id) const {
			return ptr.godot_icall(bindings::id_TileSet_tile_get_navigation_polygon_offset, id);
		}
		
		void tile_set_light_occluder(int id, OccluderPolygon2D@ light_occluder) {
			ptr.godot_icall(bindings::id_TileSet_tile_set_light_occluder, id, light_occluder);
		}
		
		OccluderPolygon2D@ tile_get_light_occluder(int id) const {
			OccluderPolygon2D ret = ptr.godot_icall(bindings::id_TileSet_tile_get_light_occluder, id);
			return  ret;
		}
		
		void tile_set_occluder_offset(int id, const Vector2 &in occluder_offset) {
			ptr.godot_icall(bindings::id_TileSet_tile_set_occluder_offset, id, occluder_offset);
		}
		
		Vector2 tile_get_occluder_offset(int id) const {
			return ptr.godot_icall(bindings::id_TileSet_tile_get_occluder_offset, id);
		}
		
		void remove_tile(int id) {
			ptr.godot_icall(bindings::id_TileSet_remove_tile, id);
		}
		
		void clear() {
			ptr.godot_icall(bindings::id_TileSet_clear);
		}
		
		int get_last_unused_tile_id() const {
			return ptr.godot_icall(bindings::id_TileSet_get_last_unused_tile_id);
		}
		
		int find_tile_by_name(const String &in name) const {
			return ptr.godot_icall(bindings::id_TileSet_find_tile_by_name, name);
		}
		
		Array get_tiles_ids() const {
			return ptr.godot_icall(bindings::id_TileSet_get_tiles_ids);
		}
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_TileSet)).ptr();
		}
		
	}
	
	class Joint2D : Node2D {
		
		
		void set_node_a(const NodePath &in node) {
			ptr.godot_icall(bindings::id_Joint2D_set_node_a, node);
		}
		
		NodePath get_node_a() const {
			return ptr.godot_icall(bindings::id_Joint2D_get_node_a);
		}
		
		void set_node_b(const NodePath &in node) {
			ptr.godot_icall(bindings::id_Joint2D_set_node_b, node);
		}
		
		NodePath get_node_b() const {
			return ptr.godot_icall(bindings::id_Joint2D_get_node_b);
		}
		
		void set_bias(float bias) {
			ptr.godot_icall(bindings::id_Joint2D_set_bias, bias);
		}
		
		float get_bias() const {
			return ptr.godot_icall(bindings::id_Joint2D_get_bias);
		}
		
		void set_exclude_nodes_from_collision(bool enable) {
			ptr.godot_icall(bindings::id_Joint2D_set_exclude_nodes_from_collision, enable);
		}
		
		bool get_exclude_nodes_from_collision() const {
			return ptr.godot_icall(bindings::id_Joint2D_get_exclude_nodes_from_collision);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_Joint2D);
		}
		
	}
	
	class AnimatedSprite : Node2D {
		
		
		void set_sprite_frames(SpriteFrames@ sprite_frames) {
			ptr.godot_icall(bindings::id_AnimatedSprite_set_sprite_frames, sprite_frames);
		}
		
		SpriteFrames@ get_sprite_frames() const {
			SpriteFrames ret = ptr.godot_icall(bindings::id_AnimatedSprite_get_sprite_frames);
			return  ret;
		}
		
		void set_animation(const String &in animation) {
			ptr.godot_icall(bindings::id_AnimatedSprite_set_animation, animation);
		}
		
		String get_animation() const {
			return ptr.godot_icall(bindings::id_AnimatedSprite_get_animation);
		}
		
		protected void _set_playing(bool playing) {
			ptr.godot_icall(bindings::id_AnimatedSprite__set_playing, playing);
		}
		
		protected bool _is_playing() const {
			return ptr.godot_icall(bindings::id_AnimatedSprite__is_playing);
		}
		
		void play(const String &in anim) {
			ptr.godot_icall(bindings::id_AnimatedSprite_play, anim);
		}
		
		void stop() {
			ptr.godot_icall(bindings::id_AnimatedSprite_stop);
		}
		
		bool is_playing() const {
			return ptr.godot_icall(bindings::id_AnimatedSprite_is_playing);
		}
		
		void set_centered(bool centered) {
			ptr.godot_icall(bindings::id_AnimatedSprite_set_centered, centered);
		}
		
		bool is_centered() const {
			return ptr.godot_icall(bindings::id_AnimatedSprite_is_centered);
		}
		
		void set_offset(const Vector2 &in offset) {
			ptr.godot_icall(bindings::id_AnimatedSprite_set_offset, offset);
		}
		
		Vector2 get_offset() const {
			return ptr.godot_icall(bindings::id_AnimatedSprite_get_offset);
		}
		
		void set_flip_h(bool flip_h) {
			ptr.godot_icall(bindings::id_AnimatedSprite_set_flip_h, flip_h);
		}
		
		bool is_flipped_h() const {
			return ptr.godot_icall(bindings::id_AnimatedSprite_is_flipped_h);
		}
		
		void set_flip_v(bool flip_v) {
			ptr.godot_icall(bindings::id_AnimatedSprite_set_flip_v, flip_v);
		}
		
		bool is_flipped_v() const {
			return ptr.godot_icall(bindings::id_AnimatedSprite_is_flipped_v);
		}
		
		void set_frame(int frame) {
			ptr.godot_icall(bindings::id_AnimatedSprite_set_frame, frame);
		}
		
		int get_frame() const {
			return ptr.godot_icall(bindings::id_AnimatedSprite_get_frame);
		}
		
		protected void _res_changed() {
			ptr.godot_icall(bindings::id_AnimatedSprite__res_changed);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_AnimatedSprite);
		}
		
	}
	
	class AudioBusLayout : Resource {
		
		protected void _make_instance() {
			@ptr = (ref = bindings::instance_class(bindings::id_AudioBusLayout)).ptr();
		}
		
	}
	
	class PhysicsServer : Object {
		
		
		RID shape_create(int type) {
			return ptr.godot_icall(bindings::id_PhysicsServer_shape_create, type);
		}
		
		void shape_set_data(const RID &in shape, const Variant &in data) {
			ptr.godot_icall(bindings::id_PhysicsServer_shape_set_data, shape, data);
		}
		
		int shape_get_type(const RID &in shape) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_shape_get_type, shape);
		}
		
		Variant shape_get_data(const RID &in shape) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_shape_get_data, shape);
		}
		
		RID space_create() {
			return ptr.godot_icall(bindings::id_PhysicsServer_space_create);
		}
		
		void space_set_active(const RID &in space, bool active) {
			ptr.godot_icall(bindings::id_PhysicsServer_space_set_active, space, active);
		}
		
		bool space_is_active(const RID &in space) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_space_is_active, space);
		}
		
		void space_set_param(const RID &in space, int param, float value) {
			ptr.godot_icall(bindings::id_PhysicsServer_space_set_param, space, param, value);
		}
		
		float space_get_param(const RID &in space, int param) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_space_get_param, space, param);
		}
		
		PhysicsDirectSpaceState@ space_get_direct_state(const RID &in space) {
			PhysicsDirectSpaceState ret = ptr.godot_icall(bindings::id_PhysicsServer_space_get_direct_state, space);
			return  ret;
		}
		
		RID area_create() {
			return ptr.godot_icall(bindings::id_PhysicsServer_area_create);
		}
		
		void area_set_space(const RID &in area, const RID &in space) {
			ptr.godot_icall(bindings::id_PhysicsServer_area_set_space, area, space);
		}
		
		RID area_get_space(const RID &in area) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_area_get_space, area);
		}
		
		void area_set_space_override_mode(const RID &in area, int mode) {
			ptr.godot_icall(bindings::id_PhysicsServer_area_set_space_override_mode, area, mode);
		}
		
		int area_get_space_override_mode(const RID &in area) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_area_get_space_override_mode, area);
		}
		
		void area_add_shape(const RID &in area, const RID &in shape, const Transform &in transform) {
			ptr.godot_icall(bindings::id_PhysicsServer_area_add_shape, area, shape, transform);
		}
		
		void area_set_shape(const RID &in area, int shape_idx, const RID &in shape) {
			ptr.godot_icall(bindings::id_PhysicsServer_area_set_shape, area, shape_idx, shape);
		}
		
		void area_set_shape_transform(const RID &in area, int shape_idx, const Transform &in transform) {
			ptr.godot_icall(bindings::id_PhysicsServer_area_set_shape_transform, area, shape_idx, transform);
		}
		
		int area_get_shape_count(const RID &in area) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_area_get_shape_count, area);
		}
		
		RID area_get_shape(const RID &in area, int shape_idx) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_area_get_shape, area, shape_idx);
		}
		
		Transform area_get_shape_transform(const RID &in area, int shape_idx) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_area_get_shape_transform, area, shape_idx);
		}
		
		void area_remove_shape(const RID &in area, int shape_idx) {
			ptr.godot_icall(bindings::id_PhysicsServer_area_remove_shape, area, shape_idx);
		}
		
		void area_clear_shapes(const RID &in area) {
			ptr.godot_icall(bindings::id_PhysicsServer_area_clear_shapes, area);
		}
		
		void area_set_collision_layer(const RID &in area, int layer) {
			ptr.godot_icall(bindings::id_PhysicsServer_area_set_collision_layer, area, layer);
		}
		
		void area_set_collision_mask(const RID &in area, int mask) {
			ptr.godot_icall(bindings::id_PhysicsServer_area_set_collision_mask, area, mask);
		}
		
		void area_set_param(const RID &in area, int param, const Variant &in value) {
			ptr.godot_icall(bindings::id_PhysicsServer_area_set_param, area, param, value);
		}
		
		void area_set_transform(const RID &in area, const Transform &in transform) {
			ptr.godot_icall(bindings::id_PhysicsServer_area_set_transform, area, transform);
		}
		
		Variant area_get_param(const RID &in area, int param) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_area_get_param, area, param);
		}
		
		Transform area_get_transform(const RID &in area) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_area_get_transform, area);
		}
		
		void area_attach_object_instance_id(const RID &in area, int id) {
			ptr.godot_icall(bindings::id_PhysicsServer_area_attach_object_instance_id, area, id);
		}
		
		int area_get_object_instance_id(const RID &in area) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_area_get_object_instance_id, area);
		}
		
		void area_set_monitor_callback(const RID &in area, Object@ receiver, const String &in method) {
			ptr.godot_icall(bindings::id_PhysicsServer_area_set_monitor_callback, area, receiver, method);
		}
		
		void area_set_ray_pickable(const RID &in area, bool enable) {
			ptr.godot_icall(bindings::id_PhysicsServer_area_set_ray_pickable, area, enable);
		}
		
		bool area_is_ray_pickable(const RID &in area) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_area_is_ray_pickable, area);
		}
		
		RID body_create(int mode, bool init_sleeping) {
			return ptr.godot_icall(bindings::id_PhysicsServer_body_create, mode, init_sleeping);
		}
		
		void body_set_space(const RID &in body, const RID &in space) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_set_space, body, space);
		}
		
		RID body_get_space(const RID &in body) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_body_get_space, body);
		}
		
		void body_set_mode(const RID &in body, int mode) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_set_mode, body, mode);
		}
		
		int body_get_mode(const RID &in body) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_body_get_mode, body);
		}
		
		void body_set_collision_layer(const RID &in body, int layer) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_set_collision_layer, body, layer);
		}
		
		int body_get_collision_layer(const RID &in body) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_body_get_collision_layer, body);
		}
		
		void body_set_collision_mask(const RID &in body, int mask) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_set_collision_mask, body, mask);
		}
		
		int body_get_collision_mask(const RID &in body) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_body_get_collision_mask, body);
		}
		
		void body_add_shape(const RID &in body, const RID &in shape, const Transform &in transform) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_add_shape, body, shape, transform);
		}
		
		void body_set_shape(const RID &in body, int shape_idx, const RID &in shape) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_set_shape, body, shape_idx, shape);
		}
		
		void body_set_shape_transform(const RID &in body, int shape_idx, const Transform &in transform) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_set_shape_transform, body, shape_idx, transform);
		}
		
		int body_get_shape_count(const RID &in body) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_body_get_shape_count, body);
		}
		
		RID body_get_shape(const RID &in body, int shape_idx) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_body_get_shape, body, shape_idx);
		}
		
		Transform body_get_shape_transform(const RID &in body, int shape_idx) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_body_get_shape_transform, body, shape_idx);
		}
		
		void body_remove_shape(const RID &in body, int shape_idx) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_remove_shape, body, shape_idx);
		}
		
		void body_clear_shapes(const RID &in body) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_clear_shapes, body);
		}
		
		void body_attach_object_instance_id(const RID &in body, int id) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_attach_object_instance_id, body, id);
		}
		
		int body_get_object_instance_id(const RID &in body) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_body_get_object_instance_id, body);
		}
		
		void body_set_enable_continuous_collision_detection(const RID &in body, bool enable) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_set_enable_continuous_collision_detection, body, enable);
		}
		
		bool body_is_continuous_collision_detection_enabled(const RID &in body) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_body_is_continuous_collision_detection_enabled, body);
		}
		
		void body_set_param(const RID &in body, int param, float value) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_set_param, body, param, value);
		}
		
		float body_get_param(const RID &in body, int param) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_body_get_param, body, param);
		}
		
		void body_set_kinematic_safe_margin(const RID &in body, float margin) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_set_kinematic_safe_margin, body, margin);
		}
		
		float body_get_kinematic_safe_margin(const RID &in body) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_body_get_kinematic_safe_margin, body);
		}
		
		void body_set_state(const RID &in body, int state, const Variant &in value) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_set_state, body, state, value);
		}
		
		Variant body_get_state(const RID &in body, int state) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_body_get_state, body, state);
		}
		
		void body_apply_impulse(const RID &in body, const Vector3 &in position, const Vector3 &in impulse) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_apply_impulse, body, position, impulse);
		}
		
		void body_apply_torque_impulse(const RID &in body, const Vector3 &in impulse) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_apply_torque_impulse, body, impulse);
		}
		
		void body_set_axis_velocity(const RID &in body, const Vector3 &in axis_velocity) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_set_axis_velocity, body, axis_velocity);
		}
		
		void body_set_axis_lock(const RID &in body, int axis, bool lock) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_set_axis_lock, body, axis, lock);
		}
		
		bool body_is_axis_locked(const RID &in body, int axis) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_body_is_axis_locked, body, axis);
		}
		
		void body_add_collision_exception(const RID &in body, const RID &in excepted_body) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_add_collision_exception, body, excepted_body);
		}
		
		void body_remove_collision_exception(const RID &in body, const RID &in excepted_body) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_remove_collision_exception, body, excepted_body);
		}
		
		void body_set_max_contacts_reported(const RID &in body, int amount) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_set_max_contacts_reported, body, amount);
		}
		
		int body_get_max_contacts_reported(const RID &in body) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_body_get_max_contacts_reported, body);
		}
		
		void body_set_omit_force_integration(const RID &in body, bool enable) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_set_omit_force_integration, body, enable);
		}
		
		bool body_is_omitting_force_integration(const RID &in body) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_body_is_omitting_force_integration, body);
		}
		
		void body_set_force_integration_callback(const RID &in body, Object@ receiver, const String &in method, const Variant &in userdata) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_set_force_integration_callback, body, receiver, method, userdata);
		}
		
		void body_set_ray_pickable(const RID &in body, bool enable) {
			ptr.godot_icall(bindings::id_PhysicsServer_body_set_ray_pickable, body, enable);
		}
		
		bool body_is_ray_pickable(const RID &in body) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_body_is_ray_pickable, body);
		}
		
		PhysicsDirectBodyState@ body_get_direct_state(const RID &in body) {
			PhysicsDirectBodyState ret = ptr.godot_icall(bindings::id_PhysicsServer_body_get_direct_state, body);
			return  ret;
		}
		
		RID joint_create_pin(const RID &in body_A, const Vector3 &in local_A, const RID &in body_B, const Vector3 &in local_B) {
			return ptr.godot_icall(bindings::id_PhysicsServer_joint_create_pin, body_A, local_A, body_B, local_B);
		}
		
		void pin_joint_set_param(const RID &in joint, int param, float value) {
			ptr.godot_icall(bindings::id_PhysicsServer_pin_joint_set_param, joint, param, value);
		}
		
		float pin_joint_get_param(const RID &in joint, int param) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_pin_joint_get_param, joint, param);
		}
		
		void pin_joint_set_local_a(const RID &in joint, const Vector3 &in local_A) {
			ptr.godot_icall(bindings::id_PhysicsServer_pin_joint_set_local_a, joint, local_A);
		}
		
		Vector3 pin_joint_get_local_a(const RID &in joint) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_pin_joint_get_local_a, joint);
		}
		
		void pin_joint_set_local_b(const RID &in joint, const Vector3 &in local_B) {
			ptr.godot_icall(bindings::id_PhysicsServer_pin_joint_set_local_b, joint, local_B);
		}
		
		Vector3 pin_joint_get_local_b(const RID &in joint) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_pin_joint_get_local_b, joint);
		}
		
		RID joint_create_hinge(const RID &in body_A, const Transform &in hinge_A, const RID &in body_B, const Transform &in hinge_B) {
			return ptr.godot_icall(bindings::id_PhysicsServer_joint_create_hinge, body_A, hinge_A, body_B, hinge_B);
		}
		
		void hinge_joint_set_param(const RID &in joint, int param, float value) {
			ptr.godot_icall(bindings::id_PhysicsServer_hinge_joint_set_param, joint, param, value);
		}
		
		float hinge_joint_get_param(const RID &in joint, int param) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_hinge_joint_get_param, joint, param);
		}
		
		void hinge_joint_set_flag(const RID &in joint, int flag, bool enabled) {
			ptr.godot_icall(bindings::id_PhysicsServer_hinge_joint_set_flag, joint, flag, enabled);
		}
		
		bool hinge_joint_get_flag(const RID &in joint, int flag) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_hinge_joint_get_flag, joint, flag);
		}
		
		RID joint_create_slider(const RID &in body_A, const Transform &in local_ref_A, const RID &in body_B, const Transform &in local_ref_B) {
			return ptr.godot_icall(bindings::id_PhysicsServer_joint_create_slider, body_A, local_ref_A, body_B, local_ref_B);
		}
		
		void slider_joint_set_param(const RID &in joint, int param, float value) {
			ptr.godot_icall(bindings::id_PhysicsServer_slider_joint_set_param, joint, param, value);
		}
		
		float slider_joint_get_param(const RID &in joint, int param) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_slider_joint_get_param, joint, param);
		}
		
		RID joint_create_cone_twist(const RID &in body_A, const Transform &in local_ref_A, const RID &in body_B, const Transform &in local_ref_B) {
			return ptr.godot_icall(bindings::id_PhysicsServer_joint_create_cone_twist, body_A, local_ref_A, body_B, local_ref_B);
		}
		
		void cone_twist_joint_set_param(const RID &in joint, int param, float value) {
			ptr.godot_icall(bindings::id_PhysicsServer_cone_twist_joint_set_param, joint, param, value);
		}
		
		float cone_twist_joint_get_param(const RID &in joint, int param) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_cone_twist_joint_get_param, joint, param);
		}
		
		int joint_get_type(const RID &in joint) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_joint_get_type, joint);
		}
		
		void joint_set_solver_priority(const RID &in joint, int priority) {
			ptr.godot_icall(bindings::id_PhysicsServer_joint_set_solver_priority, joint, priority);
		}
		
		int joint_get_solver_priority(const RID &in joint) const {
			return ptr.godot_icall(bindings::id_PhysicsServer_joint_get_solver_priority, joint);
		}
		
		RID joint_create_generic_6dof(const RID &in body_A, const Transform &in local_ref_A, const RID &in body_B, const Transform &in local_ref_B) {
			return ptr.godot_icall(bindings::id_PhysicsServer_joint_create_generic_6dof, body_A, local_ref_A, body_B, local_ref_B);
		}
		
		void generic_6dof_joint_set_param(const RID &in joint, int axis, int param, float value) {
			ptr.godot_icall(bindings::id_PhysicsServer_generic_6dof_joint_set_param, joint, axis, param, value);
		}
		
		float generic_6dof_joint_get_param(const RID &in joint, int axis, int param) {
			return ptr.godot_icall(bindings::id_PhysicsServer_generic_6dof_joint_get_param, joint, axis, param);
		}
		
		void generic_6dof_joint_set_flag(const RID &in joint, int axis, int flag, bool enable) {
			ptr.godot_icall(bindings::id_PhysicsServer_generic_6dof_joint_set_flag, joint, axis, flag, enable);
		}
		
		bool generic_6dof_joint_get_flag(const RID &in joint, int axis, int flag) {
			return ptr.godot_icall(bindings::id_PhysicsServer_generic_6dof_joint_get_flag, joint, axis, flag);
		}
		
		void free_rid(const RID &in rid) {
			ptr.godot_icall(bindings::id_PhysicsServer_free_rid, rid);
		}
		
		void set_active(bool active) {
			ptr.godot_icall(bindings::id_PhysicsServer_set_active, active);
		}
		
		int get_process_info(int process_info) {
			return ptr.godot_icall(bindings::id_PhysicsServer_get_process_info, process_info);
		}

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_PhysicsServer);
		}
		
	}
	
	class VScrollBar : ScrollBar {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_VScrollBar);
		}
		
	}
	
	class CheckButton : Button {
		

		protected void _make_instance() {
			@ptr = bindings::instance_class(bindings::id_CheckButton);
		}
		
	}
}